{"ast":null,"code":"// SBA loan payment calculation\nexport const calculateSBAPayment=function(principal){let rate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.115;let years=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;const monthlyRate=rate/12;const payments=years*12;return principal*monthlyRate*Math.pow(1+monthlyRate,payments)/(Math.pow(1+monthlyRate,payments)-1)*12;};// Seller note payment calculation  \nexport const calculateSellerPayment=function(principal){let rate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.08;let years=arguments.length>2&&arguments[2]!==undefined?arguments[2]:5;const monthlyRate=rate/12;const payments=years*12;return principal*monthlyRate*Math.pow(1+monthlyRate,payments)/(Math.pow(1+monthlyRate,payments)-1)*12;};// Expected value calculation\nexport const calculateExpectedValue=(scenarios,probabilities)=>{return scenarios.bestCase*probabilities.bestCase/100+scenarios.mostLikely*probabilities.mostLikely/100+scenarios.worstCase*probabilities.worstCase/100;};// Auto-normalize probabilities\nexport const normalizeProbabilities=(best,likely,worst)=>{const total=best+likely+worst;if(total!==100){const factor=100/total;return{best:Math.round(best*factor),likely:Math.round(likely*factor),worst:Math.round(worst*factor)};}return{best,likely,worst};};// SBA minimum constraint\nexport const validateSBADownPayment=value=>Math.max(value,10);// Debt service coverage validation\nexport const validateDebtCoverage=(ebitda,debtService)=>debtService/ebitda<=0.8;// Generate bell curve data\nexport const generateBellCurve=(mean,min,max)=>{const stdDev=(max-min)/6;const points=[];for(let x=min;x<=max;x+=(max-min)/100){const y=Math.exp(-0.5*Math.pow((x-mean)/stdDev,2));points.push({x,y});}return points;};// Calculate total cash required\nexport const calculateTotalCashRequired=params=>{const{purchasePrice,sbaDownPaymentPercent,workingCapitalPercent,targetRevenue,techInvestment,sellerFinancingPercent=20,// Default seller financing percentage\ndueDiligencePercent=1.5,professionalFeesPercent=0.8,contingencyPercent=2.5}=params;// Calculate financing structure correctly\nconst sellerFinancingAmount=purchasePrice*(sellerFinancingPercent/100);const sbaLoanAmount=purchasePrice-sellerFinancingAmount;const sbaDownPayment=sbaLoanAmount*(sbaDownPaymentPercent/100);// Note: Total financing may exceed purchase price if both SBA and seller financing are used\n// This is typical in SBA deals where seller financing is additional to SBA loan\nconst workingCapital=targetRevenue*(workingCapitalPercent/100);const dueDiligence=purchasePrice*(dueDiligencePercent/100);const professionalFees=purchasePrice*(professionalFeesPercent/100);const contingency=purchasePrice*(contingencyPercent/100);return{downPayment:sbaDownPayment,workingCapital,dueDiligence,professionalFees,techInvestment,contingency,total:sbaDownPayment+workingCapital+dueDiligence+professionalFees+techInvestment+contingency};};// Calculate annual cash to pocket\nexport const calculateAnnualCashToPocket=params=>{const{targetRevenue,netProfitMarginPercent,sbaLoanAmount,sellerFinancingAmount,managementSalary,techInvestment}=params;const ebitda=targetRevenue*(netProfitMarginPercent/100);const sbaPayment=calculateSBAPayment(sbaLoanAmount);const sellerPayment=calculateSellerPayment(sellerFinancingAmount);const techInvestmentAmortized=techInvestment/3;// Amortized over 3 years\nreturn{ebitda,sbaPayment,sellerPayment,managementSalary,techInvestmentAmortized,netCashFlow:ebitda-sbaPayment-sellerPayment-managementSalary-techInvestmentAmortized};};// Calculate Debt Service Coverage Ratio (DSCR)\nexport const calculateDSCR=(annualEBITDA,totalAnnualDebtService)=>{return annualEBITDA/totalAnnualDebtService;};// Calculate Cash-on-Cash Return\nexport const calculateCashOnCashReturn=(annualCashToPocket,totalCashInvested)=>{return annualCashToPocket/totalCashInvested*100;};// Calculate IRR using Newton-Raphson method\nexport const calculateIRR=(initialInvestment,cashFlows)=>{const tolerance=0.0001;const maxIterations=100;let guess=0.1;// Start with 10%\nfor(let i=0;i<maxIterations;i++){let npv=-initialInvestment;let derivative=0;for(let j=0;j<cashFlows.length;j++){const discountFactor=Math.pow(1+guess,j+1);npv+=cashFlows[j]/discountFactor;derivative-=(j+1)*cashFlows[j]/(discountFactor*(1+guess));}const newGuess=guess-npv/derivative;if(Math.abs(newGuess-guess)<tolerance){return newGuess*100;// Return as percentage\n}guess=newGuess;}return null;// No convergence\n};// Calculate Multiple on Invested Capital (MOIC)\nexport const calculateMOIC=(totalCashInvested,fiveYearProjections)=>{const totalCashReturned=fiveYearProjections.reduce((sum,year)=>sum+year.cashFlow,0);const businessValueAtExit=fiveYearProjections[4].ebitda*4.2;// Assume same multiple\nreturn(totalCashReturned+businessValueAtExit)/totalCashInvested;};// Calculate Payback Period\nexport const calculatePaybackPeriod=(totalCashInvested,fiveYearProjections)=>{let cumulativeCashFlow=0;for(let i=0;i<fiveYearProjections.length;i++){cumulativeCashFlow+=fiveYearProjections[i].cashFlow;if(cumulativeCashFlow>=totalCashInvested){return i+1+(totalCashInvested-(cumulativeCashFlow-fiveYearProjections[i].cashFlow))/fiveYearProjections[i].cashFlow;}}return'>5 years';};// Enhanced Risk Score Calculation\nexport const calculateEnhancedRiskScore=(dscr,cashOnCash,sellerFinancingPercent)=>{let score=5;// Base score\n// DSCR scoring\nif(dscr>=1.5)score+=2;else if(dscr>=1.25)score+=1;else score-=2;// Cash-on-Cash scoring\nif(cashOnCash>=20)score+=2;else if(cashOnCash>=15)score+=1;else if(cashOnCash<10)score-=1;// Seller financing scoring\nif(sellerFinancingPercent>=20)score+=1;// Seller has skin in game\nreturn Math.max(1,Math.min(10,score));};// Calculate financing structure\nexport const calculateFinancingStructure=params=>{const{purchasePrice,sellerFinancingPercent,sbaDownPaymentPercent}=params;const sellerFinancing=purchasePrice*(sellerFinancingPercent/100);const sbaLoanAmount=purchasePrice-sellerFinancing;const downPayment=sbaLoanAmount*(sbaDownPaymentPercent/100);return{purchasePrice,sellerFinancing,sbaLoanAmount,downPayment};};// Calculate 5-year projections for advanced metrics\nexport const calculateFiveYearProjections=params=>{const{targetRevenue,revenueGrowthRatePercent,netProfitMarginPercent,sbaLoanAmount,sellerFinancingAmount,managementSalary,techInvestment,sbaInterestRate=11.5,sellerInterestRate=8}=params;const projections=[];let currentRevenue=targetRevenue;for(let year=1;year<=5;year++){const ebitda=currentRevenue*(netProfitMarginPercent/100);const sbaPayment=calculateSBAPayment(sbaLoanAmount,sbaInterestRate/100,10);const sellerPayment=calculateSellerPayment(sellerFinancingAmount,sellerInterestRate/100,5);const techInvestmentAmortized=year<=3?techInvestment/3:0;const netCashFlow=ebitda-sbaPayment-sellerPayment-managementSalary-techInvestmentAmortized;projections.push({year,revenue:currentRevenue,ebitda,cashFlow:netCashFlow});currentRevenue*=1+revenueGrowthRatePercent/100;}return projections;};// Calculate business targeting metrics\nexport const calculateBusinessTargetingMetrics=(availableCash,targetRevenue)=>{return{maxSafePurchasePrice:availableCash*4,// Assuming 25% total cash requirement\nminRequiredEBITDA:availableCash*4*0.12/1.25,// 12% debt service / 1.25x coverage\ntargetRevenueRange:{min:targetRevenue*0.8,max:targetRevenue*1.2},recommendedMultipleRange:{min:3.5,max:5.0}};};// Calculate risk score (1-10)\nexport const calculateRiskScore=params=>{let riskScore=5;// Base score\n// Debt service coverage ratio\nconst ebitda=params.targetRevenue*(params.netProfitMarginPercent/100);const sbaPayment=calculateSBAPayment(params.sbaLoanAmount);const sellerPayment=calculateSellerPayment(params.sellerFinancingAmount);const totalDebtService=sbaPayment+sellerPayment;const debtCoverageRatio=ebitda/totalDebtService;if(debtCoverageRatio<1.25)riskScore+=3;else if(debtCoverageRatio<1.5)riskScore+=1;else if(debtCoverageRatio>2.0)riskScore-=1;// Working capital ratio\nconst workingCapitalRatio=params.workingCapitalPercent/100/(params.netProfitMarginPercent/100);if(workingCapitalRatio>0.8)riskScore+=2;else if(workingCapitalRatio<0.3)riskScore-=1;// SBA down payment\nif(params.sbaDownPaymentPercent<12)riskScore+=1;else if(params.sbaDownPaymentPercent>15)riskScore-=1;return Math.max(1,Math.min(10,riskScore));};// Calculate business-only WACC (excluding personal loans)\nexport const calculateBusinessWACC=(sbaLoan,sellerFinancing,purchasePrice)=>{const totalBusinessDebt=sbaLoan.amount+sellerFinancing.amount;const businessEquity=purchasePrice-totalBusinessDebt;const totalBusinessCapital=purchasePrice;if(totalBusinessCapital<=0)return 0;const debtWeight=totalBusinessDebt/totalBusinessCapital;const equityWeight=businessEquity/totalBusinessCapital;// Different tax treatment for different debt types\nconst sbaAfterTaxCost=0.115*0.75;// 25% tax benefit for business-deductible SBA\nconst sellerAfterTaxCost=0.08*0.9;// 10% tax benefit for seller financing (less deductible)\nconst afterTaxDebtCost=totalBusinessDebt>0?(sbaLoan.amount*sbaAfterTaxCost+sellerFinancing.amount*sellerAfterTaxCost)/totalBusinessDebt:0;const equityCost=0.15;// Business equity cost\nreturn debtWeight*afterTaxDebtCost+equityWeight*equityCost;};// Calculate business-level EVA (excluding personal loans)\nexport const calculateBusinessEVA=(businessEBITDA,businessCapitalInvested,businessWACC)=>{const taxRate=0.25;const nopat=businessEBITDA*(1-taxRate);// Net Operating Profit After Tax\nconst capitalCharge=businessCapitalInvested*businessWACC;return nopat-capitalCharge;};// Calculate business cash flow (company level only)\nexport const calculateBusinessCashFlow=(scenario,loanStructure,businessCapitalInvested)=>{const businessDebtService=loanStructure.sbaLoan.annualPayment+loanStructure.sellerFinancing.annualPayment;const businessFreeCashFlow=scenario.ebitda-businessDebtService-scenario.managementSalary-scenario.techInvestmentAnnual;const businessDSCR=businessDebtService>0?scenario.ebitda/businessDebtService:0;return{businessRevenue:scenario.targetRevenue,businessEBITDA:scenario.ebitda,businessDebtService:businessDebtService,businessFreeCashFlow:businessFreeCashFlow,businessDSCR:businessDSCR,businessROA:businessCapitalInvested>0?businessFreeCashFlow/businessCapitalInvested*100:0};};// Calculate personal cash flow (owner level only)\nexport const calculatePersonalCashFlow=(businessCashFlow,personalLoans,ownershipData,fundingSources)=>{const ownerDistribution=businessCashFlow.businessFreeCashFlow*ownershipData.yourOwnership;const personalDebtService=personalLoans.houseEquity.annualPayment+personalLoans.taiwaneseLoan.annualPayment;const personalNetCashFlow=ownerDistribution-personalDebtService;const personalCashInvested=(fundingSources.personalCash.enabled?fundingSources.personalCash.amount:0)+(fundingSources.houseEquity.enabled?fundingSources.houseEquity.amount:0)+(fundingSources.taiwaneseLoan.enabled?fundingSources.taiwaneseLoan.amount:0);const personalROI=personalCashInvested>0?personalNetCashFlow/personalCashInvested*100:0;return{ownerDistribution:ownerDistribution,personalDebtService:personalDebtService,personalNetCashFlow:personalNetCashFlow,personalCashInvested:personalCashInvested,personalROI:personalROI};};// Calculate personal projections\nexport const calculatePersonalProjections=(businessProjections,personalLoans,ownershipData)=>{return businessProjections.map((year,index)=>{const businessFCF=year.businessFreeCashFlow;const ownerDistribution=businessFCF*ownershipData.yourOwnership;const personalDebtService=personalLoans.total;const yourFCF=ownerDistribution-personalDebtService;return{year:index+1,businessFCF:businessFCF,ownerDistribution:ownerDistribution,yourFCF:yourFCF,DSCR:year.businessDSCR,cumulative:index===0?yourFCF:(index>0?businessProjections[index-1].cumulative:0)+yourFCF};});};// Calculate risk-adjusted ownership with fair methodology\nexport const calculateRiskAdjustedOwnership=function(fundingSources){let managementValue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:150000;// Calculate risk-weighted contributions\nconst personalCashRisk=fundingSources.personalCash.enabled?fundingSources.personalCash.amount:0;// Taiwanese loan: Personal guarantee = 80% risk weight\nconst taiwaneseLoanRisk=fundingSources.taiwaneseLoan.enabled?fundingSources.taiwaneseLoan.amount*0.8:0;// Home equity: Personal asset at risk = 120% risk weight (higher risk premium)\nconst homeEquityRisk=fundingSources.houseEquity.enabled?fundingSources.houseEquity.amount*1.2:0;// SBA loan: Personal guarantee but asset-backed = 30% risk weight\n// const sbaRisk = 0; // SBA loan is debt, not equity contribution\n// Management/operational value (sweat equity)\nconst sweatEquityValue=managementValue;// Total personal risk-adjusted contribution\nconst personalRiskAdjusted=personalCashRisk+taiwaneseLoanRisk+homeEquityRisk+sweatEquityValue;// Outside investor contribution (100% risk weight)\nconst investorContribution=fundingSources.additionalInvestment.enabled?fundingSources.additionalInvestment.amount:0;// Total risk-adjusted equity\nconst totalRiskAdjustedEquity=personalRiskAdjusted+investorContribution;// Base ownership calculation\nconst baseOwnership=totalRiskAdjustedEquity>0?personalRiskAdjusted/totalRiskAdjustedEquity:1;// Dynamic control premium based on investor amount\nconst controlPremium=investorContribution>0?Math.min(0.05,investorContribution/1000000):0;// Max 5%, scales with investment size\n// Final ownership (capped at 95% to be fair to investors)\nconst finalOwnership=Math.min(0.95,baseOwnership+controlPremium);return{yourOwnership:finalOwnership,investorOwnership:1-finalOwnership,breakdown:{personalCashRisk,taiwaneseLoanRisk,homeEquityRisk,sweatEquityValue,investorContribution,controlPremium:controlPremium*100}};};// Calculate ownership cash flows with preferred return structure\nexport const calculateOwnershipCashFlows=(totalBusinessCashFlow,ownershipData,fundingSources)=>{const investorAmount=fundingSources.additionalInvestment.enabled?fundingSources.additionalInvestment.amount:0;const personalCashAmount=fundingSources.personalCash.enabled?fundingSources.personalCash.amount:0;// Investor preferred return (8% on their investment)\nconst investorPreferredReturn=investorAmount*0.08;// Your preferred return (6% on personal cash)\nconst yourPreferredReturn=personalCashAmount*0.06;// Total preferred returns\nconst totalPreferredReturns=investorPreferredReturn+yourPreferredReturn;// Remaining cash flow after preferred returns\nconst remainingCashFlow=Math.max(0,totalBusinessCashFlow-totalPreferredReturns);// Split remaining cash flow based on ownership percentages\nconst yourRemainingShare=remainingCashFlow*ownershipData.yourOwnership;const investorRemainingShare=remainingCashFlow*ownershipData.investorOwnership;// Total distributions\nconst yourTotalCashFlow=yourPreferredReturn+yourRemainingShare;const investorTotalCashFlow=investorPreferredReturn+investorRemainingShare;// Calculate ROI on actual cash invested (not risk-adjusted amounts)\nconst yourCashInvested=personalCashAmount;const yourROI=yourCashInvested>0?yourTotalCashFlow/yourCashInvested*100:0;const investorROI=investorAmount>0?investorTotalCashFlow/investorAmount*100:0;return{yourTotalCashFlow,investorTotalCashFlow,yourROI,investorROI,preferredReturns:{yours:yourPreferredReturn,investor:investorPreferredReturn},remainingCashFlowSplit:{yours:yourRemainingShare,investor:investorRemainingShare}};};// Validate ownership for reasonableness\nexport const validateOwnership=(ownershipData,fundingSources,businessMetrics)=>{const warnings=[];// Check if investor is getting fair deal\nif(ownershipData.investorOwnership<0.05&&fundingSources.additionalInvestment.amount>50000){warnings.push(\"⚠️ Investor ownership very low - may not be attractive\");}// Check if you're giving up too much\nif(ownershipData.yourOwnership<0.6&&fundingSources.personalCash.amount>fundingSources.additionalInvestment.amount){warnings.push(\"⚠️ Your ownership low despite majority funding\");}// Check for reasonable investor return (simplified calculation)\nconst investorAmount=fundingSources.additionalInvestment.enabled?fundingSources.additionalInvestment.amount:0;const expectedInvestorReturn=investorAmount>0?businessMetrics.totalCashFlow*ownershipData.investorOwnership/investorAmount*100:0;if(expectedInvestorReturn<15&&investorAmount>0){warnings.push(\"⚠️ Investor expected return below market (15%+)\");}return warnings;};// Verification function to test calculations with known values\nexport const verifyCalculations=testScenario=>{const{targetRevenue=2500000,netProfitMargin=25,valuationMultiple=4,sbaLoanAmount=1500000,sellerFinancingAmount=500000,personalCash=550000,additionalInvestment=100000}=testScenario;// Test business calculations\nconst ebitda=targetRevenue*(netProfitMargin/100);const purchasePrice=ebitda*valuationMultiple;const businessCapitalInvested=purchasePrice+targetRevenue*0.1+purchasePrice*0.015+purchasePrice*0.008;// Test WACC\nconst businessWACC=calculateBusinessWACC({amount:sbaLoanAmount,rate:0.115},{amount:sellerFinancingAmount,rate:0.08},purchasePrice);// Test EVA\nconst businessEVA=calculateBusinessEVA(ebitda,businessCapitalInvested,businessWACC);// Test ownership\nconst fundingSources={personalCash:{enabled:true,amount:personalCash},taiwaneseLoan:{enabled:true,amount:725000},houseEquity:{enabled:false,amount:200000},additionalInvestment:{enabled:true,amount:additionalInvestment}};const ownershipData=calculateRiskAdjustedOwnership(fundingSources);return{testScenario:{targetRevenue,ebitda,purchasePrice,businessCapitalInvested,businessWACC:businessWACC*100,businessEVA,ownershipData},expectedRanges:{businessWACC:{min:7,max:12},businessEVA:{min:0,max:200000},ownership:{min:0.6,max:0.95}}};};// Format currency\nexport const formatCurrency=amount=>{return new Intl.NumberFormat('en-US',{style:'currency',currency:'USD',minimumFractionDigits:0,maximumFractionDigits:0}).format(amount);};// Format percentage\nexport const formatPercentage=value=>{return`${value.toFixed(1)}%`;};// FUNDING PRIORITY ALLOCATION FUNCTIONS\n// Calculate total cash needed for acquisition\nexport const calculateTotalCashNeeded=(scenario,variables)=>{const purchasePrice=scenario.purchasePrice;const workingCapitalPercent=variables.workingCapital||14.6;const workingCapital=scenario.targetRevenue*(workingCapitalPercent/100);const dueDiligence=purchasePrice*0.015;const professionalFees=purchasePrice*0.008;const contingency=purchasePrice*0.025;const techInvestment=variables.techInvestment||100000;// Calculate SBA down payment correctly\nconst sellerFinancingPercent=variables.sellerFinancing||20;const sellerFinancingAmount=purchasePrice*(sellerFinancingPercent/100);const sbaLoanAmount=purchasePrice-sellerFinancingAmount;const sbaDownPaymentPercent=variables.sbaDownPayment||12;const sbaDownPayment=sbaLoanAmount*(sbaDownPaymentPercent/100);const totalCashNeeded=sbaDownPayment+workingCapital+dueDiligence+professionalFees+contingency+techInvestment;// Debug logging\nconsole.log('DEBUG - calculateTotalCashNeeded:',{purchasePrice,sellerFinancingPercent,sellerFinancingAmount,sbaLoanAmount,sbaDownPaymentPercent,sbaDownPayment,workingCapital,dueDiligence,professionalFees,contingency,techInvestment,totalCashNeeded});return{purchasePrice,workingCapital,dueDiligence,professionalFees,contingency,techInvestment,sbaDownPayment,totalCashNeeded};};// Allocate funding by priority order (lowest to highest cost) - FOCUSED ON DOWN PAYMENT\nexport const allocateFundingByPriority=(downPaymentNeeded,fundingSources)=>{const allocation={taiwaneseLoan:0,personalCash:0,additionalInvestment:0,sellerFinancing:0,houseEquity:0,sbaLoan:0};let remainingDownPayment=downPaymentNeeded;// Priority 1: Taiwanese Loan (cheapest - 2.8%) - $300,000 available\nif(fundingSources.taiwaneseLoan.enabled&&remainingDownPayment>0){const used=Math.min(remainingDownPayment,fundingSources.taiwaneseLoan.amount);allocation.taiwaneseLoan=used;remainingDownPayment-=used;}// Priority 2: Personal Cash (8% opportunity cost) - $50,000 available\nif(fundingSources.personalCash.enabled&&remainingDownPayment>0){const used=Math.min(remainingDownPayment,fundingSources.personalCash.amount);allocation.personalCash=used;remainingDownPayment-=used;}// Priority 3: Additional Investment (15% expected return) - $50,000 available\nif(fundingSources.additionalInvestment.enabled&&remainingDownPayment>0){const used=Math.min(remainingDownPayment,fundingSources.additionalInvestment.amount);allocation.additionalInvestment=used;remainingDownPayment-=used;}// Priority 4: Seller Financing (8%) - $0 available (disabled)\nif(fundingSources.sellerFinancing.enabled&&remainingDownPayment>0){const used=Math.min(remainingDownPayment,fundingSources.sellerFinancing.amount);allocation.sellerFinancing=used;remainingDownPayment-=used;}// Priority 5: Home Equity Loan (8% but personal asset at risk) - $98,273 available\nif(fundingSources.houseEquity.enabled&&remainingDownPayment>0){const used=Math.min(remainingDownPayment,fundingSources.houseEquity.amount);allocation.houseEquity=used;remainingDownPayment-=used;}// Priority 6: SBA Loan (11.5% - highest cost, use as last resort) - $0 available (disabled)\nif(remainingDownPayment>0){allocation.sbaLoan=remainingDownPayment;// Whatever is left\n}return{allocation,downPaymentGap:remainingDownPayment<0?0:remainingDownPayment,totalAllocated:downPaymentNeeded-Math.max(0,remainingDownPayment),downPaymentNeeded:downPaymentNeeded,remainingDownPayment:Math.max(0,remainingDownPayment)};};// Determine purchase price financing structure\nexport const calculatePurchasePriceFinancing=(purchasePrice,fundingAllocation,variables)=>{// Seller financing reduces the amount that needs bank financing\nconst sellerFinancingAmount=fundingAllocation.allocation.sellerFinancing||0;const amountNeedingBankFinancing=purchasePrice-sellerFinancingAmount;// SBA loan covers remaining purchase price\nconst sbaLoanAmount=Math.max(0,amountNeedingBankFinancing);const sbaDownPaymentPercent=Math.max(variables.sbaDownPayment||10,10);const sbaDownPayment=sbaLoanAmount*(sbaDownPaymentPercent/100);const sbaLoanPrincipal=sbaLoanAmount-sbaDownPayment;return{sellerFinancingAmount,sbaLoanAmount,sbaDownPayment,sbaLoanPrincipal,totalDownPaymentCovered:sbaDownPayment// This comes from cash allocation\n};};// Calculate business debt service with priority allocation\nexport const calculateBusinessDebtService=purchaseFinancing=>{// Only SBA loan and seller financing create debt service for the business\nconst sbaAnnualPayment=calculateSBAPayment(purchaseFinancing.sbaLoanPrincipal,0.115,10);const sellerAnnualPayment=calculateSellerPayment(purchaseFinancing.sellerFinancingAmount,0.08,5);return{sbaAnnualPayment,sellerAnnualPayment,totalBusinessDebtService:sbaAnnualPayment+sellerAnnualPayment};};// Calculate personal debt service with priority allocation\nexport const calculatePersonalDebtService=fundingAllocation=>{// Only personal loans create personal debt service\nconst houseEquityPayment=fundingAllocation.allocation.houseEquity>0?calculateSBAPayment(fundingAllocation.allocation.houseEquity,0.08,15):0;const taiwanesePayment=fundingAllocation.allocation.taiwaneseLoan>0?calculateSBAPayment(fundingAllocation.allocation.taiwaneseLoan,0.028,10):0;return{houseEquityPayment,taiwanesePayment,totalPersonalDebtService:houseEquityPayment+taiwanesePayment};};// Calculate WACC with priority-based allocation - ALL FUNDING SOURCES\nexport const calculatePriorityBasedWACC=(fundingAllocation,purchasePrice)=>{// WACC should include ALL funding sources used for the business acquisition\n// Each source has its own after-tax cost of capital\nlet totalFunding=0;let weightedCost=0;// After-tax cost rates for each funding source\nconst afterTaxCostRates={taiwaneseLoan:0.028*0.75,// 2.8% × 0.75 = 2.1% after-tax (if business deductible)\npersonalCash:0.08*0.75,// 8% × 0.75 = 6% after-tax (opportunity cost with tax benefit)\nadditionalInvestment:0.15,// 15% equity cost (no tax benefit)\nsellerFinancing:0.08*0.75,// 8% × 0.75 = 6% after-tax\nhouseEquity:0.08,// 8% (personal debt, no business tax benefit)\nsbaLoan:0.115*0.75// 11.5% × 0.75 = 8.6% after-tax\n};// Calculate weighted average cost of capital across all funding sources\nObject.entries(fundingAllocation.allocation).forEach(_ref=>{let[source,amount]=_ref;if(amount>0){totalFunding+=amount;weightedCost+=amount*afterTaxCostRates[source];}});return totalFunding>0?weightedCost/totalFunding*100:0;};// Calculate ownership with priority-based allocation\nexport const calculatePriorityBasedOwnership=fundingAllocation=>{// Risk-adjusted personal contributions based on ACTUAL allocated amounts\nconst personalCashRisk=fundingAllocation.allocation.personalCash*1.0;const taiwaneseLoanRisk=fundingAllocation.allocation.taiwaneseLoan*0.8;// Personal guarantee\nconst houseEquityRisk=fundingAllocation.allocation.houseEquity*1.2;// Personal asset risk\nconst totalPersonalRisk=personalCashRisk+taiwaneseLoanRisk+houseEquityRisk;const investorContribution=fundingAllocation.allocation.additionalInvestment;const totalEquity=totalPersonalRisk+investorContribution;const finalOwnership=totalEquity>0?totalPersonalRisk/totalEquity:1;// Removed control premium\nreturn{yourOwnership:finalOwnership,investorOwnership:1-finalOwnership,breakdown:{personalCashRisk,taiwaneseLoanRisk,houseEquityRisk,investorContribution}};};// Calculate personal cost of capital (for personal funding sources)\nexport const calculatePersonalCostOfCapital=fundingAllocation=>{let totalPersonalFunding=0;let weightedPersonalCost=0;// Only consider personal funding sources: Taiwanese Loan, Personal Cash, Home Equity\nconst personalCostRates={taiwaneseLoan:0.028,// 2.8% - personal loan rate\npersonalCash:0.08,// 8% opportunity cost\nhouseEquity:0.08// 8% home equity rate\n// Excluded: additionalInvestment, sellerFinancing, sbaLoan (not personal funding)\n};// Only calculate for personal funding sources\nconst personalSources=['taiwaneseLoan','personalCash','houseEquity'];console.log('DEBUG - Personal Cost Calculation:',{fundingAllocation:fundingAllocation.allocation,personalSources});personalSources.forEach(source=>{const amount=fundingAllocation.allocation[source]||0;console.log(`DEBUG - ${source}:`,{amount,rate:personalCostRates[source]});if(amount>0){totalPersonalFunding+=amount;weightedPersonalCost+=amount*personalCostRates[source];}});return totalPersonalFunding>0?weightedPersonalCost/totalPersonalFunding*100:0;};// Main scenario calculation with priority-based funding\nexport const calculateScenariosWithPriority=(targetRevenues,variables,fundingSources)=>{return targetRevenues.map(revenue=>{// Step 1: Calculate business metrics\nconst netMargin=variables.netProfitMargin||25;const valuationMultiple=variables.valuationMultiple||4;const ebitda=revenue*(netMargin/100);const purchasePrice=ebitda*valuationMultiple;const businessMetrics={targetRevenue:revenue,ebitda:ebitda,purchasePrice:purchasePrice};// Step 2: Calculate down payment needed (same logic as Scenario Comparison)\nconst downPaymentCalculation=calculateDownPaymentNeeded(businessMetrics,variables);// Step 3: Allocate funding by priority based on down payment needed\nconst fundingAllocation=allocateFundingByPriority(downPaymentCalculation.downPaymentNeeded,fundingSources);// Step 4: Calculate purchase price financing\nconst purchaseFinancing=calculatePurchasePriceFinancing(businessMetrics.purchasePrice,fundingAllocation,variables);// Step 5: Calculate debt service\nconst businessDebtService=calculateBusinessDebtService(purchaseFinancing);const personalDebtService=calculatePersonalDebtService(fundingAllocation);// Step 6: Calculate ownership, WACC, and personal cost of capital\nconst ownership=calculatePriorityBasedOwnership(fundingAllocation);const wacc=calculatePriorityBasedWACC(fundingAllocation,businessMetrics.purchasePrice);const personalCostOfCapital=calculatePersonalCostOfCapital(fundingAllocation);// Step 7: Calculate cash flows\nconst businessCashFlow=businessMetrics.ebitda-businessDebtService.totalBusinessDebtService-(variables.managementSalary||100000)-(variables.techInvestment||100000)/3;const ownerDistribution=businessCashFlow*ownership.yourOwnership;const personalNetCashFlow=ownerDistribution-personalDebtService.totalPersonalDebtService;return{...businessMetrics,...downPaymentCalculation,fundingAllocation,purchaseFinancing,businessDebtService,personalDebtService,ownership,wacc,personalCostOfCapital,businessCashFlow,ownerDistribution,personalNetCashFlow,personalROI:personalNetCashFlow/(fundingAllocation.allocation.personalCash+fundingAllocation.allocation.taiwaneseLoan+fundingAllocation.allocation.houseEquity)*100};});};// Calculate down payment needed using the same logic as Scenario Comparison\nexport const calculateDownPaymentNeeded=(scenario,variables)=>{const purchasePrice=scenario.purchasePrice;// Calculate SBA down payment\nconst sellerFinancingPercent=variables.sellerFinancing||20;const sellerFinancingAmount=purchasePrice*(sellerFinancingPercent/100);const sbaLoanAmount=purchasePrice-sellerFinancingAmount;const sbaDownPaymentPercent=variables.sbaDownPayment||12;const sbaDownPayment=sbaLoanAmount*(sbaDownPaymentPercent/100);// Calculate working capital and fees (same as Scenario Comparison)\nconst workingCapitalPercent=variables.workingCapital||7.9;const workingCapital=scenario.targetRevenue*(workingCapitalPercent/100);const fees=purchasePrice*0.025;// 2.5% total fees (due diligence + professional fees)\n// Down Payment Needed = SBA Down Payment + Working Capital + Fees\nconst downPaymentNeeded=sbaDownPayment+workingCapital+fees;return{sbaDownPayment,workingCapital,fees,downPaymentNeeded};};// NEW METRICS CALCULATIONS\n// Capital Utilization Rate\nexport const calculateCapitalUtilizationRate=(totalAllocated,availableCash)=>{return availableCash>0?totalAllocated/availableCash*100:0;};export const getCapitalUtilizationStatus=rate=>{if(rate>95)return{color:'#E74C3C',level:'critical',label:'Critical'};if(rate>85)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(rate>65)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// Leverage Multiplier\nexport const calculateLeverageMultiplier=(totalInvestment,personalCashInvested)=>{return personalCashInvested>0?totalInvestment/personalCashInvested:0;};export const getLeverageMultiplierStatus=multiplier=>{if(multiplier<3)return{color:'#E74C3C',level:'critical',label:'Critical'};if(multiplier<5)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(multiplier<8)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// Price-to-Revenue Ratio\nexport const calculatePriceToRevenueRatio=(purchasePrice,targetRevenue)=>{return targetRevenue>0?purchasePrice/targetRevenue:0;};export const getPriceToRevenueStatus=ratio=>{if(ratio>1.2)return{color:'#E74C3C',level:'critical',label:'Critical'};if(ratio>1.0)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(ratio>0.8)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// EBITDA Margin\nexport const calculateEBITDAMargin=(ebitda,revenue)=>{return revenue>0?ebitda/revenue*100:0;};export const getEBITDAMarginStatus=margin=>{if(margin<15)return{color:'#E74C3C',level:'critical',label:'Critical'};if(margin<18)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(margin<22)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// Business Cash Conversion\nexport const calculateBusinessCashConversion=(businessFreeCashFlow,businessEBITDA)=>{return businessEBITDA>0?businessFreeCashFlow/businessEBITDA*100:0;};export const getCashConversionStatus=conversion=>{if(conversion<15)return{color:'#E74C3C',level:'critical',label:'Critical'};if(conversion<20)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(conversion<30)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// Revenue-to-Investment Efficiency\nexport const calculateRevenueToInvestmentEfficiency=(targetRevenue,yourTotalInvestment)=>{return yourTotalInvestment>0?targetRevenue/yourTotalInvestment:0;};export const getRevenueEfficiencyStatus=efficiency=>{if(efficiency<3)return{color:'#E74C3C',level:'critical',label:'Critical'};if(efficiency<4)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(efficiency<6)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// Risk-Adjusted Return\nexport const calculateRiskAdjustedReturn=function(yourROI){let riskFreeRate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4.5;let riskScore=arguments.length>2?arguments[2]:undefined;return riskScore>0?(yourROI-riskFreeRate)/riskScore:0;};export const getRiskAdjustedStatus=ratio=>{if(ratio<0.5)return{color:'#E74C3C',level:'critical',label:'Critical'};if(ratio<1.0)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(ratio<1.5)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// Income Replacement Ratio\nexport const calculateIncomeReplacementRatio=(yourNetAnnualGain,currentSalary)=>{return currentSalary>0?yourNetAnnualGain/currentSalary*100:0;};export const getIncomeReplacementStatus=ratio=>{if(ratio<40)return{color:'#E74C3C',level:'critical',label:'Critical'};if(ratio<80)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(ratio<120)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// Wealth Building Velocity\nexport const calculateWealthBuildingVelocity=function(totalReturnMultiple){let investmentPeriod=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;const annualWealthCreation=Math.pow(totalReturnMultiple,1/investmentPeriod)-1;return annualWealthCreation*100;};export const getWealthVelocityStatus=velocity=>{if(velocity<20)return{color:'#E74C3C',level:'critical',label:'Critical'};if(velocity<40)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(velocity<80)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// 5-Year Exit Value Range\nexport const calculateExitValueRange=function(year5EBITDA,yourOwnership){let conservativeMultiple=arguments.length>2&&arguments[2]!==undefined?arguments[2]:3.0;let expectedMultiple=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3.59;let optimisticMultiple=arguments.length>4&&arguments[4]!==undefined?arguments[4]:4.5;return{conservative:year5EBITDA*conservativeMultiple*yourOwnership,expected:year5EBITDA*expectedMultiple*yourOwnership,optimistic:year5EBITDA*optimisticMultiple*yourOwnership};};// Stress Test Results\nexport const calculateStressTestResults=function(baseROI){let revenueStress=arguments.length>1&&arguments[1]!==undefined?arguments[1]:-20;let marginStress=arguments.length>2&&arguments[2]!==undefined?arguments[2]:-300;let rateStress=arguments.length>3&&arguments[3]!==undefined?arguments[3]:200;// Simplified stress test calculations\nconst revenueStressROI=baseROI*(1+revenueStress/100);const marginStressROI=baseROI*(1+marginStress/10000);// basis points\nconst rateStressROI=baseROI*(1-rateStress/10000);// basis points\nconst minROI=Math.min(revenueStressROI,marginStressROI,rateStressROI);return{revenueStressROI,marginStressROI,rateStressROI,minROI};};export const getStressTestStatus=minROI=>{if(minROI<5)return{color:'#E74C3C',level:'critical',label:'Critical'};if(minROI<7)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(minROI<10)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};// Growth Funding Capacity\nexport const calculateGrowthFundingCapacity=(maxSustainableDebt,currentTotalDebt,projectedYear3CashFlow,leverageMultiplier)=>{const currentDebtCapacity=maxSustainableDebt-currentTotalDebt;const cashFlowGrowthCapacity=projectedYear3CashFlow*leverageMultiplier;return Math.min(currentDebtCapacity,cashFlowGrowthCapacity);};export const getGrowthCapacityStatus=capacity=>{if(capacity<50000)return{color:'#E74C3C',level:'critical',label:'Critical'};if(capacity<100000)return{color:'#F1C40F',level:'below-target',label:'Below Target'};if(capacity<200000)return{color:'#27AE60',level:'good',label:'Good'};return{color:'#3498DB',level:'excellent',label:'Excellent'};};","map":{"version":3,"names":["calculateSBAPayment","principal","rate","arguments","length","undefined","years","monthlyRate","payments","Math","pow","calculateSellerPayment","calculateExpectedValue","scenarios","probabilities","bestCase","mostLikely","worstCase","normalizeProbabilities","best","likely","worst","total","factor","round","validateSBADownPayment","value","max","validateDebtCoverage","ebitda","debtService","generateBellCurve","mean","min","stdDev","points","x","y","exp","push","calculateTotalCashRequired","params","purchasePrice","sbaDownPaymentPercent","workingCapitalPercent","targetRevenue","techInvestment","sellerFinancingPercent","dueDiligencePercent","professionalFeesPercent","contingencyPercent","sellerFinancingAmount","sbaLoanAmount","sbaDownPayment","workingCapital","dueDiligence","professionalFees","contingency","downPayment","calculateAnnualCashToPocket","netProfitMarginPercent","managementSalary","sbaPayment","sellerPayment","techInvestmentAmortized","netCashFlow","calculateDSCR","annualEBITDA","totalAnnualDebtService","calculateCashOnCashReturn","annualCashToPocket","totalCashInvested","calculateIRR","initialInvestment","cashFlows","tolerance","maxIterations","guess","i","npv","derivative","j","discountFactor","newGuess","abs","calculateMOIC","fiveYearProjections","totalCashReturned","reduce","sum","year","cashFlow","businessValueAtExit","calculatePaybackPeriod","cumulativeCashFlow","calculateEnhancedRiskScore","dscr","cashOnCash","score","calculateFinancingStructure","sellerFinancing","calculateFiveYearProjections","revenueGrowthRatePercent","sbaInterestRate","sellerInterestRate","projections","currentRevenue","revenue","calculateBusinessTargetingMetrics","availableCash","maxSafePurchasePrice","minRequiredEBITDA","targetRevenueRange","recommendedMultipleRange","calculateRiskScore","riskScore","totalDebtService","debtCoverageRatio","workingCapitalRatio","calculateBusinessWACC","sbaLoan","totalBusinessDebt","amount","businessEquity","totalBusinessCapital","debtWeight","equityWeight","sbaAfterTaxCost","sellerAfterTaxCost","afterTaxDebtCost","equityCost","calculateBusinessEVA","businessEBITDA","businessCapitalInvested","businessWACC","taxRate","nopat","capitalCharge","calculateBusinessCashFlow","scenario","loanStructure","businessDebtService","annualPayment","businessFreeCashFlow","techInvestmentAnnual","businessDSCR","businessRevenue","businessROA","calculatePersonalCashFlow","businessCashFlow","personalLoans","ownershipData","fundingSources","ownerDistribution","yourOwnership","personalDebtService","houseEquity","taiwaneseLoan","personalNetCashFlow","personalCashInvested","personalCash","enabled","personalROI","calculatePersonalProjections","businessProjections","map","index","businessFCF","yourFCF","DSCR","cumulative","calculateRiskAdjustedOwnership","managementValue","personalCashRisk","taiwaneseLoanRisk","homeEquityRisk","sweatEquityValue","personalRiskAdjusted","investorContribution","additionalInvestment","totalRiskAdjustedEquity","baseOwnership","controlPremium","finalOwnership","investorOwnership","breakdown","calculateOwnershipCashFlows","totalBusinessCashFlow","investorAmount","personalCashAmount","investorPreferredReturn","yourPreferredReturn","totalPreferredReturns","remainingCashFlow","yourRemainingShare","investorRemainingShare","yourTotalCashFlow","investorTotalCashFlow","yourCashInvested","yourROI","investorROI","preferredReturns","yours","investor","remainingCashFlowSplit","validateOwnership","businessMetrics","warnings","expectedInvestorReturn","totalCashFlow","verifyCalculations","testScenario","netProfitMargin","valuationMultiple","businessEVA","expectedRanges","ownership","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPercentage","toFixed","calculateTotalCashNeeded","variables","totalCashNeeded","console","log","allocateFundingByPriority","downPaymentNeeded","allocation","remainingDownPayment","used","downPaymentGap","totalAllocated","calculatePurchasePriceFinancing","fundingAllocation","amountNeedingBankFinancing","sbaLoanPrincipal","totalDownPaymentCovered","calculateBusinessDebtService","purchaseFinancing","sbaAnnualPayment","sellerAnnualPayment","totalBusinessDebtService","calculatePersonalDebtService","houseEquityPayment","taiwanesePayment","totalPersonalDebtService","calculatePriorityBasedWACC","totalFunding","weightedCost","afterTaxCostRates","Object","entries","forEach","_ref","source","calculatePriorityBasedOwnership","houseEquityRisk","totalPersonalRisk","totalEquity","calculatePersonalCostOfCapital","totalPersonalFunding","weightedPersonalCost","personalCostRates","personalSources","calculateScenariosWithPriority","targetRevenues","netMargin","downPaymentCalculation","calculateDownPaymentNeeded","wacc","personalCostOfCapital","fees","calculateCapitalUtilizationRate","getCapitalUtilizationStatus","color","level","label","calculateLeverageMultiplier","totalInvestment","getLeverageMultiplierStatus","multiplier","calculatePriceToRevenueRatio","getPriceToRevenueStatus","ratio","calculateEBITDAMargin","getEBITDAMarginStatus","margin","calculateBusinessCashConversion","getCashConversionStatus","conversion","calculateRevenueToInvestmentEfficiency","yourTotalInvestment","getRevenueEfficiencyStatus","efficiency","calculateRiskAdjustedReturn","riskFreeRate","getRiskAdjustedStatus","calculateIncomeReplacementRatio","yourNetAnnualGain","currentSalary","getIncomeReplacementStatus","calculateWealthBuildingVelocity","totalReturnMultiple","investmentPeriod","annualWealthCreation","getWealthVelocityStatus","velocity","calculateExitValueRange","year5EBITDA","conservativeMultiple","expectedMultiple","optimisticMultiple","conservative","expected","optimistic","calculateStressTestResults","baseROI","revenueStress","marginStress","rateStress","revenueStressROI","marginStressROI","rateStressROI","minROI","getStressTestStatus","calculateGrowthFundingCapacity","maxSustainableDebt","currentTotalDebt","projectedYear3CashFlow","leverageMultiplier","currentDebtCapacity","cashFlowGrowthCapacity","getGrowthCapacityStatus","capacity"],"sources":["/Users/juihanlin/Desktop/Biz Acquisition Calculator/src/utils/calculations.js"],"sourcesContent":["// SBA loan payment calculation\nexport const calculateSBAPayment = (principal, rate = 0.115, years = 10) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return (principal * monthlyRate * Math.pow(1 + monthlyRate, payments)) / \n         (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Seller note payment calculation  \nexport const calculateSellerPayment = (principal, rate = 0.08, years = 5) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return (principal * monthlyRate * Math.pow(1 + monthlyRate, payments)) / \n         (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Expected value calculation\nexport const calculateExpectedValue = (scenarios, probabilities) => {\n  return (scenarios.bestCase * probabilities.bestCase / 100) +\n         (scenarios.mostLikely * probabilities.mostLikely / 100) +\n         (scenarios.worstCase * probabilities.worstCase / 100);\n};\n\n// Auto-normalize probabilities\nexport const normalizeProbabilities = (best, likely, worst) => {\n  const total = best + likely + worst;\n  if (total !== 100) {\n    const factor = 100 / total;\n    return {\n      best: Math.round(best * factor),\n      likely: Math.round(likely * factor),\n      worst: Math.round(worst * factor)\n    };\n  }\n  return { best, likely, worst };\n};\n\n// SBA minimum constraint\nexport const validateSBADownPayment = (value) => Math.max(value, 10);\n\n// Debt service coverage validation\nexport const validateDebtCoverage = (ebitda, debtService) => debtService / ebitda <= 0.8;\n\n// Generate bell curve data\nexport const generateBellCurve = (mean, min, max) => {\n  const stdDev = (max - min) / 6;\n  const points = [];\n  for (let x = min; x <= max; x += (max - min) / 100) {\n    const y = Math.exp(-0.5 * Math.pow((x - mean) / stdDev, 2));\n    points.push({ x, y });\n  }\n  return points;\n};\n\n// Calculate total cash required\nexport const calculateTotalCashRequired = (params) => {\n  const {\n    purchasePrice,\n    sbaDownPaymentPercent,\n    workingCapitalPercent,\n    targetRevenue,\n    techInvestment,\n    sellerFinancingPercent = 20, // Default seller financing percentage\n    dueDiligencePercent = 1.5,\n    professionalFeesPercent = 0.8,\n    contingencyPercent = 2.5\n  } = params;\n\n  // Calculate financing structure correctly\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  // Note: Total financing may exceed purchase price if both SBA and seller financing are used\n  // This is typical in SBA deals where seller financing is additional to SBA loan\n  \n  const workingCapital = targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * (dueDiligencePercent / 100);\n  const professionalFees = purchasePrice * (professionalFeesPercent / 100);\n  const contingency = purchasePrice * (contingencyPercent / 100);\n\n  return {\n    downPayment: sbaDownPayment,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    techInvestment,\n    contingency,\n    total: sbaDownPayment + workingCapital + dueDiligence + professionalFees + techInvestment + contingency\n  };\n};\n\n// Calculate annual cash to pocket\nexport const calculateAnnualCashToPocket = (params) => {\n  const {\n    targetRevenue,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment\n  } = params;\n\n  const ebitda = targetRevenue * (netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(sellerFinancingAmount);\n  const techInvestmentAmortized = techInvestment / 3; // Amortized over 3 years\n\n  return {\n    ebitda,\n    sbaPayment,\n    sellerPayment,\n    managementSalary,\n    techInvestmentAmortized,\n    netCashFlow: ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized\n  };\n};\n\n// Calculate Debt Service Coverage Ratio (DSCR)\nexport const calculateDSCR = (annualEBITDA, totalAnnualDebtService) => {\n  return annualEBITDA / totalAnnualDebtService;\n};\n\n// Calculate Cash-on-Cash Return\nexport const calculateCashOnCashReturn = (annualCashToPocket, totalCashInvested) => {\n  return (annualCashToPocket / totalCashInvested) * 100;\n};\n\n// Calculate IRR using Newton-Raphson method\nexport const calculateIRR = (initialInvestment, cashFlows) => {\n  const tolerance = 0.0001;\n  const maxIterations = 100;\n  let guess = 0.1; // Start with 10%\n\n  for (let i = 0; i < maxIterations; i++) {\n    let npv = -initialInvestment;\n    let derivative = 0;\n\n    for (let j = 0; j < cashFlows.length; j++) {\n      const discountFactor = Math.pow(1 + guess, j + 1);\n      npv += cashFlows[j] / discountFactor;\n      derivative -= (j + 1) * cashFlows[j] / (discountFactor * (1 + guess));\n    }\n\n    const newGuess = guess - npv / derivative;\n    \n    if (Math.abs(newGuess - guess) < tolerance) {\n      return newGuess * 100; // Return as percentage\n    }\n    \n    guess = newGuess;\n  }\n  \n  return null; // No convergence\n};\n\n// Calculate Multiple on Invested Capital (MOIC)\nexport const calculateMOIC = (totalCashInvested, fiveYearProjections) => {\n  const totalCashReturned = fiveYearProjections.reduce((sum, year) => sum + year.cashFlow, 0);\n  const businessValueAtExit = fiveYearProjections[4].ebitda * 4.2; // Assume same multiple\n  return (totalCashReturned + businessValueAtExit) / totalCashInvested;\n};\n\n// Calculate Payback Period\nexport const calculatePaybackPeriod = (totalCashInvested, fiveYearProjections) => {\n  let cumulativeCashFlow = 0;\n  for (let i = 0; i < fiveYearProjections.length; i++) {\n    cumulativeCashFlow += fiveYearProjections[i].cashFlow;\n    if (cumulativeCashFlow >= totalCashInvested) {\n      return i + 1 + ((totalCashInvested - (cumulativeCashFlow - fiveYearProjections[i].cashFlow)) / fiveYearProjections[i].cashFlow);\n    }\n  }\n  return '>5 years';\n};\n\n// Enhanced Risk Score Calculation\nexport const calculateEnhancedRiskScore = (dscr, cashOnCash, sellerFinancingPercent) => {\n  let score = 5; // Base score\n  \n  // DSCR scoring\n  if (dscr >= 1.5) score += 2;\n  else if (dscr >= 1.25) score += 1;\n  else score -= 2;\n  \n  // Cash-on-Cash scoring\n  if (cashOnCash >= 20) score += 2;\n  else if (cashOnCash >= 15) score += 1;\n  else if (cashOnCash < 10) score -= 1;\n  \n  // Seller financing scoring\n  if (sellerFinancingPercent >= 20) score += 1; // Seller has skin in game\n  \n  return Math.max(1, Math.min(10, score));\n};\n\n// Calculate financing structure\nexport const calculateFinancingStructure = (params) => {\n  const {\n    purchasePrice,\n    sellerFinancingPercent,\n    sbaDownPaymentPercent\n  } = params;\n\n  const sellerFinancing = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancing;\n  const downPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n\n  return {\n    purchasePrice,\n    sellerFinancing,\n    sbaLoanAmount,\n    downPayment\n  };\n};\n\n// Calculate 5-year projections for advanced metrics\nexport const calculateFiveYearProjections = (params) => {\n  const {\n    targetRevenue,\n    revenueGrowthRatePercent,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment,\n    sbaInterestRate = 11.5,\n    sellerInterestRate = 8\n  } = params;\n\n  const projections = [];\n  let currentRevenue = targetRevenue;\n\n  for (let year = 1; year <= 5; year++) {\n    const ebitda = currentRevenue * (netProfitMarginPercent / 100);\n    const sbaPayment = calculateSBAPayment(sbaLoanAmount, sbaInterestRate / 100, 10);\n    const sellerPayment = calculateSellerPayment(sellerFinancingAmount, sellerInterestRate / 100, 5);\n    const techInvestmentAmortized = year <= 3 ? techInvestment / 3 : 0;\n\n    const netCashFlow = ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized;\n\n    projections.push({\n      year,\n      revenue: currentRevenue,\n      ebitda,\n      cashFlow: netCashFlow\n    });\n\n    currentRevenue *= (1 + revenueGrowthRatePercent / 100);\n  }\n\n  return projections;\n};\n\n// Calculate business targeting metrics\nexport const calculateBusinessTargetingMetrics = (availableCash, targetRevenue) => {\n  return {\n    maxSafePurchasePrice: availableCash * 4, // Assuming 25% total cash requirement\n    minRequiredEBITDA: (availableCash * 4 * 0.12) / 1.25, // 12% debt service / 1.25x coverage\n    targetRevenueRange: {\n      min: targetRevenue * 0.8,\n      max: targetRevenue * 1.2\n    },\n    recommendedMultipleRange: {\n      min: 3.5,\n      max: 5.0\n    }\n  };\n};\n\n// Calculate risk score (1-10)\nexport const calculateRiskScore = (params) => {\n  let riskScore = 5; // Base score\n\n  // Debt service coverage ratio\n  const ebitda = params.targetRevenue * (params.netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(params.sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(params.sellerFinancingAmount);\n  const totalDebtService = sbaPayment + sellerPayment;\n  const debtCoverageRatio = ebitda / totalDebtService;\n\n  if (debtCoverageRatio < 1.25) riskScore += 3;\n  else if (debtCoverageRatio < 1.5) riskScore += 1;\n  else if (debtCoverageRatio > 2.0) riskScore -= 1;\n\n  // Working capital ratio\n  const workingCapitalRatio = (params.workingCapitalPercent / 100) / (params.netProfitMarginPercent / 100);\n  if (workingCapitalRatio > 0.8) riskScore += 2;\n  else if (workingCapitalRatio < 0.3) riskScore -= 1;\n\n  // SBA down payment\n  if (params.sbaDownPaymentPercent < 12) riskScore += 1;\n  else if (params.sbaDownPaymentPercent > 15) riskScore -= 1;\n\n  return Math.max(1, Math.min(10, riskScore));\n};\n\n// Calculate business-only WACC (excluding personal loans)\nexport const calculateBusinessWACC = (sbaLoan, sellerFinancing, purchasePrice) => {\n  const totalBusinessDebt = sbaLoan.amount + sellerFinancing.amount;\n  const businessEquity = purchasePrice - totalBusinessDebt;\n  const totalBusinessCapital = purchasePrice;\n  \n  if (totalBusinessCapital <= 0) return 0;\n  \n  const debtWeight = totalBusinessDebt / totalBusinessCapital;\n  const equityWeight = businessEquity / totalBusinessCapital;\n  \n  // Different tax treatment for different debt types\n  const sbaAfterTaxCost = 0.115 * 0.75; // 25% tax benefit for business-deductible SBA\n  const sellerAfterTaxCost = 0.08 * 0.9; // 10% tax benefit for seller financing (less deductible)\n  const afterTaxDebtCost = totalBusinessDebt > 0 ? \n    ((sbaLoan.amount * sbaAfterTaxCost + sellerFinancing.amount * sellerAfterTaxCost) / totalBusinessDebt) : 0;\n  const equityCost = 0.15; // Business equity cost\n  \n  return (debtWeight * afterTaxDebtCost) + (equityWeight * equityCost);\n};\n\n// Calculate business-level EVA (excluding personal loans)\nexport const calculateBusinessEVA = (businessEBITDA, businessCapitalInvested, businessWACC) => {\n  const taxRate = 0.25;\n  const nopat = businessEBITDA * (1 - taxRate); // Net Operating Profit After Tax\n  const capitalCharge = businessCapitalInvested * businessWACC;\n  return nopat - capitalCharge;\n};\n\n// Calculate business cash flow (company level only)\nexport const calculateBusinessCashFlow = (scenario, loanStructure, businessCapitalInvested) => {\n  const businessDebtService = \n    loanStructure.sbaLoan.annualPayment + \n    loanStructure.sellerFinancing.annualPayment;\n  \n  const businessFreeCashFlow = \n    scenario.ebitda - \n    businessDebtService - \n    scenario.managementSalary - \n    scenario.techInvestmentAnnual;\n  \n  const businessDSCR = businessDebtService > 0 ? scenario.ebitda / businessDebtService : 0;\n  \n  return {\n    businessRevenue: scenario.targetRevenue,\n    businessEBITDA: scenario.ebitda,\n    businessDebtService: businessDebtService,\n    businessFreeCashFlow: businessFreeCashFlow,\n    businessDSCR: businessDSCR,\n    businessROA: businessCapitalInvested > 0 ? (businessFreeCashFlow / businessCapitalInvested) * 100 : 0\n  };\n};\n\n// Calculate personal cash flow (owner level only)\nexport const calculatePersonalCashFlow = (businessCashFlow, personalLoans, ownershipData, fundingSources) => {\n  const ownerDistribution = businessCashFlow.businessFreeCashFlow * ownershipData.yourOwnership;\n  \n  const personalDebtService = \n    personalLoans.houseEquity.annualPayment + \n    personalLoans.taiwaneseLoan.annualPayment;\n  \n  const personalNetCashFlow = ownerDistribution - personalDebtService;\n  \n  const personalCashInvested = \n    (fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0) + \n    (fundingSources.houseEquity.enabled ? fundingSources.houseEquity.amount : 0) + \n    (fundingSources.taiwaneseLoan.enabled ? fundingSources.taiwaneseLoan.amount : 0);\n  \n  const personalROI = personalCashInvested > 0 ? \n    (personalNetCashFlow / personalCashInvested) * 100 : 0;\n  \n  return {\n    ownerDistribution: ownerDistribution,\n    personalDebtService: personalDebtService,\n    personalNetCashFlow: personalNetCashFlow,\n    personalCashInvested: personalCashInvested,\n    personalROI: personalROI\n  };\n};\n\n// Calculate personal projections\nexport const calculatePersonalProjections = (businessProjections, personalLoans, ownershipData) => {\n  return businessProjections.map((year, index) => {\n    const businessFCF = year.businessFreeCashFlow;\n    const ownerDistribution = businessFCF * ownershipData.yourOwnership;\n    const personalDebtService = personalLoans.total;\n    const yourFCF = ownerDistribution - personalDebtService;\n    \n    return {\n      year: index + 1,\n      businessFCF: businessFCF,\n      ownerDistribution: ownerDistribution,\n      yourFCF: yourFCF,\n      DSCR: year.businessDSCR,\n      cumulative: index === 0 ? yourFCF : (index > 0 ? businessProjections[index - 1].cumulative : 0) + yourFCF\n    };\n  });\n};\n\n// Calculate risk-adjusted ownership with fair methodology\nexport const calculateRiskAdjustedOwnership = (fundingSources, managementValue = 150000) => {\n  // Calculate risk-weighted contributions\n  const personalCashRisk = fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0;\n  \n  // Taiwanese loan: Personal guarantee = 80% risk weight\n  const taiwaneseLoanRisk = fundingSources.taiwaneseLoan.enabled ? \n    fundingSources.taiwaneseLoan.amount * 0.8 : 0;\n    \n  // Home equity: Personal asset at risk = 120% risk weight (higher risk premium)\n  const homeEquityRisk = fundingSources.houseEquity.enabled ? \n    fundingSources.houseEquity.amount * 1.2 : 0;\n    \n  // SBA loan: Personal guarantee but asset-backed = 30% risk weight\n  // const sbaRisk = 0; // SBA loan is debt, not equity contribution\n  \n  // Management/operational value (sweat equity)\n  const sweatEquityValue = managementValue;\n  \n  // Total personal risk-adjusted contribution\n  const personalRiskAdjusted = personalCashRisk + taiwaneseLoanRisk + homeEquityRisk + sweatEquityValue;\n  \n  // Outside investor contribution (100% risk weight)\n  const investorContribution = fundingSources.additionalInvestment.enabled ? \n    fundingSources.additionalInvestment.amount : 0;\n  \n  // Total risk-adjusted equity\n  const totalRiskAdjustedEquity = personalRiskAdjusted + investorContribution;\n  \n  // Base ownership calculation\n  const baseOwnership = totalRiskAdjustedEquity > 0 ? \n    personalRiskAdjusted / totalRiskAdjustedEquity : 1;\n  \n  // Dynamic control premium based on investor amount\n  const controlPremium = investorContribution > 0 ? \n    Math.min(0.05, investorContribution / 1000000) : 0; // Max 5%, scales with investment size\n  \n  // Final ownership (capped at 95% to be fair to investors)\n  const finalOwnership = Math.min(0.95, baseOwnership + controlPremium);\n  \n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      homeEquityRisk,\n      sweatEquityValue,\n      investorContribution,\n      controlPremium: controlPremium * 100\n    }\n  };\n};\n\n// Calculate ownership cash flows with preferred return structure\nexport const calculateOwnershipCashFlows = (totalBusinessCashFlow, ownershipData, fundingSources) => {\n  const investorAmount = fundingSources.additionalInvestment.enabled ? \n    fundingSources.additionalInvestment.amount : 0;\n  const personalCashAmount = fundingSources.personalCash.enabled ? \n    fundingSources.personalCash.amount : 0;\n  \n  // Investor preferred return (8% on their investment)\n  const investorPreferredReturn = investorAmount * 0.08;\n  \n  // Your preferred return (6% on personal cash)\n  const yourPreferredReturn = personalCashAmount * 0.06;\n  \n  // Total preferred returns\n  const totalPreferredReturns = investorPreferredReturn + yourPreferredReturn;\n  \n  // Remaining cash flow after preferred returns\n  const remainingCashFlow = Math.max(0, totalBusinessCashFlow - totalPreferredReturns);\n  \n  // Split remaining cash flow based on ownership percentages\n  const yourRemainingShare = remainingCashFlow * ownershipData.yourOwnership;\n  const investorRemainingShare = remainingCashFlow * ownershipData.investorOwnership;\n  \n  // Total distributions\n  const yourTotalCashFlow = yourPreferredReturn + yourRemainingShare;\n  const investorTotalCashFlow = investorPreferredReturn + investorRemainingShare;\n  \n  // Calculate ROI on actual cash invested (not risk-adjusted amounts)\n  const yourCashInvested = personalCashAmount;\n  const yourROI = yourCashInvested > 0 ? (yourTotalCashFlow / yourCashInvested) * 100 : 0;\n  \n  const investorROI = investorAmount > 0 ? (investorTotalCashFlow / investorAmount) * 100 : 0;\n  \n  return {\n    yourTotalCashFlow,\n    investorTotalCashFlow,\n    yourROI,\n    investorROI,\n    preferredReturns: {\n      yours: yourPreferredReturn,\n      investor: investorPreferredReturn\n    },\n    remainingCashFlowSplit: {\n      yours: yourRemainingShare,\n      investor: investorRemainingShare\n    }\n  };\n};\n\n// Validate ownership for reasonableness\nexport const validateOwnership = (ownershipData, fundingSources, businessMetrics) => {\n  const warnings = [];\n  \n  // Check if investor is getting fair deal\n  if (ownershipData.investorOwnership < 0.05 && fundingSources.additionalInvestment.amount > 50000) {\n    warnings.push(\"⚠️ Investor ownership very low - may not be attractive\");\n  }\n  \n  // Check if you're giving up too much\n  if (ownershipData.yourOwnership < 0.6 && fundingSources.personalCash.amount > fundingSources.additionalInvestment.amount) {\n    warnings.push(\"⚠️ Your ownership low despite majority funding\");\n  }\n  \n  // Check for reasonable investor return (simplified calculation)\n  const investorAmount = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n  const expectedInvestorReturn = investorAmount > 0 ? (businessMetrics.totalCashFlow * ownershipData.investorOwnership / investorAmount) * 100 : 0;\n  if (expectedInvestorReturn < 15 && investorAmount > 0) {\n    warnings.push(\"⚠️ Investor expected return below market (15%+)\");\n  }\n  \n  return warnings;\n};\n\n// Verification function to test calculations with known values\nexport const verifyCalculations = (testScenario) => {\n  const {\n    targetRevenue = 2500000,\n    netProfitMargin = 25,\n    valuationMultiple = 4,\n    sbaLoanAmount = 1500000,\n    sellerFinancingAmount = 500000,\n    personalCash = 550000,\n    additionalInvestment = 100000\n  } = testScenario;\n\n  // Test business calculations\n  const ebitda = targetRevenue * (netProfitMargin / 100);\n  const purchasePrice = ebitda * valuationMultiple;\n  const businessCapitalInvested = purchasePrice + (targetRevenue * 0.1) + (purchasePrice * 0.015) + (purchasePrice * 0.008);\n  \n  // Test WACC\n  const businessWACC = calculateBusinessWACC(\n    { amount: sbaLoanAmount, rate: 0.115 },\n    { amount: sellerFinancingAmount, rate: 0.08 },\n    purchasePrice\n  );\n  \n  // Test EVA\n  const businessEVA = calculateBusinessEVA(ebitda, businessCapitalInvested, businessWACC);\n  \n  // Test ownership\n  const fundingSources = {\n    personalCash: { enabled: true, amount: personalCash },\n    taiwaneseLoan: { enabled: true, amount: 725000 },\n    houseEquity: { enabled: false, amount: 200000 },\n    additionalInvestment: { enabled: true, amount: additionalInvestment }\n  };\n  \n  const ownershipData = calculateRiskAdjustedOwnership(fundingSources);\n  \n  return {\n    testScenario: {\n      targetRevenue,\n      ebitda,\n      purchasePrice,\n      businessCapitalInvested,\n      businessWACC: businessWACC * 100,\n      businessEVA,\n      ownershipData\n    },\n    expectedRanges: {\n      businessWACC: { min: 7, max: 12 },\n      businessEVA: { min: 0, max: 200000 },\n      ownership: { min: 0.6, max: 0.95 }\n    }\n  };\n};\n\n// Format currency\nexport const formatCurrency = (amount) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\n// Format percentage\nexport const formatPercentage = (value) => {\n  return `${value.toFixed(1)}%`;\n}; \n\n// FUNDING PRIORITY ALLOCATION FUNCTIONS\n// Calculate total cash needed for acquisition\nexport const calculateTotalCashNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n  const workingCapitalPercent = variables.workingCapital || 14.6;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * 0.015;\n  const professionalFees = purchasePrice * 0.008;\n  const contingency = purchasePrice * 0.025;\n  const techInvestment = variables.techInvestment || 100000;\n  \n  // Calculate SBA down payment correctly\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  const totalCashNeeded = sbaDownPayment + workingCapital + dueDiligence + professionalFees + contingency + techInvestment;\n  \n  // Debug logging\n  console.log('DEBUG - calculateTotalCashNeeded:', {\n    purchasePrice,\n    sellerFinancingPercent,\n    sellerFinancingAmount,\n    sbaLoanAmount,\n    sbaDownPaymentPercent,\n    sbaDownPayment,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    contingency,\n    techInvestment,\n    totalCashNeeded\n  });\n  \n  return {\n    purchasePrice,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    contingency,\n    techInvestment,\n    sbaDownPayment,\n    totalCashNeeded\n  };\n};\n\n// Allocate funding by priority order (lowest to highest cost) - FOCUSED ON DOWN PAYMENT\nexport const allocateFundingByPriority = (downPaymentNeeded, fundingSources) => {\n  const allocation = {\n    taiwaneseLoan: 0,\n    personalCash: 0,\n    additionalInvestment: 0,\n    sellerFinancing: 0,\n    houseEquity: 0,\n    sbaLoan: 0\n  };\n  \n  let remainingDownPayment = downPaymentNeeded;\n  \n  // Priority 1: Taiwanese Loan (cheapest - 2.8%) - $300,000 available\n  if (fundingSources.taiwaneseLoan.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.taiwaneseLoan.amount);\n    allocation.taiwaneseLoan = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 2: Personal Cash (8% opportunity cost) - $50,000 available\n  if (fundingSources.personalCash.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.personalCash.amount);\n    allocation.personalCash = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 3: Additional Investment (15% expected return) - $50,000 available\n  if (fundingSources.additionalInvestment.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.additionalInvestment.amount);\n    allocation.additionalInvestment = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 4: Seller Financing (8%) - $0 available (disabled)\n  if (fundingSources.sellerFinancing.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.sellerFinancing.amount);\n    allocation.sellerFinancing = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 5: Home Equity Loan (8% but personal asset at risk) - $98,273 available\n  if (fundingSources.houseEquity.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.houseEquity.amount);\n    allocation.houseEquity = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 6: SBA Loan (11.5% - highest cost, use as last resort) - $0 available (disabled)\n  if (remainingDownPayment > 0) {\n    allocation.sbaLoan = remainingDownPayment; // Whatever is left\n  }\n  \n  return {\n    allocation,\n    downPaymentGap: remainingDownPayment < 0 ? 0 : remainingDownPayment,\n    totalAllocated: downPaymentNeeded - Math.max(0, remainingDownPayment),\n    downPaymentNeeded: downPaymentNeeded,\n    remainingDownPayment: Math.max(0, remainingDownPayment)\n  };\n};\n\n// Determine purchase price financing structure\nexport const calculatePurchasePriceFinancing = (purchasePrice, fundingAllocation, variables) => {\n  // Seller financing reduces the amount that needs bank financing\n  const sellerFinancingAmount = fundingAllocation.allocation.sellerFinancing || 0;\n  const amountNeedingBankFinancing = purchasePrice - sellerFinancingAmount;\n  \n  // SBA loan covers remaining purchase price\n  const sbaLoanAmount = Math.max(0, amountNeedingBankFinancing);\n  const sbaDownPaymentPercent = Math.max(variables.sbaDownPayment || 10, 10);\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  const sbaLoanPrincipal = sbaLoanAmount - sbaDownPayment;\n  \n  return {\n    sellerFinancingAmount,\n    sbaLoanAmount,\n    sbaDownPayment,\n    sbaLoanPrincipal,\n    totalDownPaymentCovered: sbaDownPayment // This comes from cash allocation\n  };\n};\n\n// Calculate business debt service with priority allocation\nexport const calculateBusinessDebtService = (purchaseFinancing) => {\n  // Only SBA loan and seller financing create debt service for the business\n  const sbaAnnualPayment = calculateSBAPayment(\n    purchaseFinancing.sbaLoanPrincipal, \n    0.115, \n    10\n  );\n  \n  const sellerAnnualPayment = calculateSellerPayment(\n    purchaseFinancing.sellerFinancingAmount, \n    0.08, \n    5\n  );\n  \n  return {\n    sbaAnnualPayment,\n    sellerAnnualPayment,\n    totalBusinessDebtService: sbaAnnualPayment + sellerAnnualPayment\n  };\n};\n\n// Calculate personal debt service with priority allocation\nexport const calculatePersonalDebtService = (fundingAllocation) => {\n  // Only personal loans create personal debt service\n  const houseEquityPayment = fundingAllocation.allocation.houseEquity > 0 ? \n    calculateSBAPayment(fundingAllocation.allocation.houseEquity, 0.08, 15) : 0;\n    \n  const taiwanesePayment = fundingAllocation.allocation.taiwaneseLoan > 0 ? \n    calculateSBAPayment(fundingAllocation.allocation.taiwaneseLoan, 0.028, 10) : 0;\n  \n  return {\n    houseEquityPayment,\n    taiwanesePayment,\n    totalPersonalDebtService: houseEquityPayment + taiwanesePayment\n  };\n};\n\n// Calculate WACC with priority-based allocation - ALL FUNDING SOURCES\nexport const calculatePriorityBasedWACC = (fundingAllocation, purchasePrice) => {\n  // WACC should include ALL funding sources used for the business acquisition\n  // Each source has its own after-tax cost of capital\n  \n  let totalFunding = 0;\n  let weightedCost = 0;\n  \n  // After-tax cost rates for each funding source\n  const afterTaxCostRates = {\n    taiwaneseLoan: 0.028 * 0.75, // 2.8% × 0.75 = 2.1% after-tax (if business deductible)\n    personalCash: 0.08 * 0.75, // 8% × 0.75 = 6% after-tax (opportunity cost with tax benefit)\n    additionalInvestment: 0.15, // 15% equity cost (no tax benefit)\n    sellerFinancing: 0.08 * 0.75, // 8% × 0.75 = 6% after-tax\n    houseEquity: 0.08, // 8% (personal debt, no business tax benefit)\n    sbaLoan: 0.115 * 0.75 // 11.5% × 0.75 = 8.6% after-tax\n  };\n  \n  // Calculate weighted average cost of capital across all funding sources\n  Object.entries(fundingAllocation.allocation).forEach(([source, amount]) => {\n    if (amount > 0) {\n      totalFunding += amount;\n      weightedCost += amount * afterTaxCostRates[source];\n    }\n  });\n  \n  return totalFunding > 0 ? (weightedCost / totalFunding) * 100 : 0;\n};\n\n// Calculate ownership with priority-based allocation\nexport const calculatePriorityBasedOwnership = (fundingAllocation) => {\n  // Risk-adjusted personal contributions based on ACTUAL allocated amounts\n  const personalCashRisk = fundingAllocation.allocation.personalCash * 1.0;\n  const taiwaneseLoanRisk = fundingAllocation.allocation.taiwaneseLoan * 0.8; // Personal guarantee\n  const houseEquityRisk = fundingAllocation.allocation.houseEquity * 1.2; // Personal asset risk\n  \n  const totalPersonalRisk = personalCashRisk + taiwaneseLoanRisk + houseEquityRisk;\n  const investorContribution = fundingAllocation.allocation.additionalInvestment;\n  const totalEquity = totalPersonalRisk + investorContribution;\n  \n  const finalOwnership = totalEquity > 0 ? totalPersonalRisk / totalEquity : 1; // Removed control premium\n  \n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      houseEquityRisk,\n      investorContribution\n    }\n  };\n};\n\n// Calculate personal cost of capital (for personal funding sources)\nexport const calculatePersonalCostOfCapital = (fundingAllocation) => {\n  let totalPersonalFunding = 0;\n  let weightedPersonalCost = 0;\n  \n  // Only consider personal funding sources: Taiwanese Loan, Personal Cash, Home Equity\n  const personalCostRates = {\n    taiwaneseLoan: 0.028, // 2.8% - personal loan rate\n    personalCash: 0.08, // 8% opportunity cost\n    houseEquity: 0.08, // 8% home equity rate\n    // Excluded: additionalInvestment, sellerFinancing, sbaLoan (not personal funding)\n  };\n  \n  // Only calculate for personal funding sources\n  const personalSources = ['taiwaneseLoan', 'personalCash', 'houseEquity'];\n  \n  console.log('DEBUG - Personal Cost Calculation:', {\n    fundingAllocation: fundingAllocation.allocation,\n    personalSources\n  });\n  \n  personalSources.forEach(source => {\n    const amount = fundingAllocation.allocation[source] || 0;\n    console.log(`DEBUG - ${source}:`, { amount, rate: personalCostRates[source] });\n    if (amount > 0) {\n      totalPersonalFunding += amount;\n      weightedPersonalCost += amount * personalCostRates[source];\n    }\n  });\n  \n  return totalPersonalFunding > 0 ? (weightedPersonalCost / totalPersonalFunding) * 100 : 0;\n};\n\n// Main scenario calculation with priority-based funding\nexport const calculateScenariosWithPriority = (targetRevenues, variables, fundingSources) => {\n  return targetRevenues.map(revenue => {\n    // Step 1: Calculate business metrics\n    const netMargin = variables.netProfitMargin || 25;\n    const valuationMultiple = variables.valuationMultiple || 4;\n    const ebitda = revenue * (netMargin / 100);\n    const purchasePrice = ebitda * valuationMultiple;\n    \n    const businessMetrics = {\n      targetRevenue: revenue,\n      ebitda: ebitda,\n      purchasePrice: purchasePrice\n    };\n    \n    // Step 2: Calculate down payment needed (same logic as Scenario Comparison)\n    const downPaymentCalculation = calculateDownPaymentNeeded(businessMetrics, variables);\n    \n    // Step 3: Allocate funding by priority based on down payment needed\n    const fundingAllocation = allocateFundingByPriority(\n      downPaymentCalculation.downPaymentNeeded, \n      fundingSources\n    );\n    \n    // Step 4: Calculate purchase price financing\n    const purchaseFinancing = calculatePurchasePriceFinancing(\n      businessMetrics.purchasePrice, \n      fundingAllocation,\n      variables\n    );\n    \n    // Step 5: Calculate debt service\n    const businessDebtService = calculateBusinessDebtService(purchaseFinancing);\n    const personalDebtService = calculatePersonalDebtService(fundingAllocation);\n    \n    // Step 6: Calculate ownership, WACC, and personal cost of capital\n    const ownership = calculatePriorityBasedOwnership(fundingAllocation);\n    const wacc = calculatePriorityBasedWACC(fundingAllocation, businessMetrics.purchasePrice);\n    const personalCostOfCapital = calculatePersonalCostOfCapital(fundingAllocation);\n    \n    // Step 7: Calculate cash flows\n    const businessCashFlow = businessMetrics.ebitda - \n      businessDebtService.totalBusinessDebtService - \n      (variables.managementSalary || 100000) - \n      (variables.techInvestment || 100000) / 3;\n    \n    const ownerDistribution = businessCashFlow * ownership.yourOwnership;\n    const personalNetCashFlow = ownerDistribution - personalDebtService.totalPersonalDebtService;\n    \n    return {\n      ...businessMetrics,\n      ...downPaymentCalculation,\n      fundingAllocation,\n      purchaseFinancing,\n      businessDebtService,\n      personalDebtService,\n      ownership,\n      wacc,\n      personalCostOfCapital,\n      businessCashFlow,\n      ownerDistribution,\n      personalNetCashFlow,\n      personalROI: (personalNetCashFlow / (fundingAllocation.allocation.personalCash + fundingAllocation.allocation.taiwaneseLoan + fundingAllocation.allocation.houseEquity)) * 100\n    };\n  });\n}; \n\n// Calculate down payment needed using the same logic as Scenario Comparison\nexport const calculateDownPaymentNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n  \n  // Calculate SBA down payment\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  // Calculate working capital and fees (same as Scenario Comparison)\n  const workingCapitalPercent = variables.workingCapital || 7.9;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const fees = purchasePrice * 0.025; // 2.5% total fees (due diligence + professional fees)\n  \n  // Down Payment Needed = SBA Down Payment + Working Capital + Fees\n  const downPaymentNeeded = sbaDownPayment + workingCapital + fees;\n  \n  return {\n    sbaDownPayment,\n    workingCapital,\n    fees,\n    downPaymentNeeded\n  };\n}; \n\n// NEW METRICS CALCULATIONS\n\n// Capital Utilization Rate\nexport const calculateCapitalUtilizationRate = (totalAllocated, availableCash) => {\n  return availableCash > 0 ? (totalAllocated / availableCash) * 100 : 0;\n};\n\nexport const getCapitalUtilizationStatus = (rate) => {\n  if (rate > 95) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (rate > 85) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (rate > 65) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Leverage Multiplier\nexport const calculateLeverageMultiplier = (totalInvestment, personalCashInvested) => {\n  return personalCashInvested > 0 ? totalInvestment / personalCashInvested : 0;\n};\n\nexport const getLeverageMultiplierStatus = (multiplier) => {\n  if (multiplier < 3) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (multiplier < 5) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (multiplier < 8) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Price-to-Revenue Ratio\nexport const calculatePriceToRevenueRatio = (purchasePrice, targetRevenue) => {\n  return targetRevenue > 0 ? purchasePrice / targetRevenue : 0;\n};\n\nexport const getPriceToRevenueStatus = (ratio) => {\n  if (ratio > 1.2) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (ratio > 1.0) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (ratio > 0.8) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// EBITDA Margin\nexport const calculateEBITDAMargin = (ebitda, revenue) => {\n  return revenue > 0 ? (ebitda / revenue) * 100 : 0;\n};\n\nexport const getEBITDAMarginStatus = (margin) => {\n  if (margin < 15) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (margin < 18) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (margin < 22) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Business Cash Conversion\nexport const calculateBusinessCashConversion = (businessFreeCashFlow, businessEBITDA) => {\n  return businessEBITDA > 0 ? (businessFreeCashFlow / businessEBITDA) * 100 : 0;\n};\n\nexport const getCashConversionStatus = (conversion) => {\n  if (conversion < 15) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (conversion < 20) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (conversion < 30) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Revenue-to-Investment Efficiency\nexport const calculateRevenueToInvestmentEfficiency = (targetRevenue, yourTotalInvestment) => {\n  return yourTotalInvestment > 0 ? targetRevenue / yourTotalInvestment : 0;\n};\n\nexport const getRevenueEfficiencyStatus = (efficiency) => {\n  if (efficiency < 3) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (efficiency < 4) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (efficiency < 6) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Risk-Adjusted Return\nexport const calculateRiskAdjustedReturn = (yourROI, riskFreeRate = 4.5, riskScore) => {\n  return riskScore > 0 ? (yourROI - riskFreeRate) / riskScore : 0;\n};\n\nexport const getRiskAdjustedStatus = (ratio) => {\n  if (ratio < 0.5) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (ratio < 1.0) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (ratio < 1.5) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Income Replacement Ratio\nexport const calculateIncomeReplacementRatio = (yourNetAnnualGain, currentSalary) => {\n  return currentSalary > 0 ? (yourNetAnnualGain / currentSalary) * 100 : 0;\n};\n\nexport const getIncomeReplacementStatus = (ratio) => {\n  if (ratio < 40) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (ratio < 80) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (ratio < 120) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Wealth Building Velocity\nexport const calculateWealthBuildingVelocity = (totalReturnMultiple, investmentPeriod = 5) => {\n  const annualWealthCreation = Math.pow(totalReturnMultiple, 1/investmentPeriod) - 1;\n  return annualWealthCreation * 100;\n};\n\nexport const getWealthVelocityStatus = (velocity) => {\n  if (velocity < 20) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (velocity < 40) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (velocity < 80) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// 5-Year Exit Value Range\nexport const calculateExitValueRange = (year5EBITDA, yourOwnership, conservativeMultiple = 3.0, expectedMultiple = 3.59, optimisticMultiple = 4.5) => {\n  return {\n    conservative: year5EBITDA * conservativeMultiple * yourOwnership,\n    expected: year5EBITDA * expectedMultiple * yourOwnership,\n    optimistic: year5EBITDA * optimisticMultiple * yourOwnership\n  };\n};\n\n// Stress Test Results\nexport const calculateStressTestResults = (baseROI, revenueStress = -20, marginStress = -300, rateStress = 200) => {\n  // Simplified stress test calculations\n  const revenueStressROI = baseROI * (1 + revenueStress / 100);\n  const marginStressROI = baseROI * (1 + marginStress / 10000); // basis points\n  const rateStressROI = baseROI * (1 - rateStress / 10000); // basis points\n  \n  const minROI = Math.min(revenueStressROI, marginStressROI, rateStressROI);\n  \n  return {\n    revenueStressROI,\n    marginStressROI,\n    rateStressROI,\n    minROI\n  };\n};\n\nexport const getStressTestStatus = (minROI) => {\n  if (minROI < 5) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (minROI < 7) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (minROI < 10) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Growth Funding Capacity\nexport const calculateGrowthFundingCapacity = (maxSustainableDebt, currentTotalDebt, projectedYear3CashFlow, leverageMultiplier) => {\n  const currentDebtCapacity = maxSustainableDebt - currentTotalDebt;\n  const cashFlowGrowthCapacity = projectedYear3CashFlow * leverageMultiplier;\n  return Math.min(currentDebtCapacity, cashFlowGrowthCapacity);\n};\n\nexport const getGrowthCapacityStatus = (capacity) => {\n  if (capacity < 50000) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (capacity < 100000) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (capacity < 200000) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}