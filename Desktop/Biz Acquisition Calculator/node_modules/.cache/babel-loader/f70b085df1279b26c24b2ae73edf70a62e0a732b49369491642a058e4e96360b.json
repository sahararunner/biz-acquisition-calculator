{"ast":null,"code":"// Debug logging functions for comprehensive metric tracking\nexport const DEBUG_METRICS = true;\nexport function logMetricCalculation(sectionName, metricName, inputs, formula, result, assumptions = {}) {\n  if (!DEBUG_METRICS) return;\n  console.group(`📊 ${sectionName} - ${metricName}`);\n  console.log(`🔢 INPUTS:`, inputs);\n  console.log(`📐 FORMULA: ${formula}`);\n  console.log(`📋 ASSUMPTIONS:`, assumptions);\n  console.log(`✅ RESULT: ${result}`);\n  console.log(`---`);\n  console.groupEnd();\n}\nexport function logAllMetricsSummary(scenario, metrics) {\n  if (!DEBUG_METRICS) return;\n  console.group(\"📊 DASHBOARD METRICS SUMMARY\");\n  console.log(\"🏢 DEAL STRUCTURE:\");\n  console.log(`  Purchase Price: ${metrics.purchasePrice}`);\n  console.log(`  Available Cash: ${metrics.availableCash}`);\n  console.log(`  Cash Surplus: ${metrics.cashSurplus}`);\n  console.log(`  WACC: ${metrics.wacc}%`);\n  console.log(\"📈 BUSINESS HEALTH:\");\n  console.log(`  DSCR: ${metrics.businessDSCR}x`);\n  console.log(`  ROA: ${metrics.businessROA}%`);\n  console.log(`  Debt/EBITDA: ${metrics.debtToEBITDA}x`);\n  console.log(`  Interest Coverage: ${metrics.interestCoverage}x`);\n  console.log(\"💰 PERSONAL RETURNS:\");\n  console.log(`  Your ROI: ${metrics.yourROI}%`);\n  console.log(`  Cash-on-Cash: ${metrics.cashOnCashReturn}%`);\n  console.log(`  Payback: ${metrics.paybackPeriod} years`);\n  console.log(\"📊 KEY ASSUMPTIONS:\");\n  console.log(`  Target Revenue: ${scenario.targetRevenue}`);\n  console.log(`  Net Profit Margin: ${scenario.netProfitMargin}%`);\n  console.log(`  Valuation Multiple: ${scenario.valuationMultiple}x`);\n  console.log(`  Revenue Growth: ${scenario.revenueGrowthRate}%`);\n  console.log(`  Working Capital %: ${scenario.workingCapitalPercent}%`);\n  console.log(`  Management Salary: ${scenario.managementSalary}`);\n  console.groupEnd();\n}\n\n// SBA loan payment calculation\nexport const calculateSBAPayment = (principal, rate = 0.115, years = 10) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return principal * monthlyRate * Math.pow(1 + monthlyRate, payments) / (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Seller note payment calculation  \nexport const calculateSellerPayment = (principal, rate = 0.08, years = 5) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return principal * monthlyRate * Math.pow(1 + monthlyRate, payments) / (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Expected value calculation\nexport const calculateExpectedValue = (scenarios, probabilities) => {\n  return scenarios.bestCase * probabilities.bestCase / 100 + scenarios.mostLikely * probabilities.mostLikely / 100 + scenarios.worstCase * probabilities.worstCase / 100;\n};\n\n// Auto-normalize probabilities\nexport const normalizeProbabilities = (best, likely, worst) => {\n  const total = best + likely + worst;\n  if (total !== 100) {\n    const factor = 100 / total;\n    return {\n      best: Math.round(best * factor),\n      likely: Math.round(likely * factor),\n      worst: Math.round(worst * factor)\n    };\n  }\n  return {\n    best,\n    likely,\n    worst\n  };\n};\n\n// SBA minimum constraint\nexport const validateSBADownPayment = value => Math.max(value, 10);\n\n// Debt service coverage validation\nexport const validateDebtCoverage = (ebitda, debtService) => debtService / ebitda <= 0.8;\n\n// Generate bell curve data\nexport const generateBellCurve = (mean, min, max) => {\n  const stdDev = (max - min) / 6;\n  const points = [];\n  for (let x = min; x <= max; x += (max - min) / 100) {\n    const y = Math.exp(-0.5 * Math.pow((x - mean) / stdDev, 2));\n    points.push({\n      x,\n      y\n    });\n  }\n  return points;\n};\n\n// Calculate total cash required\nexport const calculateTotalCashRequired = params => {\n  const {\n    purchasePrice,\n    sbaDownPaymentPercent,\n    workingCapitalPercent,\n    targetRevenue,\n    techInvestment,\n    sellerFinancingPercent = 20,\n    // Default seller financing percentage\n    dueDiligencePercent = 1.5,\n    professionalFeesPercent = 0.8,\n    contingencyPercent = 2.5\n  } = params;\n\n  // Calculate financing structure correctly\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n\n  // Note: Total financing may exceed purchase price if both SBA and seller financing are used\n  // This is typical in SBA deals where seller financing is additional to SBA loan\n\n  const workingCapital = targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * (dueDiligencePercent / 100);\n  const professionalFees = purchasePrice * (professionalFeesPercent / 100);\n  const contingency = purchasePrice * (contingencyPercent / 100);\n  return {\n    downPayment: sbaDownPayment,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    techInvestment,\n    contingency,\n    total: sbaDownPayment + workingCapital + dueDiligence + professionalFees + techInvestment + contingency\n  };\n};\n\n// Calculate annual cash to pocket\nexport const calculateAnnualCashToPocket = params => {\n  const {\n    targetRevenue,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment\n  } = params;\n  const ebitda = targetRevenue * (netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(sellerFinancingAmount);\n  const techInvestmentAmortized = techInvestment / 3; // Amortized over 3 years\n\n  return {\n    ebitda,\n    sbaPayment,\n    sellerPayment,\n    managementSalary,\n    techInvestmentAmortized,\n    netCashFlow: ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized\n  };\n};\n\n// Calculate Debt Service Coverage Ratio (DSCR)\nexport const calculateDSCR = (annualEBITDA, totalAnnualDebtService) => {\n  return annualEBITDA / totalAnnualDebtService;\n};\n\n// Calculate Cash-on-Cash Return\nexport const calculateCashOnCashReturn = (annualCashToPocket, totalCashInvested) => {\n  return annualCashToPocket / totalCashInvested * 100;\n};\n\n// Calculate IRR using Newton-Raphson method\nexport const calculateIRR = (initialInvestment, cashFlows) => {\n  const tolerance = 0.0001;\n  const maxIterations = 100;\n  let guess = 0.1; // Start with 10%\n\n  for (let i = 0; i < maxIterations; i++) {\n    let npv = -initialInvestment;\n    let derivative = 0;\n    for (let j = 0; j < cashFlows.length; j++) {\n      const discountFactor = Math.pow(1 + guess, j + 1);\n      npv += cashFlows[j] / discountFactor;\n      derivative -= (j + 1) * cashFlows[j] / (discountFactor * (1 + guess));\n    }\n    const newGuess = guess - npv / derivative;\n    if (Math.abs(newGuess - guess) < tolerance) {\n      return newGuess * 100; // Return as percentage\n    }\n    guess = newGuess;\n  }\n  return null; // No convergence\n};\n\n// Calculate Multiple on Invested Capital (MOIC)\nexport const calculateMOIC = (totalCashInvested, fiveYearProjections) => {\n  const totalCashReturned = fiveYearProjections.reduce((sum, year) => sum + year.cashFlow, 0);\n  const businessValueAtExit = fiveYearProjections[4].ebitda * 4.2; // Assume same multiple\n  const result = (totalCashReturned + businessValueAtExit) / totalCashInvested;\n  if (DEBUG_METRICS) {\n    logMetricCalculation(\"Personal Returns\", \"MOIC (Multiple on Invested Capital)\", {\n      totalCashInvested,\n      totalCashReturned,\n      businessValueAtExit,\n      year5EBITDA: fiveYearProjections[4].ebitda,\n      exitMultiple: 4.2\n    }, \"MOIC = (Total Cash Returned + Business Value at Exit) ÷ Total Cash Invested\", result, {\n      exitMultipleSource: \"Assumed 4.2x EBITDA exit multiple\",\n      calculation: `(${totalCashReturned} + ${businessValueAtExit}) ÷ ${totalCashInvested} = ${result}x`\n    });\n  }\n  return result;\n};\n\n// Calculate Payback Period\nexport const calculatePaybackPeriod = (totalCashInvested, fiveYearProjections) => {\n  let cumulativeCashFlow = 0;\n  for (let i = 0; i < fiveYearProjections.length; i++) {\n    cumulativeCashFlow += fiveYearProjections[i].cashFlow;\n    if (cumulativeCashFlow >= totalCashInvested) {\n      return i + 1 + (totalCashInvested - (cumulativeCashFlow - fiveYearProjections[i].cashFlow)) / fiveYearProjections[i].cashFlow;\n    }\n  }\n  return '>5 years';\n};\n\n// Enhanced Risk Score Calculation\nexport const calculateEnhancedRiskScore = (dscr, cashOnCash, sellerFinancingPercent) => {\n  let score = 5; // Base score\n\n  // DSCR scoring\n  if (dscr >= 1.5) score += 2;else if (dscr >= 1.25) score += 1;else score -= 2;\n\n  // Cash-on-Cash scoring\n  if (cashOnCash >= 20) score += 2;else if (cashOnCash >= 15) score += 1;else if (cashOnCash < 10) score -= 1;\n\n  // Seller financing scoring\n  if (sellerFinancingPercent >= 20) score += 1; // Seller has skin in game\n\n  return Math.max(1, Math.min(10, score));\n};\n\n// Calculate financing structure\nexport const calculateFinancingStructure = params => {\n  const {\n    purchasePrice,\n    sellerFinancingPercent,\n    sbaDownPaymentPercent\n  } = params;\n  const sellerFinancing = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancing;\n  const downPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  return {\n    purchasePrice,\n    sellerFinancing,\n    sbaLoanAmount,\n    downPayment\n  };\n};\n\n// Calculate 5-year projections for advanced metrics\nexport const calculateFiveYearProjections = params => {\n  const {\n    targetRevenue,\n    revenueGrowthRatePercent,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment,\n    sbaInterestRate = 11.5,\n    sellerInterestRate = 8\n  } = params;\n  const projections = [];\n  let currentRevenue = targetRevenue;\n  for (let year = 1; year <= 5; year++) {\n    const ebitda = currentRevenue * (netProfitMarginPercent / 100);\n    const sbaPayment = calculateSBAPayment(sbaLoanAmount, sbaInterestRate / 100, 10);\n    const sellerPayment = calculateSellerPayment(sellerFinancingAmount, sellerInterestRate / 100, 5);\n    const techInvestmentAmortized = year <= 3 ? techInvestment / 3 : 0;\n    const netCashFlow = ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized;\n    projections.push({\n      year,\n      revenue: currentRevenue,\n      ebitda,\n      cashFlow: netCashFlow\n    });\n    currentRevenue *= 1 + revenueGrowthRatePercent / 100;\n  }\n  return projections;\n};\n\n// Calculate business targeting metrics\nexport const calculateBusinessTargetingMetrics = (availableCash, targetRevenue) => {\n  return {\n    maxSafePurchasePrice: availableCash * 4,\n    // Assuming 25% total cash requirement\n    minRequiredEBITDA: availableCash * 4 * 0.12 / 1.25,\n    // 12% debt service / 1.25x coverage\n    targetRevenueRange: {\n      min: targetRevenue * 0.8,\n      max: targetRevenue * 1.2\n    },\n    recommendedMultipleRange: {\n      min: 3.5,\n      max: 5.0\n    }\n  };\n};\n\n// Calculate risk score (1-10)\nexport const calculateRiskScore = params => {\n  let riskScore = 5; // Base score\n\n  // Debt service coverage ratio\n  const ebitda = params.targetRevenue * (params.netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(params.sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(params.sellerFinancingAmount);\n  const totalDebtService = sbaPayment + sellerPayment;\n  const debtCoverageRatio = ebitda / totalDebtService;\n  if (debtCoverageRatio < 1.25) riskScore += 3;else if (debtCoverageRatio < 1.5) riskScore += 1;else if (debtCoverageRatio > 2.0) riskScore -= 1;\n\n  // Working capital ratio\n  const workingCapitalRatio = params.workingCapitalPercent / 100 / (params.netProfitMarginPercent / 100);\n  if (workingCapitalRatio > 0.8) riskScore += 2;else if (workingCapitalRatio < 0.3) riskScore -= 1;\n\n  // SBA down payment\n  if (params.sbaDownPaymentPercent < 12) riskScore += 1;else if (params.sbaDownPaymentPercent > 15) riskScore -= 1;\n  return Math.max(1, Math.min(10, riskScore));\n};\n\n// Calculate business-only WACC (excluding personal loans)\nexport const calculateBusinessWACC = (sbaLoan, sellerFinancing, purchasePrice) => {\n  const totalBusinessDebt = sbaLoan.amount + sellerFinancing.amount;\n  const businessEquity = purchasePrice - totalBusinessDebt;\n  const totalBusinessCapital = purchasePrice;\n  if (totalBusinessCapital <= 0) return 0;\n  const debtWeight = totalBusinessDebt / totalBusinessCapital;\n  const equityWeight = businessEquity / totalBusinessCapital;\n\n  // Different tax treatment for different debt types\n  const sbaAfterTaxCost = 0.115 * 0.75; // 25% tax benefit for business-deductible SBA\n  const sellerAfterTaxCost = 0.08 * 0.9; // 10% tax benefit for seller financing (less deductible)\n  const afterTaxDebtCost = totalBusinessDebt > 0 ? (sbaLoan.amount * sbaAfterTaxCost + sellerFinancing.amount * sellerAfterTaxCost) / totalBusinessDebt : 0;\n  const equityCost = 0.15; // Business equity cost\n\n  return debtWeight * afterTaxDebtCost + equityWeight * equityCost;\n};\n\n// Calculate business-level EVA (excluding personal loans)\nexport const calculateBusinessEVA = (businessEBITDA, businessCapitalInvested, businessWACC) => {\n  const taxRate = 0.25;\n  const nopat = businessEBITDA * (1 - taxRate); // Net Operating Profit After Tax\n  const capitalCharge = businessCapitalInvested * businessWACC;\n  return nopat - capitalCharge;\n};\n\n// Calculate business cash flow (company level only)\nexport const calculateBusinessCashFlow = (scenario, loanStructure, businessCapitalInvested) => {\n  const businessDebtService = loanStructure.sbaLoan.annualPayment + loanStructure.sellerFinancing.annualPayment;\n  const businessFreeCashFlow = scenario.ebitda - businessDebtService - scenario.managementSalary - scenario.techInvestmentAnnual;\n  const businessDSCR = businessDebtService > 0 ? scenario.ebitda / businessDebtService : 0;\n  return {\n    businessRevenue: scenario.targetRevenue,\n    businessEBITDA: scenario.ebitda,\n    businessDebtService: businessDebtService,\n    businessFreeCashFlow: businessFreeCashFlow,\n    businessDSCR: businessDSCR,\n    businessROA: businessCapitalInvested > 0 ? businessFreeCashFlow / businessCapitalInvested * 100 : 0\n  };\n};\n\n// Calculate personal cash flow (owner level only)\nexport const calculatePersonalCashFlow = (businessCashFlow, personalLoans, ownershipData, fundingSources) => {\n  const ownerDistribution = businessCashFlow.businessFreeCashFlow * ownershipData.yourOwnership;\n  const personalDebtService = personalLoans.houseEquity.annualPayment + personalLoans.taiwaneseLoan.annualPayment;\n  const personalNetCashFlow = ownerDistribution - personalDebtService;\n  const personalCashInvested = (fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0) + (fundingSources.houseEquity.enabled ? fundingSources.houseEquity.amount : 0) + (fundingSources.taiwaneseLoan.enabled ? fundingSources.taiwaneseLoan.amount : 0);\n  const personalROI = personalCashInvested > 0 ? personalNetCashFlow / personalCashInvested * 100 : 0;\n  return {\n    ownerDistribution: ownerDistribution,\n    personalDebtService: personalDebtService,\n    personalNetCashFlow: personalNetCashFlow,\n    personalCashInvested: personalCashInvested,\n    personalROI: personalROI\n  };\n};\n\n// Calculate personal projections\nexport const calculatePersonalProjections = (businessProjections, personalLoans, ownershipData) => {\n  return businessProjections.map((year, index) => {\n    const businessFCF = year.businessFreeCashFlow;\n    const ownerDistribution = businessFCF * ownershipData.yourOwnership;\n    const personalDebtService = personalLoans.total;\n    const yourFCF = ownerDistribution - personalDebtService;\n    return {\n      year: index + 1,\n      businessFCF: businessFCF,\n      ownerDistribution: ownerDistribution,\n      yourFCF: yourFCF,\n      DSCR: year.businessDSCR,\n      cumulative: index === 0 ? yourFCF : (index > 0 ? businessProjections[index - 1].cumulative : 0) + yourFCF\n    };\n  });\n};\n\n// Calculate risk-adjusted ownership with fair methodology\nexport const calculateRiskAdjustedOwnership = (fundingSources, managementValue = 150000) => {\n  // Calculate risk-weighted contributions\n  const personalCashRisk = fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0;\n\n  // Taiwanese loan: Personal guarantee = 80% risk weight\n  const taiwaneseLoanRisk = fundingSources.taiwaneseLoan.enabled ? fundingSources.taiwaneseLoan.amount * 0.8 : 0;\n\n  // Home equity: Personal asset at risk = 120% risk weight (higher risk premium)\n  const homeEquityRisk = fundingSources.houseEquity.enabled ? fundingSources.houseEquity.amount * 1.2 : 0;\n\n  // SBA loan: Personal guarantee but asset-backed = 30% risk weight\n  // const sbaRisk = 0; // SBA loan is debt, not equity contribution\n\n  // Management/operational value (sweat equity)\n  const sweatEquityValue = managementValue;\n\n  // Total personal risk-adjusted contribution\n  const personalRiskAdjusted = personalCashRisk + taiwaneseLoanRisk + homeEquityRisk + sweatEquityValue;\n\n  // Outside investor contribution (100% risk weight)\n  const investorContribution = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n\n  // Total risk-adjusted equity\n  const totalRiskAdjustedEquity = personalRiskAdjusted + investorContribution;\n\n  // Base ownership calculation\n  const baseOwnership = totalRiskAdjustedEquity > 0 ? personalRiskAdjusted / totalRiskAdjustedEquity : 1;\n\n  // Dynamic control premium based on investor amount\n  const controlPremium = investorContribution > 0 ? Math.min(0.05, investorContribution / 1000000) : 0; // Max 5%, scales with investment size\n\n  // Final ownership (capped at 95% to be fair to investors)\n  const finalOwnership = Math.min(0.95, baseOwnership + controlPremium);\n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      homeEquityRisk,\n      sweatEquityValue,\n      investorContribution,\n      controlPremium: controlPremium * 100\n    }\n  };\n};\n\n// Calculate ownership cash flows with preferred return structure\nexport const calculateOwnershipCashFlows = (totalBusinessCashFlow, ownershipData, fundingSources) => {\n  const investorAmount = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n  const personalCashAmount = fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0;\n\n  // Investor preferred return (8% on their investment)\n  const investorPreferredReturn = investorAmount * 0.08;\n\n  // Your preferred return (6% on personal cash)\n  const yourPreferredReturn = personalCashAmount * 0.06;\n\n  // Total preferred returns\n  const totalPreferredReturns = investorPreferredReturn + yourPreferredReturn;\n\n  // Remaining cash flow after preferred returns\n  const remainingCashFlow = Math.max(0, totalBusinessCashFlow - totalPreferredReturns);\n\n  // Split remaining cash flow based on ownership percentages\n  const yourRemainingShare = remainingCashFlow * ownershipData.yourOwnership;\n  const investorRemainingShare = remainingCashFlow * ownershipData.investorOwnership;\n\n  // Total distributions\n  const yourTotalCashFlow = yourPreferredReturn + yourRemainingShare;\n  const investorTotalCashFlow = investorPreferredReturn + investorRemainingShare;\n\n  // Calculate ROI on actual cash invested (not risk-adjusted amounts)\n  const yourCashInvested = personalCashAmount;\n  const yourROI = yourCashInvested > 0 ? yourTotalCashFlow / yourCashInvested * 100 : 0;\n  const investorROI = investorAmount > 0 ? investorTotalCashFlow / investorAmount * 100 : 0;\n  return {\n    yourTotalCashFlow,\n    investorTotalCashFlow,\n    yourROI,\n    investorROI,\n    preferredReturns: {\n      yours: yourPreferredReturn,\n      investor: investorPreferredReturn\n    },\n    remainingCashFlowSplit: {\n      yours: yourRemainingShare,\n      investor: investorRemainingShare\n    }\n  };\n};\n\n// Validate ownership for reasonableness\nexport const validateOwnership = (ownershipData, fundingSources, businessMetrics) => {\n  const warnings = [];\n\n  // Check if investor is getting fair deal\n  if (ownershipData.investorOwnership < 0.05 && fundingSources.additionalInvestment.amount > 50000) {\n    warnings.push(\"⚠️ Investor ownership very low - may not be attractive\");\n  }\n\n  // Check if you're giving up too much\n  if (ownershipData.yourOwnership < 0.6 && fundingSources.personalCash.amount > fundingSources.additionalInvestment.amount) {\n    warnings.push(\"⚠️ Your ownership low despite majority funding\");\n  }\n\n  // Check for reasonable investor return (simplified calculation)\n  const investorAmount = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n  const expectedInvestorReturn = investorAmount > 0 ? businessMetrics.totalCashFlow * ownershipData.investorOwnership / investorAmount * 100 : 0;\n  if (expectedInvestorReturn < 15 && investorAmount > 0) {\n    warnings.push(\"⚠️ Investor expected return below market (15%+)\");\n  }\n  return warnings;\n};\n\n// Verification function to test calculations with known values\nexport const verifyCalculations = testScenario => {\n  const {\n    targetRevenue = 2500000,\n    netProfitMargin = 25,\n    valuationMultiple = 4,\n    sbaLoanAmount = 1500000,\n    sellerFinancingAmount = 500000,\n    personalCash = 550000,\n    additionalInvestment = 100000\n  } = testScenario;\n\n  // Test business calculations\n  const ebitda = targetRevenue * (netProfitMargin / 100);\n  const purchasePrice = ebitda * valuationMultiple;\n  const businessCapitalInvested = purchasePrice + targetRevenue * 0.1 + purchasePrice * 0.015 + purchasePrice * 0.008;\n\n  // Test WACC\n  const businessWACC = calculateBusinessWACC({\n    amount: sbaLoanAmount,\n    rate: 0.115\n  }, {\n    amount: sellerFinancingAmount,\n    rate: 0.08\n  }, purchasePrice);\n\n  // Test EVA\n  const businessEVA = calculateBusinessEVA(ebitda, businessCapitalInvested, businessWACC);\n\n  // Test ownership\n  const fundingSources = {\n    personalCash: {\n      enabled: true,\n      amount: personalCash\n    },\n    taiwaneseLoan: {\n      enabled: true,\n      amount: 725000\n    },\n    houseEquity: {\n      enabled: false,\n      amount: 200000\n    },\n    additionalInvestment: {\n      enabled: true,\n      amount: additionalInvestment\n    }\n  };\n  const ownershipData = calculateRiskAdjustedOwnership(fundingSources);\n  return {\n    testScenario: {\n      targetRevenue,\n      ebitda,\n      purchasePrice,\n      businessCapitalInvested,\n      businessWACC: businessWACC * 100,\n      businessEVA,\n      ownershipData\n    },\n    expectedRanges: {\n      businessWACC: {\n        min: 7,\n        max: 12\n      },\n      businessEVA: {\n        min: 0,\n        max: 200000\n      },\n      ownership: {\n        min: 0.6,\n        max: 0.95\n      }\n    }\n  };\n};\n\n// Format currency\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount);\n};\n\n// Format percentage\nexport const formatPercentage = value => {\n  return `${value.toFixed(1)}%`;\n};\n\n// FUNDING PRIORITY ALLOCATION FUNCTIONS\n// Calculate total cash needed for acquisition\nexport const calculateTotalCashNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n  const workingCapitalPercent = variables.workingCapital || 14.6;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * 0.015;\n  const professionalFees = purchasePrice * 0.008;\n  const contingency = purchasePrice * 0.025;\n  const techInvestment = variables.techInvestment || 100000;\n\n  // Calculate SBA down payment correctly\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  const totalCashNeeded = sbaDownPayment + workingCapital + dueDiligence + professionalFees + contingency + techInvestment;\n  return {\n    purchasePrice,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    contingency,\n    techInvestment,\n    sbaDownPayment,\n    totalCashNeeded\n  };\n};\n\n// Allocate funding by priority order (lowest to highest cost) - FOCUSED ON DOWN PAYMENT\nexport const allocateFundingByPriority = (downPaymentNeeded, fundingSources) => {\n  const allocation = {\n    taiwaneseLoan: 0,\n    personalCash: 0,\n    additionalInvestment: 0,\n    sellerFinancing: 0,\n    houseEquity: 0,\n    sbaLoan: 0\n  };\n  let remainingDownPayment = downPaymentNeeded;\n\n  // Priority 1: Taiwanese Loan (cheapest - 2.8%) - $300,000 available\n  if (fundingSources.taiwaneseLoan.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.taiwaneseLoan.amount);\n    allocation.taiwaneseLoan = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 2: Personal Cash (8% opportunity cost) - $50,000 available\n  if (fundingSources.personalCash.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.personalCash.amount);\n    allocation.personalCash = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 3: Additional Investment (15% expected return) - $50,000 available\n  if (fundingSources.additionalInvestment.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.additionalInvestment.amount);\n    allocation.additionalInvestment = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 4: Seller Financing (8%) - $0 available (disabled)\n  if (fundingSources.sellerFinancing.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.sellerFinancing.amount);\n    allocation.sellerFinancing = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 5: Home Equity Loan (8% but personal asset at risk) - $98,273 available\n  if (fundingSources.houseEquity.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.houseEquity.amount);\n    allocation.houseEquity = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 6: SBA Loan (11.5% - highest cost, use as last resort) - $0 available (disabled)\n  if (remainingDownPayment > 0) {\n    allocation.sbaLoan = remainingDownPayment; // Whatever is left\n  }\n  return {\n    allocation,\n    downPaymentGap: remainingDownPayment < 0 ? 0 : remainingDownPayment,\n    totalAllocated: downPaymentNeeded - Math.max(0, remainingDownPayment),\n    downPaymentNeeded: downPaymentNeeded,\n    remainingDownPayment: Math.max(0, remainingDownPayment)\n  };\n};\n\n// Determine purchase price financing structure\nexport const calculatePurchasePriceFinancing = (purchasePrice, fundingAllocation, variables) => {\n  // Seller financing reduces the amount that needs bank financing\n  const sellerFinancingAmount = fundingAllocation.allocation.sellerFinancing || 0;\n  const amountNeedingBankFinancing = purchasePrice - sellerFinancingAmount;\n\n  // SBA loan covers remaining purchase price\n  const sbaLoanAmount = Math.max(0, amountNeedingBankFinancing);\n  const sbaDownPaymentPercent = Math.max(variables.sbaDownPayment || 10, 10);\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  const sbaLoanPrincipal = sbaLoanAmount - sbaDownPayment;\n  return {\n    sellerFinancingAmount,\n    sbaLoanAmount,\n    sbaDownPayment,\n    sbaLoanPrincipal,\n    totalDownPaymentCovered: sbaDownPayment // This comes from cash allocation\n  };\n};\n\n// Calculate business debt service with priority allocation\nexport const calculateBusinessDebtService = purchaseFinancing => {\n  // Only SBA loan and seller financing create debt service for the business\n  const sbaAnnualPayment = calculateSBAPayment(purchaseFinancing.sbaLoanPrincipal, 0.115, 10);\n  const sellerAnnualPayment = calculateSellerPayment(purchaseFinancing.sellerFinancingAmount, 0.08, 5);\n  return {\n    sbaAnnualPayment,\n    sellerAnnualPayment,\n    totalBusinessDebtService: sbaAnnualPayment + sellerAnnualPayment\n  };\n};\n\n// Calculate personal debt service with priority allocation\nexport const calculatePersonalDebtService = fundingAllocation => {\n  // Only personal loans create personal debt service\n  const houseEquityPayment = fundingAllocation.allocation.houseEquity > 0 ? calculateSBAPayment(fundingAllocation.allocation.houseEquity, 0.08, 15) : 0;\n  const taiwanesePayment = fundingAllocation.allocation.taiwaneseLoan > 0 ? calculateSBAPayment(fundingAllocation.allocation.taiwaneseLoan, 0.028, 10) : 0;\n  return {\n    houseEquityPayment,\n    taiwanesePayment,\n    totalPersonalDebtService: houseEquityPayment + taiwanesePayment\n  };\n};\n\n// Calculate WACC with priority-based allocation - ALL FUNDING SOURCES\nexport const calculatePriorityBasedWACC = (fundingAllocation, purchasePrice) => {\n  // WACC should include ALL funding sources used for the business acquisition\n  // Each source has its own after-tax cost of capital\n\n  let totalFunding = 0;\n  let weightedCost = 0;\n\n  // After-tax cost rates for each funding source\n  const afterTaxCostRates = {\n    taiwaneseLoan: 0.028 * 0.75,\n    // 2.8% × 0.75 = 2.1% after-tax (if business deductible)\n    personalCash: 0.08 * 0.75,\n    // 8% × 0.75 = 6% after-tax (opportunity cost with tax benefit)\n    additionalInvestment: 0.15,\n    // 15% equity cost (no tax benefit)\n    sellerFinancing: 0.08 * 0.75,\n    // 8% × 0.75 = 6% after-tax\n    houseEquity: 0.08,\n    // 8% (personal debt, no business tax benefit)\n    sbaLoan: 0.115 * 0.75 // 11.5% × 0.75 = 8.6% after-tax\n  };\n\n  // Calculate weighted average cost of capital across all funding sources\n  Object.entries(fundingAllocation.allocation).forEach(([source, amount]) => {\n    if (amount > 0) {\n      totalFunding += amount;\n      weightedCost += amount * afterTaxCostRates[source];\n    }\n  });\n  return totalFunding > 0 ? weightedCost / totalFunding * 100 : 0;\n};\n\n// Calculate ownership with priority-based allocation\nexport const calculatePriorityBasedOwnership = fundingAllocation => {\n  // Risk-adjusted personal contributions based on ACTUAL allocated amounts\n  const personalCashRisk = fundingAllocation.allocation.personalCash * 1.0;\n  const taiwaneseLoanRisk = fundingAllocation.allocation.taiwaneseLoan * 0.8; // Personal guarantee\n  const houseEquityRisk = fundingAllocation.allocation.houseEquity * 1.2; // Personal asset risk\n\n  const totalPersonalRisk = personalCashRisk + taiwaneseLoanRisk + houseEquityRisk;\n  const investorContribution = fundingAllocation.allocation.additionalInvestment;\n  const totalEquity = totalPersonalRisk + investorContribution;\n  const finalOwnership = totalEquity > 0 ? totalPersonalRisk / totalEquity : 1; // Removed control premium\n\n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      houseEquityRisk,\n      investorContribution\n    }\n  };\n};\n\n// Calculate personal cost of capital (for personal funding sources)\nexport const calculatePersonalCostOfCapital = fundingAllocation => {\n  let totalPersonalFunding = 0;\n  let weightedPersonalCost = 0;\n\n  // Only consider personal funding sources: Taiwanese Loan, Personal Cash, Home Equity\n  const personalCostRates = {\n    taiwaneseLoan: 0.028,\n    // 2.8% - personal loan rate\n    personalCash: 0.08,\n    // 8% opportunity cost\n    houseEquity: 0.08 // 8% home equity rate\n    // Excluded: additionalInvestment, sellerFinancing, sbaLoan (not personal funding)\n  };\n\n  // Only calculate for personal funding sources\n  const personalSources = ['taiwaneseLoan', 'personalCash', 'houseEquity'];\n  personalSources.forEach(source => {\n    const amount = fundingAllocation.allocation[source] || 0;\n    if (amount > 0) {\n      totalPersonalFunding += amount;\n      weightedPersonalCost += amount * personalCostRates[source];\n    }\n  });\n  return totalPersonalFunding > 0 ? weightedPersonalCost / totalPersonalFunding * 100 : 0;\n};\n\n// Main scenario calculation with priority-based funding\nexport const calculateScenariosWithPriority = (targetRevenues, variables, fundingSources) => {\n  return targetRevenues.map(revenue => {\n    // Step 1: Calculate business metrics\n    const netMargin = variables.netProfitMargin || 25;\n    const valuationMultiple = variables.valuationMultiple || 4;\n    const ebitda = revenue * (netMargin / 100);\n    const purchasePrice = ebitda * valuationMultiple;\n    const businessMetrics = {\n      targetRevenue: revenue,\n      ebitda: ebitda,\n      purchasePrice: purchasePrice\n    };\n\n    // Step 2: Calculate down payment needed (same logic as Scenario Comparison)\n    const downPaymentCalculation = calculateDownPaymentNeeded(businessMetrics, variables);\n\n    // Step 3: Allocate funding by priority based on down payment needed\n    const fundingAllocation = allocateFundingByPriority(downPaymentCalculation.downPaymentNeeded, fundingSources);\n\n    // Step 4: Calculate purchase price financing\n    const purchaseFinancing = calculatePurchasePriceFinancing(businessMetrics.purchasePrice, fundingAllocation, variables);\n\n    // Step 5: Calculate debt service\n    const businessDebtService = calculateBusinessDebtService(purchaseFinancing);\n    const personalDebtService = calculatePersonalDebtService(fundingAllocation);\n\n    // Step 6: Calculate ownership, WACC, and personal cost of capital\n    const ownership = calculatePriorityBasedOwnership(fundingAllocation);\n    const wacc = calculatePriorityBasedWACC(fundingAllocation, businessMetrics.purchasePrice);\n    const personalCostOfCapital = calculatePersonalCostOfCapital(fundingAllocation);\n\n    // Step 7: Calculate cash flows\n    const businessCashFlow = businessMetrics.ebitda - businessDebtService.totalBusinessDebtService - (variables.managementSalary || 100000) - (variables.techInvestment || 100000) / 3;\n    const ownerDistribution = businessCashFlow * ownership.yourOwnership;\n    const personalNetCashFlow = ownerDistribution - personalDebtService.totalPersonalDebtService;\n    return {\n      ...businessMetrics,\n      ...downPaymentCalculation,\n      fundingAllocation,\n      purchaseFinancing,\n      businessDebtService,\n      personalDebtService,\n      ownership,\n      wacc,\n      personalCostOfCapital,\n      businessCashFlow,\n      ownerDistribution,\n      personalNetCashFlow,\n      personalROI: personalNetCashFlow / (fundingAllocation.allocation.personalCash + fundingAllocation.allocation.taiwaneseLoan + fundingAllocation.allocation.houseEquity) * 100\n    };\n  });\n};\n\n// Calculate down payment needed using the same logic as Scenario Comparison\nexport const calculateDownPaymentNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n\n  // Calculate SBA down payment\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n\n  // Calculate working capital and fees (same as Scenario Comparison)\n  const workingCapitalPercent = variables.workingCapital || 7.9;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const fees = purchasePrice * 0.025; // 2.5% total fees (due diligence + professional fees)\n\n  // Down Payment Needed = SBA Down Payment + Working Capital + Fees\n  const downPaymentNeeded = sbaDownPayment + workingCapital + fees;\n  return {\n    sbaDownPayment,\n    workingCapital,\n    fees,\n    downPaymentNeeded\n  };\n};\n\n// NEW METRICS CALCULATIONS\n\n// Capital Utilization Rate\nexport const calculateCapitalUtilizationRate = (totalAllocated, availableCash) => {\n  return availableCash > 0 ? totalAllocated / availableCash * 100 : 0;\n};\nexport const getCapitalUtilizationStatus = rate => {\n  if (rate > 95) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (rate > 85) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (rate > 65) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// Leverage Multiplier\nexport const calculateLeverageMultiplier = (totalInvestment, personalCashInvested) => {\n  return personalCashInvested > 0 ? totalInvestment / personalCashInvested : 0;\n};\nexport const getLeverageMultiplierStatus = multiplier => {\n  if (multiplier < 3) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (multiplier < 5) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (multiplier < 8) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// Price-to-Revenue Ratio\nexport const calculatePriceToRevenueRatio = (purchasePrice, targetRevenue) => {\n  return targetRevenue > 0 ? purchasePrice / targetRevenue : 0;\n};\nexport const getPriceToRevenueStatus = ratio => {\n  if (ratio > 1.2) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (ratio > 1.0) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (ratio > 0.8) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// EBITDA Margin\nexport const calculateEBITDAMargin = (ebitda, revenue) => {\n  return revenue > 0 ? ebitda / revenue * 100 : 0;\n};\nexport const getEBITDAMarginStatus = margin => {\n  if (margin < 15) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (margin < 18) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (margin < 22) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// Business Cash Conversion\nexport const calculateBusinessCashConversion = (businessFreeCashFlow, businessEBITDA) => {\n  return businessEBITDA > 0 ? businessFreeCashFlow / businessEBITDA * 100 : 0;\n};\nexport const getCashConversionStatus = conversion => {\n  if (conversion < 15) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (conversion < 20) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (conversion < 30) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// Revenue-to-Investment Efficiency\nexport const calculateRevenueToInvestmentEfficiency = (targetRevenue, yourTotalInvestment) => {\n  return yourTotalInvestment > 0 ? targetRevenue / yourTotalInvestment : 0;\n};\nexport const getRevenueEfficiencyStatus = efficiency => {\n  if (efficiency < 3) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (efficiency < 4) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (efficiency < 6) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// Risk-Adjusted Return\nexport const calculateRiskAdjustedReturn = (yourROI, riskFreeRate = 4.5, riskScore) => {\n  return riskScore > 0 ? (yourROI - riskFreeRate) / riskScore : 0;\n};\nexport const getRiskAdjustedStatus = ratio => {\n  if (ratio < 0.5) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (ratio < 1.0) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (ratio < 1.5) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// Income Replacement Ratio\nexport const calculateIncomeReplacementRatio = (yourNetAnnualGain, currentSalary) => {\n  return currentSalary > 0 ? yourNetAnnualGain / currentSalary * 100 : 0;\n};\nexport const getIncomeReplacementStatus = ratio => {\n  if (ratio < 40) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (ratio < 80) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (ratio < 120) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// Wealth Building Velocity\nexport const calculateWealthBuildingVelocity = (totalReturnMultiple, investmentPeriod = 5) => {\n  const annualWealthCreation = Math.pow(totalReturnMultiple, 1 / investmentPeriod) - 1;\n  return annualWealthCreation * 100;\n};\nexport const getWealthVelocityStatus = velocity => {\n  if (velocity < 20) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (velocity < 40) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (velocity < 80) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// 5-Year Exit Value Range\nexport const calculateExitValueRange = (year5EBITDA, yourOwnership, conservativeMultiple = 3.0, expectedMultiple = 3.59, optimisticMultiple = 4.5) => {\n  return {\n    conservative: year5EBITDA * conservativeMultiple * yourOwnership,\n    expected: year5EBITDA * expectedMultiple * yourOwnership,\n    optimistic: year5EBITDA * optimisticMultiple * yourOwnership\n  };\n};\n\n// Stress Test Results\nexport const calculateStressTestResults = (baseROI, revenueStress = -20, marginStress = -300, rateStress = 200) => {\n  // Simplified stress test calculations\n  const revenueStressROI = baseROI * (1 + revenueStress / 100);\n  const marginStressROI = baseROI * (1 + marginStress / 10000); // basis points\n  const rateStressROI = baseROI * (1 - rateStress / 10000); // basis points\n\n  const minROI = Math.min(revenueStressROI, marginStressROI, rateStressROI);\n  return {\n    revenueStressROI,\n    marginStressROI,\n    rateStressROI,\n    minROI\n  };\n};\nexport const getStressTestStatus = minROI => {\n  if (minROI < 5) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (minROI < 7) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (minROI < 10) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};\n\n// Growth Funding Capacity\nexport const calculateGrowthFundingCapacity = (maxSustainableDebt, currentTotalDebt, projectedYear3CashFlow, leverageMultiplier) => {\n  const currentDebtCapacity = maxSustainableDebt - currentTotalDebt;\n  const cashFlowGrowthCapacity = projectedYear3CashFlow * leverageMultiplier;\n  return Math.min(currentDebtCapacity, cashFlowGrowthCapacity);\n};\nexport const getGrowthCapacityStatus = capacity => {\n  if (capacity < 50000) return {\n    color: '#E74C3C',\n    level: 'critical',\n    label: 'Critical'\n  };\n  if (capacity < 100000) return {\n    color: '#F1C40F',\n    level: 'below-target',\n    label: 'Below Target'\n  };\n  if (capacity < 200000) return {\n    color: '#27AE60',\n    level: 'good',\n    label: 'Good'\n  };\n  return {\n    color: '#3498DB',\n    level: 'excellent',\n    label: 'Excellent'\n  };\n};","map":{"version":3,"names":["DEBUG_METRICS","logMetricCalculation","sectionName","metricName","inputs","formula","result","assumptions","console","group","log","groupEnd","logAllMetricsSummary","scenario","metrics","purchasePrice","availableCash","cashSurplus","wacc","businessDSCR","businessROA","debtToEBITDA","interestCoverage","yourROI","cashOnCashReturn","paybackPeriod","targetRevenue","netProfitMargin","valuationMultiple","revenueGrowthRate","workingCapitalPercent","managementSalary","calculateSBAPayment","principal","rate","years","monthlyRate","payments","Math","pow","calculateSellerPayment","calculateExpectedValue","scenarios","probabilities","bestCase","mostLikely","worstCase","normalizeProbabilities","best","likely","worst","total","factor","round","validateSBADownPayment","value","max","validateDebtCoverage","ebitda","debtService","generateBellCurve","mean","min","stdDev","points","x","y","exp","push","calculateTotalCashRequired","params","sbaDownPaymentPercent","techInvestment","sellerFinancingPercent","dueDiligencePercent","professionalFeesPercent","contingencyPercent","sellerFinancingAmount","sbaLoanAmount","sbaDownPayment","workingCapital","dueDiligence","professionalFees","contingency","downPayment","calculateAnnualCashToPocket","netProfitMarginPercent","sbaPayment","sellerPayment","techInvestmentAmortized","netCashFlow","calculateDSCR","annualEBITDA","totalAnnualDebtService","calculateCashOnCashReturn","annualCashToPocket","totalCashInvested","calculateIRR","initialInvestment","cashFlows","tolerance","maxIterations","guess","i","npv","derivative","j","length","discountFactor","newGuess","abs","calculateMOIC","fiveYearProjections","totalCashReturned","reduce","sum","year","cashFlow","businessValueAtExit","year5EBITDA","exitMultiple","exitMultipleSource","calculation","calculatePaybackPeriod","cumulativeCashFlow","calculateEnhancedRiskScore","dscr","cashOnCash","score","calculateFinancingStructure","sellerFinancing","calculateFiveYearProjections","revenueGrowthRatePercent","sbaInterestRate","sellerInterestRate","projections","currentRevenue","revenue","calculateBusinessTargetingMetrics","maxSafePurchasePrice","minRequiredEBITDA","targetRevenueRange","recommendedMultipleRange","calculateRiskScore","riskScore","totalDebtService","debtCoverageRatio","workingCapitalRatio","calculateBusinessWACC","sbaLoan","totalBusinessDebt","amount","businessEquity","totalBusinessCapital","debtWeight","equityWeight","sbaAfterTaxCost","sellerAfterTaxCost","afterTaxDebtCost","equityCost","calculateBusinessEVA","businessEBITDA","businessCapitalInvested","businessWACC","taxRate","nopat","capitalCharge","calculateBusinessCashFlow","loanStructure","businessDebtService","annualPayment","businessFreeCashFlow","techInvestmentAnnual","businessRevenue","calculatePersonalCashFlow","businessCashFlow","personalLoans","ownershipData","fundingSources","ownerDistribution","yourOwnership","personalDebtService","houseEquity","taiwaneseLoan","personalNetCashFlow","personalCashInvested","personalCash","enabled","personalROI","calculatePersonalProjections","businessProjections","map","index","businessFCF","yourFCF","DSCR","cumulative","calculateRiskAdjustedOwnership","managementValue","personalCashRisk","taiwaneseLoanRisk","homeEquityRisk","sweatEquityValue","personalRiskAdjusted","investorContribution","additionalInvestment","totalRiskAdjustedEquity","baseOwnership","controlPremium","finalOwnership","investorOwnership","breakdown","calculateOwnershipCashFlows","totalBusinessCashFlow","investorAmount","personalCashAmount","investorPreferredReturn","yourPreferredReturn","totalPreferredReturns","remainingCashFlow","yourRemainingShare","investorRemainingShare","yourTotalCashFlow","investorTotalCashFlow","yourCashInvested","investorROI","preferredReturns","yours","investor","remainingCashFlowSplit","validateOwnership","businessMetrics","warnings","expectedInvestorReturn","totalCashFlow","verifyCalculations","testScenario","businessEVA","expectedRanges","ownership","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPercentage","toFixed","calculateTotalCashNeeded","variables","totalCashNeeded","allocateFundingByPriority","downPaymentNeeded","allocation","remainingDownPayment","used","downPaymentGap","totalAllocated","calculatePurchasePriceFinancing","fundingAllocation","amountNeedingBankFinancing","sbaLoanPrincipal","totalDownPaymentCovered","calculateBusinessDebtService","purchaseFinancing","sbaAnnualPayment","sellerAnnualPayment","totalBusinessDebtService","calculatePersonalDebtService","houseEquityPayment","taiwanesePayment","totalPersonalDebtService","calculatePriorityBasedWACC","totalFunding","weightedCost","afterTaxCostRates","Object","entries","forEach","source","calculatePriorityBasedOwnership","houseEquityRisk","totalPersonalRisk","totalEquity","calculatePersonalCostOfCapital","totalPersonalFunding","weightedPersonalCost","personalCostRates","personalSources","calculateScenariosWithPriority","targetRevenues","netMargin","downPaymentCalculation","calculateDownPaymentNeeded","personalCostOfCapital","fees","calculateCapitalUtilizationRate","getCapitalUtilizationStatus","color","level","label","calculateLeverageMultiplier","totalInvestment","getLeverageMultiplierStatus","multiplier","calculatePriceToRevenueRatio","getPriceToRevenueStatus","ratio","calculateEBITDAMargin","getEBITDAMarginStatus","margin","calculateBusinessCashConversion","getCashConversionStatus","conversion","calculateRevenueToInvestmentEfficiency","yourTotalInvestment","getRevenueEfficiencyStatus","efficiency","calculateRiskAdjustedReturn","riskFreeRate","getRiskAdjustedStatus","calculateIncomeReplacementRatio","yourNetAnnualGain","currentSalary","getIncomeReplacementStatus","calculateWealthBuildingVelocity","totalReturnMultiple","investmentPeriod","annualWealthCreation","getWealthVelocityStatus","velocity","calculateExitValueRange","conservativeMultiple","expectedMultiple","optimisticMultiple","conservative","expected","optimistic","calculateStressTestResults","baseROI","revenueStress","marginStress","rateStress","revenueStressROI","marginStressROI","rateStressROI","minROI","getStressTestStatus","calculateGrowthFundingCapacity","maxSustainableDebt","currentTotalDebt","projectedYear3CashFlow","leverageMultiplier","currentDebtCapacity","cashFlowGrowthCapacity","getGrowthCapacityStatus","capacity"],"sources":["/Users/juihanlin/Desktop/Biz Acquisition Calculator/src/utils/calculations.js"],"sourcesContent":["// Debug logging functions for comprehensive metric tracking\nexport const DEBUG_METRICS = true;\n\nexport function logMetricCalculation(sectionName, metricName, inputs, formula, result, assumptions = {}) {\n  if (!DEBUG_METRICS) return;\n  \n  console.group(`📊 ${sectionName} - ${metricName}`);\n  console.log(`🔢 INPUTS:`, inputs);\n  console.log(`📐 FORMULA: ${formula}`);\n  console.log(`📋 ASSUMPTIONS:`, assumptions);\n  console.log(`✅ RESULT: ${result}`);\n  console.log(`---`);\n  console.groupEnd();\n}\n\nexport function logAllMetricsSummary(scenario, metrics) {\n  if (!DEBUG_METRICS) return;\n  \n  console.group(\"📊 DASHBOARD METRICS SUMMARY\");\n  \n  console.log(\"🏢 DEAL STRUCTURE:\");\n  console.log(`  Purchase Price: ${metrics.purchasePrice}`);\n  console.log(`  Available Cash: ${metrics.availableCash}`);\n  console.log(`  Cash Surplus: ${metrics.cashSurplus}`);\n  console.log(`  WACC: ${metrics.wacc}%`);\n  \n  console.log(\"📈 BUSINESS HEALTH:\");\n  console.log(`  DSCR: ${metrics.businessDSCR}x`);\n  console.log(`  ROA: ${metrics.businessROA}%`);\n  console.log(`  Debt/EBITDA: ${metrics.debtToEBITDA}x`);\n  console.log(`  Interest Coverage: ${metrics.interestCoverage}x`);\n  \n  console.log(\"💰 PERSONAL RETURNS:\");\n  console.log(`  Your ROI: ${metrics.yourROI}%`);\n  console.log(`  Cash-on-Cash: ${metrics.cashOnCashReturn}%`);\n  console.log(`  Payback: ${metrics.paybackPeriod} years`);\n  \n  console.log(\"📊 KEY ASSUMPTIONS:\");\n  console.log(`  Target Revenue: ${scenario.targetRevenue}`);\n  console.log(`  Net Profit Margin: ${scenario.netProfitMargin}%`);\n  console.log(`  Valuation Multiple: ${scenario.valuationMultiple}x`);\n  console.log(`  Revenue Growth: ${scenario.revenueGrowthRate}%`);\n  console.log(`  Working Capital %: ${scenario.workingCapitalPercent}%`);\n  console.log(`  Management Salary: ${scenario.managementSalary}`);\n  \n  console.groupEnd();\n}\n\n// SBA loan payment calculation\nexport const calculateSBAPayment = (principal, rate = 0.115, years = 10) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return (principal * monthlyRate * Math.pow(1 + monthlyRate, payments)) / \n         (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Seller note payment calculation  \nexport const calculateSellerPayment = (principal, rate = 0.08, years = 5) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return (principal * monthlyRate * Math.pow(1 + monthlyRate, payments)) / \n         (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Expected value calculation\nexport const calculateExpectedValue = (scenarios, probabilities) => {\n  return (scenarios.bestCase * probabilities.bestCase / 100) +\n         (scenarios.mostLikely * probabilities.mostLikely / 100) +\n         (scenarios.worstCase * probabilities.worstCase / 100);\n};\n\n// Auto-normalize probabilities\nexport const normalizeProbabilities = (best, likely, worst) => {\n  const total = best + likely + worst;\n  if (total !== 100) {\n    const factor = 100 / total;\n    return {\n      best: Math.round(best * factor),\n      likely: Math.round(likely * factor),\n      worst: Math.round(worst * factor)\n    };\n  }\n  return { best, likely, worst };\n};\n\n// SBA minimum constraint\nexport const validateSBADownPayment = (value) => Math.max(value, 10);\n\n// Debt service coverage validation\nexport const validateDebtCoverage = (ebitda, debtService) => debtService / ebitda <= 0.8;\n\n// Generate bell curve data\nexport const generateBellCurve = (mean, min, max) => {\n  const stdDev = (max - min) / 6;\n  const points = [];\n  for (let x = min; x <= max; x += (max - min) / 100) {\n    const y = Math.exp(-0.5 * Math.pow((x - mean) / stdDev, 2));\n    points.push({ x, y });\n  }\n  return points;\n};\n\n// Calculate total cash required\nexport const calculateTotalCashRequired = (params) => {\n  const {\n    purchasePrice,\n    sbaDownPaymentPercent,\n    workingCapitalPercent,\n    targetRevenue,\n    techInvestment,\n    sellerFinancingPercent = 20, // Default seller financing percentage\n    dueDiligencePercent = 1.5,\n    professionalFeesPercent = 0.8,\n    contingencyPercent = 2.5\n  } = params;\n\n  // Calculate financing structure correctly\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  // Note: Total financing may exceed purchase price if both SBA and seller financing are used\n  // This is typical in SBA deals where seller financing is additional to SBA loan\n  \n  const workingCapital = targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * (dueDiligencePercent / 100);\n  const professionalFees = purchasePrice * (professionalFeesPercent / 100);\n  const contingency = purchasePrice * (contingencyPercent / 100);\n\n  return {\n    downPayment: sbaDownPayment,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    techInvestment,\n    contingency,\n    total: sbaDownPayment + workingCapital + dueDiligence + professionalFees + techInvestment + contingency\n  };\n};\n\n// Calculate annual cash to pocket\nexport const calculateAnnualCashToPocket = (params) => {\n  const {\n    targetRevenue,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment\n  } = params;\n\n  const ebitda = targetRevenue * (netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(sellerFinancingAmount);\n  const techInvestmentAmortized = techInvestment / 3; // Amortized over 3 years\n\n  return {\n    ebitda,\n    sbaPayment,\n    sellerPayment,\n    managementSalary,\n    techInvestmentAmortized,\n    netCashFlow: ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized\n  };\n};\n\n// Calculate Debt Service Coverage Ratio (DSCR)\nexport const calculateDSCR = (annualEBITDA, totalAnnualDebtService) => {\n  return annualEBITDA / totalAnnualDebtService;\n};\n\n// Calculate Cash-on-Cash Return\nexport const calculateCashOnCashReturn = (annualCashToPocket, totalCashInvested) => {\n  return (annualCashToPocket / totalCashInvested) * 100;\n};\n\n// Calculate IRR using Newton-Raphson method\nexport const calculateIRR = (initialInvestment, cashFlows) => {\n  const tolerance = 0.0001;\n  const maxIterations = 100;\n  let guess = 0.1; // Start with 10%\n\n  for (let i = 0; i < maxIterations; i++) {\n    let npv = -initialInvestment;\n    let derivative = 0;\n\n    for (let j = 0; j < cashFlows.length; j++) {\n      const discountFactor = Math.pow(1 + guess, j + 1);\n      npv += cashFlows[j] / discountFactor;\n      derivative -= (j + 1) * cashFlows[j] / (discountFactor * (1 + guess));\n    }\n\n    const newGuess = guess - npv / derivative;\n    \n    if (Math.abs(newGuess - guess) < tolerance) {\n      return newGuess * 100; // Return as percentage\n    }\n    \n    guess = newGuess;\n  }\n  \n  return null; // No convergence\n};\n\n// Calculate Multiple on Invested Capital (MOIC)\nexport const calculateMOIC = (totalCashInvested, fiveYearProjections) => {\n  const totalCashReturned = fiveYearProjections.reduce((sum, year) => sum + year.cashFlow, 0);\n  const businessValueAtExit = fiveYearProjections[4].ebitda * 4.2; // Assume same multiple\n  const result = (totalCashReturned + businessValueAtExit) / totalCashInvested;\n  \n  if (DEBUG_METRICS) {\n    logMetricCalculation(\n      \"Personal Returns\",\n      \"MOIC (Multiple on Invested Capital)\",\n      {\n        totalCashInvested,\n        totalCashReturned,\n        businessValueAtExit,\n        year5EBITDA: fiveYearProjections[4].ebitda,\n        exitMultiple: 4.2\n      },\n      \"MOIC = (Total Cash Returned + Business Value at Exit) ÷ Total Cash Invested\",\n      result,\n      {\n        exitMultipleSource: \"Assumed 4.2x EBITDA exit multiple\",\n        calculation: `(${totalCashReturned} + ${businessValueAtExit}) ÷ ${totalCashInvested} = ${result}x`\n      }\n    );\n  }\n  \n  return result;\n};\n\n// Calculate Payback Period\nexport const calculatePaybackPeriod = (totalCashInvested, fiveYearProjections) => {\n  let cumulativeCashFlow = 0;\n  for (let i = 0; i < fiveYearProjections.length; i++) {\n    cumulativeCashFlow += fiveYearProjections[i].cashFlow;\n    if (cumulativeCashFlow >= totalCashInvested) {\n      return i + 1 + ((totalCashInvested - (cumulativeCashFlow - fiveYearProjections[i].cashFlow)) / fiveYearProjections[i].cashFlow);\n    }\n  }\n  return '>5 years';\n};\n\n// Enhanced Risk Score Calculation\nexport const calculateEnhancedRiskScore = (dscr, cashOnCash, sellerFinancingPercent) => {\n  let score = 5; // Base score\n  \n  // DSCR scoring\n  if (dscr >= 1.5) score += 2;\n  else if (dscr >= 1.25) score += 1;\n  else score -= 2;\n  \n  // Cash-on-Cash scoring\n  if (cashOnCash >= 20) score += 2;\n  else if (cashOnCash >= 15) score += 1;\n  else if (cashOnCash < 10) score -= 1;\n  \n  // Seller financing scoring\n  if (sellerFinancingPercent >= 20) score += 1; // Seller has skin in game\n  \n  return Math.max(1, Math.min(10, score));\n};\n\n// Calculate financing structure\nexport const calculateFinancingStructure = (params) => {\n  const {\n    purchasePrice,\n    sellerFinancingPercent,\n    sbaDownPaymentPercent\n  } = params;\n\n  const sellerFinancing = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancing;\n  const downPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n\n  return {\n    purchasePrice,\n    sellerFinancing,\n    sbaLoanAmount,\n    downPayment\n  };\n};\n\n// Calculate 5-year projections for advanced metrics\nexport const calculateFiveYearProjections = (params) => {\n  const {\n    targetRevenue,\n    revenueGrowthRatePercent,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment,\n    sbaInterestRate = 11.5,\n    sellerInterestRate = 8\n  } = params;\n\n  const projections = [];\n  let currentRevenue = targetRevenue;\n\n  for (let year = 1; year <= 5; year++) {\n    const ebitda = currentRevenue * (netProfitMarginPercent / 100);\n    const sbaPayment = calculateSBAPayment(sbaLoanAmount, sbaInterestRate / 100, 10);\n    const sellerPayment = calculateSellerPayment(sellerFinancingAmount, sellerInterestRate / 100, 5);\n    const techInvestmentAmortized = year <= 3 ? techInvestment / 3 : 0;\n\n    const netCashFlow = ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized;\n\n    projections.push({\n      year,\n      revenue: currentRevenue,\n      ebitda,\n      cashFlow: netCashFlow\n    });\n\n    currentRevenue *= (1 + revenueGrowthRatePercent / 100);\n  }\n\n  return projections;\n};\n\n// Calculate business targeting metrics\nexport const calculateBusinessTargetingMetrics = (availableCash, targetRevenue) => {\n  return {\n    maxSafePurchasePrice: availableCash * 4, // Assuming 25% total cash requirement\n    minRequiredEBITDA: (availableCash * 4 * 0.12) / 1.25, // 12% debt service / 1.25x coverage\n    targetRevenueRange: {\n      min: targetRevenue * 0.8,\n      max: targetRevenue * 1.2\n    },\n    recommendedMultipleRange: {\n      min: 3.5,\n      max: 5.0\n    }\n  };\n};\n\n// Calculate risk score (1-10)\nexport const calculateRiskScore = (params) => {\n  let riskScore = 5; // Base score\n\n  // Debt service coverage ratio\n  const ebitda = params.targetRevenue * (params.netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(params.sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(params.sellerFinancingAmount);\n  const totalDebtService = sbaPayment + sellerPayment;\n  const debtCoverageRatio = ebitda / totalDebtService;\n\n  if (debtCoverageRatio < 1.25) riskScore += 3;\n  else if (debtCoverageRatio < 1.5) riskScore += 1;\n  else if (debtCoverageRatio > 2.0) riskScore -= 1;\n\n  // Working capital ratio\n  const workingCapitalRatio = (params.workingCapitalPercent / 100) / (params.netProfitMarginPercent / 100);\n  if (workingCapitalRatio > 0.8) riskScore += 2;\n  else if (workingCapitalRatio < 0.3) riskScore -= 1;\n\n  // SBA down payment\n  if (params.sbaDownPaymentPercent < 12) riskScore += 1;\n  else if (params.sbaDownPaymentPercent > 15) riskScore -= 1;\n\n  return Math.max(1, Math.min(10, riskScore));\n};\n\n// Calculate business-only WACC (excluding personal loans)\nexport const calculateBusinessWACC = (sbaLoan, sellerFinancing, purchasePrice) => {\n  const totalBusinessDebt = sbaLoan.amount + sellerFinancing.amount;\n  const businessEquity = purchasePrice - totalBusinessDebt;\n  const totalBusinessCapital = purchasePrice;\n  \n  if (totalBusinessCapital <= 0) return 0;\n  \n  const debtWeight = totalBusinessDebt / totalBusinessCapital;\n  const equityWeight = businessEquity / totalBusinessCapital;\n  \n  // Different tax treatment for different debt types\n  const sbaAfterTaxCost = 0.115 * 0.75; // 25% tax benefit for business-deductible SBA\n  const sellerAfterTaxCost = 0.08 * 0.9; // 10% tax benefit for seller financing (less deductible)\n  const afterTaxDebtCost = totalBusinessDebt > 0 ? \n    ((sbaLoan.amount * sbaAfterTaxCost + sellerFinancing.amount * sellerAfterTaxCost) / totalBusinessDebt) : 0;\n  const equityCost = 0.15; // Business equity cost\n  \n  return (debtWeight * afterTaxDebtCost) + (equityWeight * equityCost);\n};\n\n// Calculate business-level EVA (excluding personal loans)\nexport const calculateBusinessEVA = (businessEBITDA, businessCapitalInvested, businessWACC) => {\n  const taxRate = 0.25;\n  const nopat = businessEBITDA * (1 - taxRate); // Net Operating Profit After Tax\n  const capitalCharge = businessCapitalInvested * businessWACC;\n  return nopat - capitalCharge;\n};\n\n// Calculate business cash flow (company level only)\nexport const calculateBusinessCashFlow = (scenario, loanStructure, businessCapitalInvested) => {\n  const businessDebtService = \n    loanStructure.sbaLoan.annualPayment + \n    loanStructure.sellerFinancing.annualPayment;\n  \n  const businessFreeCashFlow = \n    scenario.ebitda - \n    businessDebtService - \n    scenario.managementSalary - \n    scenario.techInvestmentAnnual;\n  \n  const businessDSCR = businessDebtService > 0 ? scenario.ebitda / businessDebtService : 0;\n  \n  return {\n    businessRevenue: scenario.targetRevenue,\n    businessEBITDA: scenario.ebitda,\n    businessDebtService: businessDebtService,\n    businessFreeCashFlow: businessFreeCashFlow,\n    businessDSCR: businessDSCR,\n    businessROA: businessCapitalInvested > 0 ? (businessFreeCashFlow / businessCapitalInvested) * 100 : 0\n  };\n};\n\n// Calculate personal cash flow (owner level only)\nexport const calculatePersonalCashFlow = (businessCashFlow, personalLoans, ownershipData, fundingSources) => {\n  const ownerDistribution = businessCashFlow.businessFreeCashFlow * ownershipData.yourOwnership;\n  \n  const personalDebtService = \n    personalLoans.houseEquity.annualPayment + \n    personalLoans.taiwaneseLoan.annualPayment;\n  \n  const personalNetCashFlow = ownerDistribution - personalDebtService;\n  \n  const personalCashInvested = \n    (fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0) + \n    (fundingSources.houseEquity.enabled ? fundingSources.houseEquity.amount : 0) + \n    (fundingSources.taiwaneseLoan.enabled ? fundingSources.taiwaneseLoan.amount : 0);\n  \n  const personalROI = personalCashInvested > 0 ? \n    (personalNetCashFlow / personalCashInvested) * 100 : 0;\n  \n  return {\n    ownerDistribution: ownerDistribution,\n    personalDebtService: personalDebtService,\n    personalNetCashFlow: personalNetCashFlow,\n    personalCashInvested: personalCashInvested,\n    personalROI: personalROI\n  };\n};\n\n// Calculate personal projections\nexport const calculatePersonalProjections = (businessProjections, personalLoans, ownershipData) => {\n  return businessProjections.map((year, index) => {\n    const businessFCF = year.businessFreeCashFlow;\n    const ownerDistribution = businessFCF * ownershipData.yourOwnership;\n    const personalDebtService = personalLoans.total;\n    const yourFCF = ownerDistribution - personalDebtService;\n    \n    return {\n      year: index + 1,\n      businessFCF: businessFCF,\n      ownerDistribution: ownerDistribution,\n      yourFCF: yourFCF,\n      DSCR: year.businessDSCR,\n      cumulative: index === 0 ? yourFCF : (index > 0 ? businessProjections[index - 1].cumulative : 0) + yourFCF\n    };\n  });\n};\n\n// Calculate risk-adjusted ownership with fair methodology\nexport const calculateRiskAdjustedOwnership = (fundingSources, managementValue = 150000) => {\n  // Calculate risk-weighted contributions\n  const personalCashRisk = fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0;\n  \n  // Taiwanese loan: Personal guarantee = 80% risk weight\n  const taiwaneseLoanRisk = fundingSources.taiwaneseLoan.enabled ? \n    fundingSources.taiwaneseLoan.amount * 0.8 : 0;\n    \n  // Home equity: Personal asset at risk = 120% risk weight (higher risk premium)\n  const homeEquityRisk = fundingSources.houseEquity.enabled ? \n    fundingSources.houseEquity.amount * 1.2 : 0;\n    \n  // SBA loan: Personal guarantee but asset-backed = 30% risk weight\n  // const sbaRisk = 0; // SBA loan is debt, not equity contribution\n  \n  // Management/operational value (sweat equity)\n  const sweatEquityValue = managementValue;\n  \n  // Total personal risk-adjusted contribution\n  const personalRiskAdjusted = personalCashRisk + taiwaneseLoanRisk + homeEquityRisk + sweatEquityValue;\n  \n  // Outside investor contribution (100% risk weight)\n  const investorContribution = fundingSources.additionalInvestment.enabled ? \n    fundingSources.additionalInvestment.amount : 0;\n  \n  // Total risk-adjusted equity\n  const totalRiskAdjustedEquity = personalRiskAdjusted + investorContribution;\n  \n  // Base ownership calculation\n  const baseOwnership = totalRiskAdjustedEquity > 0 ? \n    personalRiskAdjusted / totalRiskAdjustedEquity : 1;\n  \n  // Dynamic control premium based on investor amount\n  const controlPremium = investorContribution > 0 ? \n    Math.min(0.05, investorContribution / 1000000) : 0; // Max 5%, scales with investment size\n  \n  // Final ownership (capped at 95% to be fair to investors)\n  const finalOwnership = Math.min(0.95, baseOwnership + controlPremium);\n  \n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      homeEquityRisk,\n      sweatEquityValue,\n      investorContribution,\n      controlPremium: controlPremium * 100\n    }\n  };\n};\n\n// Calculate ownership cash flows with preferred return structure\nexport const calculateOwnershipCashFlows = (totalBusinessCashFlow, ownershipData, fundingSources) => {\n  const investorAmount = fundingSources.additionalInvestment.enabled ? \n    fundingSources.additionalInvestment.amount : 0;\n  const personalCashAmount = fundingSources.personalCash.enabled ? \n    fundingSources.personalCash.amount : 0;\n  \n  // Investor preferred return (8% on their investment)\n  const investorPreferredReturn = investorAmount * 0.08;\n  \n  // Your preferred return (6% on personal cash)\n  const yourPreferredReturn = personalCashAmount * 0.06;\n  \n  // Total preferred returns\n  const totalPreferredReturns = investorPreferredReturn + yourPreferredReturn;\n  \n  // Remaining cash flow after preferred returns\n  const remainingCashFlow = Math.max(0, totalBusinessCashFlow - totalPreferredReturns);\n  \n  // Split remaining cash flow based on ownership percentages\n  const yourRemainingShare = remainingCashFlow * ownershipData.yourOwnership;\n  const investorRemainingShare = remainingCashFlow * ownershipData.investorOwnership;\n  \n  // Total distributions\n  const yourTotalCashFlow = yourPreferredReturn + yourRemainingShare;\n  const investorTotalCashFlow = investorPreferredReturn + investorRemainingShare;\n  \n  // Calculate ROI on actual cash invested (not risk-adjusted amounts)\n  const yourCashInvested = personalCashAmount;\n  const yourROI = yourCashInvested > 0 ? (yourTotalCashFlow / yourCashInvested) * 100 : 0;\n  \n  const investorROI = investorAmount > 0 ? (investorTotalCashFlow / investorAmount) * 100 : 0;\n  \n  return {\n    yourTotalCashFlow,\n    investorTotalCashFlow,\n    yourROI,\n    investorROI,\n    preferredReturns: {\n      yours: yourPreferredReturn,\n      investor: investorPreferredReturn\n    },\n    remainingCashFlowSplit: {\n      yours: yourRemainingShare,\n      investor: investorRemainingShare\n    }\n  };\n};\n\n// Validate ownership for reasonableness\nexport const validateOwnership = (ownershipData, fundingSources, businessMetrics) => {\n  const warnings = [];\n  \n  // Check if investor is getting fair deal\n  if (ownershipData.investorOwnership < 0.05 && fundingSources.additionalInvestment.amount > 50000) {\n    warnings.push(\"⚠️ Investor ownership very low - may not be attractive\");\n  }\n  \n  // Check if you're giving up too much\n  if (ownershipData.yourOwnership < 0.6 && fundingSources.personalCash.amount > fundingSources.additionalInvestment.amount) {\n    warnings.push(\"⚠️ Your ownership low despite majority funding\");\n  }\n  \n  // Check for reasonable investor return (simplified calculation)\n  const investorAmount = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n  const expectedInvestorReturn = investorAmount > 0 ? (businessMetrics.totalCashFlow * ownershipData.investorOwnership / investorAmount) * 100 : 0;\n  if (expectedInvestorReturn < 15 && investorAmount > 0) {\n    warnings.push(\"⚠️ Investor expected return below market (15%+)\");\n  }\n  \n  return warnings;\n};\n\n// Verification function to test calculations with known values\nexport const verifyCalculations = (testScenario) => {\n  const {\n    targetRevenue = 2500000,\n    netProfitMargin = 25,\n    valuationMultiple = 4,\n    sbaLoanAmount = 1500000,\n    sellerFinancingAmount = 500000,\n    personalCash = 550000,\n    additionalInvestment = 100000\n  } = testScenario;\n\n  // Test business calculations\n  const ebitda = targetRevenue * (netProfitMargin / 100);\n  const purchasePrice = ebitda * valuationMultiple;\n  const businessCapitalInvested = purchasePrice + (targetRevenue * 0.1) + (purchasePrice * 0.015) + (purchasePrice * 0.008);\n  \n  // Test WACC\n  const businessWACC = calculateBusinessWACC(\n    { amount: sbaLoanAmount, rate: 0.115 },\n    { amount: sellerFinancingAmount, rate: 0.08 },\n    purchasePrice\n  );\n  \n  // Test EVA\n  const businessEVA = calculateBusinessEVA(ebitda, businessCapitalInvested, businessWACC);\n  \n  // Test ownership\n  const fundingSources = {\n    personalCash: { enabled: true, amount: personalCash },\n    taiwaneseLoan: { enabled: true, amount: 725000 },\n    houseEquity: { enabled: false, amount: 200000 },\n    additionalInvestment: { enabled: true, amount: additionalInvestment }\n  };\n  \n  const ownershipData = calculateRiskAdjustedOwnership(fundingSources);\n  \n  return {\n    testScenario: {\n      targetRevenue,\n      ebitda,\n      purchasePrice,\n      businessCapitalInvested,\n      businessWACC: businessWACC * 100,\n      businessEVA,\n      ownershipData\n    },\n    expectedRanges: {\n      businessWACC: { min: 7, max: 12 },\n      businessEVA: { min: 0, max: 200000 },\n      ownership: { min: 0.6, max: 0.95 }\n    }\n  };\n};\n\n// Format currency\nexport const formatCurrency = (amount) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\n// Format percentage\nexport const formatPercentage = (value) => {\n  return `${value.toFixed(1)}%`;\n}; \n\n// FUNDING PRIORITY ALLOCATION FUNCTIONS\n// Calculate total cash needed for acquisition\nexport const calculateTotalCashNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n  const workingCapitalPercent = variables.workingCapital || 14.6;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * 0.015;\n  const professionalFees = purchasePrice * 0.008;\n  const contingency = purchasePrice * 0.025;\n  const techInvestment = variables.techInvestment || 100000;\n  \n  // Calculate SBA down payment correctly\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  const totalCashNeeded = sbaDownPayment + workingCapital + dueDiligence + professionalFees + contingency + techInvestment;\n  \n  return {\n    purchasePrice,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    contingency,\n    techInvestment,\n    sbaDownPayment,\n    totalCashNeeded\n  };\n};\n\n// Allocate funding by priority order (lowest to highest cost) - FOCUSED ON DOWN PAYMENT\nexport const allocateFundingByPriority = (downPaymentNeeded, fundingSources) => {\n  const allocation = {\n    taiwaneseLoan: 0,\n    personalCash: 0,\n    additionalInvestment: 0,\n    sellerFinancing: 0,\n    houseEquity: 0,\n    sbaLoan: 0\n  };\n  \n  let remainingDownPayment = downPaymentNeeded;\n  \n  // Priority 1: Taiwanese Loan (cheapest - 2.8%) - $300,000 available\n  if (fundingSources.taiwaneseLoan.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.taiwaneseLoan.amount);\n    allocation.taiwaneseLoan = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 2: Personal Cash (8% opportunity cost) - $50,000 available\n  if (fundingSources.personalCash.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.personalCash.amount);\n    allocation.personalCash = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 3: Additional Investment (15% expected return) - $50,000 available\n  if (fundingSources.additionalInvestment.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.additionalInvestment.amount);\n    allocation.additionalInvestment = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 4: Seller Financing (8%) - $0 available (disabled)\n  if (fundingSources.sellerFinancing.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.sellerFinancing.amount);\n    allocation.sellerFinancing = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 5: Home Equity Loan (8% but personal asset at risk) - $98,273 available\n  if (fundingSources.houseEquity.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.houseEquity.amount);\n    allocation.houseEquity = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 6: SBA Loan (11.5% - highest cost, use as last resort) - $0 available (disabled)\n  if (remainingDownPayment > 0) {\n    allocation.sbaLoan = remainingDownPayment; // Whatever is left\n  }\n  \n  return {\n    allocation,\n    downPaymentGap: remainingDownPayment < 0 ? 0 : remainingDownPayment,\n    totalAllocated: downPaymentNeeded - Math.max(0, remainingDownPayment),\n    downPaymentNeeded: downPaymentNeeded,\n    remainingDownPayment: Math.max(0, remainingDownPayment)\n  };\n};\n\n// Determine purchase price financing structure\nexport const calculatePurchasePriceFinancing = (purchasePrice, fundingAllocation, variables) => {\n  // Seller financing reduces the amount that needs bank financing\n  const sellerFinancingAmount = fundingAllocation.allocation.sellerFinancing || 0;\n  const amountNeedingBankFinancing = purchasePrice - sellerFinancingAmount;\n  \n  // SBA loan covers remaining purchase price\n  const sbaLoanAmount = Math.max(0, amountNeedingBankFinancing);\n  const sbaDownPaymentPercent = Math.max(variables.sbaDownPayment || 10, 10);\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  const sbaLoanPrincipal = sbaLoanAmount - sbaDownPayment;\n  \n  return {\n    sellerFinancingAmount,\n    sbaLoanAmount,\n    sbaDownPayment,\n    sbaLoanPrincipal,\n    totalDownPaymentCovered: sbaDownPayment // This comes from cash allocation\n  };\n};\n\n// Calculate business debt service with priority allocation\nexport const calculateBusinessDebtService = (purchaseFinancing) => {\n  // Only SBA loan and seller financing create debt service for the business\n  const sbaAnnualPayment = calculateSBAPayment(\n    purchaseFinancing.sbaLoanPrincipal, \n    0.115, \n    10\n  );\n  \n  const sellerAnnualPayment = calculateSellerPayment(\n    purchaseFinancing.sellerFinancingAmount, \n    0.08, \n    5\n  );\n  \n  return {\n    sbaAnnualPayment,\n    sellerAnnualPayment,\n    totalBusinessDebtService: sbaAnnualPayment + sellerAnnualPayment\n  };\n};\n\n// Calculate personal debt service with priority allocation\nexport const calculatePersonalDebtService = (fundingAllocation) => {\n  // Only personal loans create personal debt service\n  const houseEquityPayment = fundingAllocation.allocation.houseEquity > 0 ? \n    calculateSBAPayment(fundingAllocation.allocation.houseEquity, 0.08, 15) : 0;\n    \n  const taiwanesePayment = fundingAllocation.allocation.taiwaneseLoan > 0 ? \n    calculateSBAPayment(fundingAllocation.allocation.taiwaneseLoan, 0.028, 10) : 0;\n  \n  return {\n    houseEquityPayment,\n    taiwanesePayment,\n    totalPersonalDebtService: houseEquityPayment + taiwanesePayment\n  };\n};\n\n// Calculate WACC with priority-based allocation - ALL FUNDING SOURCES\nexport const calculatePriorityBasedWACC = (fundingAllocation, purchasePrice) => {\n  // WACC should include ALL funding sources used for the business acquisition\n  // Each source has its own after-tax cost of capital\n  \n  let totalFunding = 0;\n  let weightedCost = 0;\n  \n  // After-tax cost rates for each funding source\n  const afterTaxCostRates = {\n    taiwaneseLoan: 0.028 * 0.75, // 2.8% × 0.75 = 2.1% after-tax (if business deductible)\n    personalCash: 0.08 * 0.75, // 8% × 0.75 = 6% after-tax (opportunity cost with tax benefit)\n    additionalInvestment: 0.15, // 15% equity cost (no tax benefit)\n    sellerFinancing: 0.08 * 0.75, // 8% × 0.75 = 6% after-tax\n    houseEquity: 0.08, // 8% (personal debt, no business tax benefit)\n    sbaLoan: 0.115 * 0.75 // 11.5% × 0.75 = 8.6% after-tax\n  };\n  \n  // Calculate weighted average cost of capital across all funding sources\n  Object.entries(fundingAllocation.allocation).forEach(([source, amount]) => {\n    if (amount > 0) {\n      totalFunding += amount;\n      weightedCost += amount * afterTaxCostRates[source];\n    }\n  });\n  \n  return totalFunding > 0 ? (weightedCost / totalFunding) * 100 : 0;\n};\n\n// Calculate ownership with priority-based allocation\nexport const calculatePriorityBasedOwnership = (fundingAllocation) => {\n  // Risk-adjusted personal contributions based on ACTUAL allocated amounts\n  const personalCashRisk = fundingAllocation.allocation.personalCash * 1.0;\n  const taiwaneseLoanRisk = fundingAllocation.allocation.taiwaneseLoan * 0.8; // Personal guarantee\n  const houseEquityRisk = fundingAllocation.allocation.houseEquity * 1.2; // Personal asset risk\n  \n  const totalPersonalRisk = personalCashRisk + taiwaneseLoanRisk + houseEquityRisk;\n  const investorContribution = fundingAllocation.allocation.additionalInvestment;\n  const totalEquity = totalPersonalRisk + investorContribution;\n  \n  const finalOwnership = totalEquity > 0 ? totalPersonalRisk / totalEquity : 1; // Removed control premium\n  \n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      houseEquityRisk,\n      investorContribution\n    }\n  };\n};\n\n// Calculate personal cost of capital (for personal funding sources)\nexport const calculatePersonalCostOfCapital = (fundingAllocation) => {\n  let totalPersonalFunding = 0;\n  let weightedPersonalCost = 0;\n  \n  // Only consider personal funding sources: Taiwanese Loan, Personal Cash, Home Equity\n  const personalCostRates = {\n    taiwaneseLoan: 0.028, // 2.8% - personal loan rate\n    personalCash: 0.08, // 8% opportunity cost\n    houseEquity: 0.08, // 8% home equity rate\n    // Excluded: additionalInvestment, sellerFinancing, sbaLoan (not personal funding)\n  };\n  \n  // Only calculate for personal funding sources\n  const personalSources = ['taiwaneseLoan', 'personalCash', 'houseEquity'];\n  \n  personalSources.forEach(source => {\n    const amount = fundingAllocation.allocation[source] || 0;\n    if (amount > 0) {\n      totalPersonalFunding += amount;\n      weightedPersonalCost += amount * personalCostRates[source];\n    }\n  });\n  \n  return totalPersonalFunding > 0 ? (weightedPersonalCost / totalPersonalFunding) * 100 : 0;\n};\n\n// Main scenario calculation with priority-based funding\nexport const calculateScenariosWithPriority = (targetRevenues, variables, fundingSources) => {\n  return targetRevenues.map(revenue => {\n    // Step 1: Calculate business metrics\n    const netMargin = variables.netProfitMargin || 25;\n    const valuationMultiple = variables.valuationMultiple || 4;\n    const ebitda = revenue * (netMargin / 100);\n    const purchasePrice = ebitda * valuationMultiple;\n    \n    const businessMetrics = {\n      targetRevenue: revenue,\n      ebitda: ebitda,\n      purchasePrice: purchasePrice\n    };\n    \n    // Step 2: Calculate down payment needed (same logic as Scenario Comparison)\n    const downPaymentCalculation = calculateDownPaymentNeeded(businessMetrics, variables);\n    \n    // Step 3: Allocate funding by priority based on down payment needed\n    const fundingAllocation = allocateFundingByPriority(\n      downPaymentCalculation.downPaymentNeeded, \n      fundingSources\n    );\n    \n    // Step 4: Calculate purchase price financing\n    const purchaseFinancing = calculatePurchasePriceFinancing(\n      businessMetrics.purchasePrice, \n      fundingAllocation,\n      variables\n    );\n    \n    // Step 5: Calculate debt service\n    const businessDebtService = calculateBusinessDebtService(purchaseFinancing);\n    const personalDebtService = calculatePersonalDebtService(fundingAllocation);\n    \n    // Step 6: Calculate ownership, WACC, and personal cost of capital\n    const ownership = calculatePriorityBasedOwnership(fundingAllocation);\n    const wacc = calculatePriorityBasedWACC(fundingAllocation, businessMetrics.purchasePrice);\n    const personalCostOfCapital = calculatePersonalCostOfCapital(fundingAllocation);\n    \n    // Step 7: Calculate cash flows\n    const businessCashFlow = businessMetrics.ebitda - \n      businessDebtService.totalBusinessDebtService - \n      (variables.managementSalary || 100000) - \n      (variables.techInvestment || 100000) / 3;\n    \n    const ownerDistribution = businessCashFlow * ownership.yourOwnership;\n    const personalNetCashFlow = ownerDistribution - personalDebtService.totalPersonalDebtService;\n    \n    return {\n      ...businessMetrics,\n      ...downPaymentCalculation,\n      fundingAllocation,\n      purchaseFinancing,\n      businessDebtService,\n      personalDebtService,\n      ownership,\n      wacc,\n      personalCostOfCapital,\n      businessCashFlow,\n      ownerDistribution,\n      personalNetCashFlow,\n      personalROI: (personalNetCashFlow / (fundingAllocation.allocation.personalCash + fundingAllocation.allocation.taiwaneseLoan + fundingAllocation.allocation.houseEquity)) * 100\n    };\n  });\n}; \n\n// Calculate down payment needed using the same logic as Scenario Comparison\nexport const calculateDownPaymentNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n  \n  // Calculate SBA down payment\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  // Calculate working capital and fees (same as Scenario Comparison)\n  const workingCapitalPercent = variables.workingCapital || 7.9;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const fees = purchasePrice * 0.025; // 2.5% total fees (due diligence + professional fees)\n  \n  // Down Payment Needed = SBA Down Payment + Working Capital + Fees\n  const downPaymentNeeded = sbaDownPayment + workingCapital + fees;\n  \n  return {\n    sbaDownPayment,\n    workingCapital,\n    fees,\n    downPaymentNeeded\n  };\n}; \n\n// NEW METRICS CALCULATIONS\n\n// Capital Utilization Rate\nexport const calculateCapitalUtilizationRate = (totalAllocated, availableCash) => {\n  return availableCash > 0 ? (totalAllocated / availableCash) * 100 : 0;\n};\n\nexport const getCapitalUtilizationStatus = (rate) => {\n  if (rate > 95) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (rate > 85) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (rate > 65) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Leverage Multiplier\nexport const calculateLeverageMultiplier = (totalInvestment, personalCashInvested) => {\n  return personalCashInvested > 0 ? totalInvestment / personalCashInvested : 0;\n};\n\nexport const getLeverageMultiplierStatus = (multiplier) => {\n  if (multiplier < 3) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (multiplier < 5) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (multiplier < 8) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Price-to-Revenue Ratio\nexport const calculatePriceToRevenueRatio = (purchasePrice, targetRevenue) => {\n  return targetRevenue > 0 ? purchasePrice / targetRevenue : 0;\n};\n\nexport const getPriceToRevenueStatus = (ratio) => {\n  if (ratio > 1.2) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (ratio > 1.0) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (ratio > 0.8) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// EBITDA Margin\nexport const calculateEBITDAMargin = (ebitda, revenue) => {\n  return revenue > 0 ? (ebitda / revenue) * 100 : 0;\n};\n\nexport const getEBITDAMarginStatus = (margin) => {\n  if (margin < 15) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (margin < 18) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (margin < 22) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Business Cash Conversion\nexport const calculateBusinessCashConversion = (businessFreeCashFlow, businessEBITDA) => {\n  return businessEBITDA > 0 ? (businessFreeCashFlow / businessEBITDA) * 100 : 0;\n};\n\nexport const getCashConversionStatus = (conversion) => {\n  if (conversion < 15) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (conversion < 20) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (conversion < 30) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Revenue-to-Investment Efficiency\nexport const calculateRevenueToInvestmentEfficiency = (targetRevenue, yourTotalInvestment) => {\n  return yourTotalInvestment > 0 ? targetRevenue / yourTotalInvestment : 0;\n};\n\nexport const getRevenueEfficiencyStatus = (efficiency) => {\n  if (efficiency < 3) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (efficiency < 4) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (efficiency < 6) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Risk-Adjusted Return\nexport const calculateRiskAdjustedReturn = (yourROI, riskFreeRate = 4.5, riskScore) => {\n  return riskScore > 0 ? (yourROI - riskFreeRate) / riskScore : 0;\n};\n\nexport const getRiskAdjustedStatus = (ratio) => {\n  if (ratio < 0.5) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (ratio < 1.0) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (ratio < 1.5) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Income Replacement Ratio\nexport const calculateIncomeReplacementRatio = (yourNetAnnualGain, currentSalary) => {\n  return currentSalary > 0 ? (yourNetAnnualGain / currentSalary) * 100 : 0;\n};\n\nexport const getIncomeReplacementStatus = (ratio) => {\n  if (ratio < 40) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (ratio < 80) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (ratio < 120) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Wealth Building Velocity\nexport const calculateWealthBuildingVelocity = (totalReturnMultiple, investmentPeriod = 5) => {\n  const annualWealthCreation = Math.pow(totalReturnMultiple, 1/investmentPeriod) - 1;\n  return annualWealthCreation * 100;\n};\n\nexport const getWealthVelocityStatus = (velocity) => {\n  if (velocity < 20) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (velocity < 40) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (velocity < 80) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// 5-Year Exit Value Range\nexport const calculateExitValueRange = (year5EBITDA, yourOwnership, conservativeMultiple = 3.0, expectedMultiple = 3.59, optimisticMultiple = 4.5) => {\n  return {\n    conservative: year5EBITDA * conservativeMultiple * yourOwnership,\n    expected: year5EBITDA * expectedMultiple * yourOwnership,\n    optimistic: year5EBITDA * optimisticMultiple * yourOwnership\n  };\n};\n\n// Stress Test Results\nexport const calculateStressTestResults = (baseROI, revenueStress = -20, marginStress = -300, rateStress = 200) => {\n  // Simplified stress test calculations\n  const revenueStressROI = baseROI * (1 + revenueStress / 100);\n  const marginStressROI = baseROI * (1 + marginStress / 10000); // basis points\n  const rateStressROI = baseROI * (1 - rateStress / 10000); // basis points\n  \n  const minROI = Math.min(revenueStressROI, marginStressROI, rateStressROI);\n  \n  return {\n    revenueStressROI,\n    marginStressROI,\n    rateStressROI,\n    minROI\n  };\n};\n\nexport const getStressTestStatus = (minROI) => {\n  if (minROI < 5) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (minROI < 7) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (minROI < 10) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n};\n\n// Growth Funding Capacity\nexport const calculateGrowthFundingCapacity = (maxSustainableDebt, currentTotalDebt, projectedYear3CashFlow, leverageMultiplier) => {\n  const currentDebtCapacity = maxSustainableDebt - currentTotalDebt;\n  const cashFlowGrowthCapacity = projectedYear3CashFlow * leverageMultiplier;\n  return Math.min(currentDebtCapacity, cashFlowGrowthCapacity);\n};\n\nexport const getGrowthCapacityStatus = (capacity) => {\n  if (capacity < 50000) return { color: '#E74C3C', level: 'critical', label: 'Critical' };\n  if (capacity < 100000) return { color: '#F1C40F', level: 'below-target', label: 'Below Target' };\n  if (capacity < 200000) return { color: '#27AE60', level: 'good', label: 'Good' };\n  return { color: '#3498DB', level: 'excellent', label: 'Excellent' };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}