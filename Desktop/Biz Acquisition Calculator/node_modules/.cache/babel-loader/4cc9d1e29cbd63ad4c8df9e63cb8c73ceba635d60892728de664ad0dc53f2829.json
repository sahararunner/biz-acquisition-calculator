{"ast":null,"code":"// SBA loan payment calculation\nexport const calculateSBAPayment = (principal, rate = 0.115, years = 10) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return principal * monthlyRate * Math.pow(1 + monthlyRate, payments) / (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Seller note payment calculation  \nexport const calculateSellerPayment = (principal, rate = 0.08, years = 5) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return principal * monthlyRate * Math.pow(1 + monthlyRate, payments) / (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Expected value calculation\nexport const calculateExpectedValue = (scenarios, probabilities) => {\n  return scenarios.bestCase * probabilities.bestCase / 100 + scenarios.mostLikely * probabilities.mostLikely / 100 + scenarios.worstCase * probabilities.worstCase / 100;\n};\n\n// Auto-normalize probabilities\nexport const normalizeProbabilities = (best, likely, worst) => {\n  const total = best + likely + worst;\n  if (total !== 100) {\n    const factor = 100 / total;\n    return {\n      best: Math.round(best * factor),\n      likely: Math.round(likely * factor),\n      worst: Math.round(worst * factor)\n    };\n  }\n  return {\n    best,\n    likely,\n    worst\n  };\n};\n\n// SBA minimum constraint\nexport const validateSBADownPayment = value => Math.max(value, 10);\n\n// Debt service coverage validation\nexport const validateDebtCoverage = (ebitda, debtService) => debtService / ebitda <= 0.8;\n\n// Generate bell curve data\nexport const generateBellCurve = (mean, min, max) => {\n  const stdDev = (max - min) / 6;\n  const points = [];\n  for (let x = min; x <= max; x += (max - min) / 100) {\n    const y = Math.exp(-0.5 * Math.pow((x - mean) / stdDev, 2));\n    points.push({\n      x,\n      y\n    });\n  }\n  return points;\n};\n\n// Calculate total cash required\nexport const calculateTotalCashRequired = params => {\n  const {\n    purchasePrice,\n    sbaDownPaymentPercent,\n    workingCapitalPercent,\n    targetRevenue,\n    techInvestment,\n    sellerFinancingPercent = 20,\n    // Default seller financing percentage\n    dueDiligencePercent = 1.5,\n    professionalFeesPercent = 0.8,\n    contingencyPercent = 2.5\n  } = params;\n\n  // Calculate financing structure correctly\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n\n  // Note: Total financing may exceed purchase price if both SBA and seller financing are used\n  // This is typical in SBA deals where seller financing is additional to SBA loan\n\n  const workingCapital = targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * (dueDiligencePercent / 100);\n  const professionalFees = purchasePrice * (professionalFeesPercent / 100);\n  const contingency = purchasePrice * (contingencyPercent / 100);\n  return {\n    downPayment: sbaDownPayment,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    techInvestment,\n    contingency,\n    total: sbaDownPayment + workingCapital + dueDiligence + professionalFees + techInvestment + contingency\n  };\n};\n\n// Calculate annual cash to pocket\nexport const calculateAnnualCashToPocket = params => {\n  const {\n    targetRevenue,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment\n  } = params;\n  const ebitda = targetRevenue * (netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(sellerFinancingAmount);\n  const techInvestmentAmortized = techInvestment / 3; // Amortized over 3 years\n\n  return {\n    ebitda,\n    sbaPayment,\n    sellerPayment,\n    managementSalary,\n    techInvestmentAmortized,\n    netCashFlow: ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized\n  };\n};\n\n// Calculate Debt Service Coverage Ratio (DSCR)\nexport const calculateDSCR = (annualEBITDA, totalAnnualDebtService) => {\n  return annualEBITDA / totalAnnualDebtService;\n};\n\n// Calculate Cash-on-Cash Return\nexport const calculateCashOnCashReturn = (annualCashToPocket, totalCashInvested) => {\n  return annualCashToPocket / totalCashInvested * 100;\n};\n\n// Calculate IRR using Newton-Raphson method\nexport const calculateIRR = (initialInvestment, cashFlows) => {\n  const tolerance = 0.0001;\n  const maxIterations = 100;\n  let guess = 0.1; // Start with 10%\n\n  for (let i = 0; i < maxIterations; i++) {\n    let npv = -initialInvestment;\n    let derivative = 0;\n    for (let j = 0; j < cashFlows.length; j++) {\n      const discountFactor = Math.pow(1 + guess, j + 1);\n      npv += cashFlows[j] / discountFactor;\n      derivative -= (j + 1) * cashFlows[j] / (discountFactor * (1 + guess));\n    }\n    const newGuess = guess - npv / derivative;\n    if (Math.abs(newGuess - guess) < tolerance) {\n      return newGuess * 100; // Return as percentage\n    }\n    guess = newGuess;\n  }\n  return null; // No convergence\n};\n\n// Calculate Multiple on Invested Capital (MOIC)\nexport const calculateMOIC = (totalCashInvested, fiveYearProjections) => {\n  const totalCashReturned = fiveYearProjections.reduce((sum, year) => sum + year.cashFlow, 0);\n  const businessValueAtExit = fiveYearProjections[4].ebitda * 4.2; // Assume same multiple\n  return (totalCashReturned + businessValueAtExit) / totalCashInvested;\n};\n\n// Calculate Payback Period\nexport const calculatePaybackPeriod = (totalCashInvested, fiveYearProjections) => {\n  let cumulativeCashFlow = 0;\n  for (let i = 0; i < fiveYearProjections.length; i++) {\n    cumulativeCashFlow += fiveYearProjections[i].cashFlow;\n    if (cumulativeCashFlow >= totalCashInvested) {\n      return i + 1 + (totalCashInvested - (cumulativeCashFlow - fiveYearProjections[i].cashFlow)) / fiveYearProjections[i].cashFlow;\n    }\n  }\n  return '>5 years';\n};\n\n// Enhanced Risk Score Calculation\nexport const calculateEnhancedRiskScore = (dscr, cashOnCash, sellerFinancingPercent) => {\n  let score = 5; // Base score\n\n  // DSCR scoring\n  if (dscr >= 1.5) score += 2;else if (dscr >= 1.25) score += 1;else score -= 2;\n\n  // Cash-on-Cash scoring\n  if (cashOnCash >= 20) score += 2;else if (cashOnCash >= 15) score += 1;else if (cashOnCash < 10) score -= 1;\n\n  // Seller financing scoring\n  if (sellerFinancingPercent >= 20) score += 1; // Seller has skin in game\n\n  return Math.max(1, Math.min(10, score));\n};\n\n// Calculate financing structure\nexport const calculateFinancingStructure = params => {\n  const {\n    purchasePrice,\n    sellerFinancingPercent,\n    sbaDownPaymentPercent\n  } = params;\n  const sellerFinancing = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancing;\n  const downPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  return {\n    purchasePrice,\n    sellerFinancing,\n    sbaLoanAmount,\n    downPayment\n  };\n};\n\n// Calculate 5-year projections for advanced metrics\nexport const calculateFiveYearProjections = params => {\n  const {\n    targetRevenue,\n    revenueGrowthRatePercent,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment,\n    sbaInterestRate = 11.5,\n    sellerInterestRate = 8\n  } = params;\n  const projections = [];\n  let currentRevenue = targetRevenue;\n  for (let year = 1; year <= 5; year++) {\n    const ebitda = currentRevenue * (netProfitMarginPercent / 100);\n    const sbaPayment = calculateSBAPayment(sbaLoanAmount, sbaInterestRate / 100, 10);\n    const sellerPayment = calculateSellerPayment(sellerFinancingAmount, sellerInterestRate / 100, 5);\n    const techInvestmentAmortized = year <= 3 ? techInvestment / 3 : 0;\n    const netCashFlow = ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized;\n    projections.push({\n      year,\n      revenue: currentRevenue,\n      ebitda,\n      cashFlow: netCashFlow\n    });\n    currentRevenue *= 1 + revenueGrowthRatePercent / 100;\n  }\n  return projections;\n};\n\n// Calculate business targeting metrics\nexport const calculateBusinessTargetingMetrics = (availableCash, targetRevenue) => {\n  return {\n    maxSafePurchasePrice: availableCash * 4,\n    // Assuming 25% total cash requirement\n    minRequiredEBITDA: availableCash * 4 * 0.12 / 1.25,\n    // 12% debt service / 1.25x coverage\n    targetRevenueRange: {\n      min: targetRevenue * 0.8,\n      max: targetRevenue * 1.2\n    },\n    recommendedMultipleRange: {\n      min: 3.5,\n      max: 5.0\n    }\n  };\n};\n\n// Calculate risk score (1-10)\nexport const calculateRiskScore = params => {\n  let riskScore = 5; // Base score\n\n  // Debt service coverage ratio\n  const ebitda = params.targetRevenue * (params.netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(params.sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(params.sellerFinancingAmount);\n  const totalDebtService = sbaPayment + sellerPayment;\n  const debtCoverageRatio = ebitda / totalDebtService;\n  if (debtCoverageRatio < 1.25) riskScore += 3;else if (debtCoverageRatio < 1.5) riskScore += 1;else if (debtCoverageRatio > 2.0) riskScore -= 1;\n\n  // Working capital ratio\n  const workingCapitalRatio = params.workingCapitalPercent / 100 / (params.netProfitMarginPercent / 100);\n  if (workingCapitalRatio > 0.8) riskScore += 2;else if (workingCapitalRatio < 0.3) riskScore -= 1;\n\n  // SBA down payment\n  if (params.sbaDownPaymentPercent < 12) riskScore += 1;else if (params.sbaDownPaymentPercent > 15) riskScore -= 1;\n  return Math.max(1, Math.min(10, riskScore));\n};\n\n// Calculate business-only WACC (excluding personal loans)\nexport const calculateBusinessWACC = (sbaLoan, sellerFinancing, purchasePrice) => {\n  const totalBusinessDebt = sbaLoan.amount + sellerFinancing.amount;\n  const businessEquity = purchasePrice - totalBusinessDebt;\n  const totalBusinessCapital = purchasePrice;\n  if (totalBusinessCapital <= 0) return 0;\n  const debtWeight = totalBusinessDebt / totalBusinessCapital;\n  const equityWeight = businessEquity / totalBusinessCapital;\n\n  // Different tax treatment for different debt types\n  const sbaAfterTaxCost = 0.115 * 0.75; // 25% tax benefit for business-deductible SBA\n  const sellerAfterTaxCost = 0.08 * 0.9; // 10% tax benefit for seller financing (less deductible)\n  const afterTaxDebtCost = totalBusinessDebt > 0 ? (sbaLoan.amount * sbaAfterTaxCost + sellerFinancing.amount * sellerAfterTaxCost) / totalBusinessDebt : 0;\n  const equityCost = 0.15; // Business equity cost\n\n  return debtWeight * afterTaxDebtCost + equityWeight * equityCost;\n};\n\n// Calculate business-level EVA (excluding personal loans)\nexport const calculateBusinessEVA = (businessEBITDA, businessCapitalInvested, businessWACC) => {\n  const taxRate = 0.25;\n  const nopat = businessEBITDA * (1 - taxRate); // Net Operating Profit After Tax\n  const capitalCharge = businessCapitalInvested * businessWACC;\n  return nopat - capitalCharge;\n};\n\n// Calculate business cash flow (company level only)\nexport const calculateBusinessCashFlow = (scenario, loanStructure, businessCapitalInvested) => {\n  const businessDebtService = loanStructure.sbaLoan.annualPayment + loanStructure.sellerFinancing.annualPayment;\n  const businessFreeCashFlow = scenario.ebitda - businessDebtService - scenario.managementSalary - scenario.techInvestmentAnnual;\n  const businessDSCR = businessDebtService > 0 ? scenario.ebitda / businessDebtService : 0;\n  return {\n    businessRevenue: scenario.targetRevenue,\n    businessEBITDA: scenario.ebitda,\n    businessDebtService: businessDebtService,\n    businessFreeCashFlow: businessFreeCashFlow,\n    businessDSCR: businessDSCR,\n    businessROA: businessCapitalInvested > 0 ? businessFreeCashFlow / businessCapitalInvested * 100 : 0\n  };\n};\n\n// Calculate personal cash flow (owner level only)\nexport const calculatePersonalCashFlow = (businessCashFlow, personalLoans, ownershipData, fundingSources) => {\n  const ownerDistribution = businessCashFlow.businessFreeCashFlow * ownershipData.yourOwnership;\n  const personalDebtService = personalLoans.houseEquity.annualPayment + personalLoans.taiwaneseLoan.annualPayment;\n  const personalNetCashFlow = ownerDistribution - personalDebtService;\n  const personalCashInvested = (fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0) + (fundingSources.houseEquity.enabled ? fundingSources.houseEquity.amount : 0) + (fundingSources.taiwaneseLoan.enabled ? fundingSources.taiwaneseLoan.amount : 0);\n  const personalROI = personalCashInvested > 0 ? personalNetCashFlow / personalCashInvested * 100 : 0;\n  return {\n    ownerDistribution: ownerDistribution,\n    personalDebtService: personalDebtService,\n    personalNetCashFlow: personalNetCashFlow,\n    personalCashInvested: personalCashInvested,\n    personalROI: personalROI\n  };\n};\n\n// Calculate personal projections\nexport const calculatePersonalProjections = (businessProjections, personalLoans, ownershipData) => {\n  return businessProjections.map((year, index) => {\n    const businessFCF = year.businessFreeCashFlow;\n    const ownerDistribution = businessFCF * ownershipData.yourOwnership;\n    const personalDebtService = personalLoans.total;\n    const yourFCF = ownerDistribution - personalDebtService;\n    return {\n      year: index + 1,\n      businessFCF: businessFCF,\n      ownerDistribution: ownerDistribution,\n      yourFCF: yourFCF,\n      DSCR: year.businessDSCR,\n      cumulative: index === 0 ? yourFCF : (index > 0 ? businessProjections[index - 1].cumulative : 0) + yourFCF\n    };\n  });\n};\n\n// Calculate risk-adjusted ownership with fair methodology\nexport const calculateRiskAdjustedOwnership = (fundingSources, managementValue = 150000) => {\n  // Calculate risk-weighted contributions\n  const personalCashRisk = fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0;\n\n  // Taiwanese loan: Personal guarantee = 80% risk weight\n  const taiwaneseLoanRisk = fundingSources.taiwaneseLoan.enabled ? fundingSources.taiwaneseLoan.amount * 0.8 : 0;\n\n  // Home equity: Personal asset at risk = 120% risk weight (higher risk premium)\n  const homeEquityRisk = fundingSources.houseEquity.enabled ? fundingSources.houseEquity.amount * 1.2 : 0;\n\n  // SBA loan: Personal guarantee but asset-backed = 30% risk weight\n  // const sbaRisk = 0; // SBA loan is debt, not equity contribution\n\n  // Management/operational value (sweat equity)\n  const sweatEquityValue = managementValue;\n\n  // Total personal risk-adjusted contribution\n  const personalRiskAdjusted = personalCashRisk + taiwaneseLoanRisk + homeEquityRisk + sweatEquityValue;\n\n  // Outside investor contribution (100% risk weight)\n  const investorContribution = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n\n  // Total risk-adjusted equity\n  const totalRiskAdjustedEquity = personalRiskAdjusted + investorContribution;\n\n  // Base ownership calculation\n  const baseOwnership = totalRiskAdjustedEquity > 0 ? personalRiskAdjusted / totalRiskAdjustedEquity : 1;\n\n  // Dynamic control premium based on investor amount\n  const controlPremium = investorContribution > 0 ? Math.min(0.05, investorContribution / 1000000) : 0; // Max 5%, scales with investment size\n\n  // Final ownership (capped at 95% to be fair to investors)\n  const finalOwnership = Math.min(0.95, baseOwnership + controlPremium);\n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      homeEquityRisk,\n      sweatEquityValue,\n      investorContribution,\n      controlPremium: controlPremium * 100\n    }\n  };\n};\n\n// Calculate ownership cash flows with preferred return structure\nexport const calculateOwnershipCashFlows = (totalBusinessCashFlow, ownershipData, fundingSources) => {\n  const investorAmount = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n  const personalCashAmount = fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0;\n\n  // Investor preferred return (8% on their investment)\n  const investorPreferredReturn = investorAmount * 0.08;\n\n  // Your preferred return (6% on personal cash)\n  const yourPreferredReturn = personalCashAmount * 0.06;\n\n  // Total preferred returns\n  const totalPreferredReturns = investorPreferredReturn + yourPreferredReturn;\n\n  // Remaining cash flow after preferred returns\n  const remainingCashFlow = Math.max(0, totalBusinessCashFlow - totalPreferredReturns);\n\n  // Split remaining cash flow based on ownership percentages\n  const yourRemainingShare = remainingCashFlow * ownershipData.yourOwnership;\n  const investorRemainingShare = remainingCashFlow * ownershipData.investorOwnership;\n\n  // Total distributions\n  const yourTotalCashFlow = yourPreferredReturn + yourRemainingShare;\n  const investorTotalCashFlow = investorPreferredReturn + investorRemainingShare;\n\n  // Calculate ROI on actual cash invested (not risk-adjusted amounts)\n  const yourCashInvested = personalCashAmount;\n  const yourROI = yourCashInvested > 0 ? yourTotalCashFlow / yourCashInvested * 100 : 0;\n  const investorROI = investorAmount > 0 ? investorTotalCashFlow / investorAmount * 100 : 0;\n  return {\n    yourTotalCashFlow,\n    investorTotalCashFlow,\n    yourROI,\n    investorROI,\n    preferredReturns: {\n      yours: yourPreferredReturn,\n      investor: investorPreferredReturn\n    },\n    remainingCashFlowSplit: {\n      yours: yourRemainingShare,\n      investor: investorRemainingShare\n    }\n  };\n};\n\n// Validate ownership for reasonableness\nexport const validateOwnership = (ownershipData, fundingSources, businessMetrics) => {\n  const warnings = [];\n\n  // Check if investor is getting fair deal\n  if (ownershipData.investorOwnership < 0.05 && fundingSources.additionalInvestment.amount > 50000) {\n    warnings.push(\"⚠️ Investor ownership very low - may not be attractive\");\n  }\n\n  // Check if you're giving up too much\n  if (ownershipData.yourOwnership < 0.6 && fundingSources.personalCash.amount > fundingSources.additionalInvestment.amount) {\n    warnings.push(\"⚠️ Your ownership low despite majority funding\");\n  }\n\n  // Check for reasonable investor return (simplified calculation)\n  const investorAmount = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n  const expectedInvestorReturn = investorAmount > 0 ? businessMetrics.totalCashFlow * ownershipData.investorOwnership / investorAmount * 100 : 0;\n  if (expectedInvestorReturn < 15 && investorAmount > 0) {\n    warnings.push(\"⚠️ Investor expected return below market (15%+)\");\n  }\n  return warnings;\n};\n\n// Verification function to test calculations with known values\nexport const verifyCalculations = testScenario => {\n  const {\n    targetRevenue = 2500000,\n    netProfitMargin = 25,\n    valuationMultiple = 4,\n    sbaLoanAmount = 1500000,\n    sellerFinancingAmount = 500000,\n    personalCash = 550000,\n    additionalInvestment = 100000\n  } = testScenario;\n\n  // Test business calculations\n  const ebitda = targetRevenue * (netProfitMargin / 100);\n  const purchasePrice = ebitda * valuationMultiple;\n  const businessCapitalInvested = purchasePrice + targetRevenue * 0.1 + purchasePrice * 0.015 + purchasePrice * 0.008;\n\n  // Test WACC\n  const businessWACC = calculateBusinessWACC({\n    amount: sbaLoanAmount,\n    rate: 0.115\n  }, {\n    amount: sellerFinancingAmount,\n    rate: 0.08\n  }, purchasePrice);\n\n  // Test EVA\n  const businessEVA = calculateBusinessEVA(ebitda, businessCapitalInvested, businessWACC);\n\n  // Test ownership\n  const fundingSources = {\n    personalCash: {\n      enabled: true,\n      amount: personalCash\n    },\n    taiwaneseLoan: {\n      enabled: true,\n      amount: 725000\n    },\n    houseEquity: {\n      enabled: false,\n      amount: 200000\n    },\n    additionalInvestment: {\n      enabled: true,\n      amount: additionalInvestment\n    }\n  };\n  const ownershipData = calculateRiskAdjustedOwnership(fundingSources);\n  return {\n    testScenario: {\n      targetRevenue,\n      ebitda,\n      purchasePrice,\n      businessCapitalInvested,\n      businessWACC: businessWACC * 100,\n      businessEVA,\n      ownershipData\n    },\n    expectedRanges: {\n      businessWACC: {\n        min: 7,\n        max: 12\n      },\n      businessEVA: {\n        min: 0,\n        max: 200000\n      },\n      ownership: {\n        min: 0.6,\n        max: 0.95\n      }\n    }\n  };\n};\n\n// Format currency\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount);\n};\n\n// Format percentage\nexport const formatPercentage = value => {\n  return `${value.toFixed(1)}%`;\n};\n\n// FUNDING PRIORITY ALLOCATION FUNCTIONS\n// Calculate total cash needed for acquisition\nexport const calculateTotalCashNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n  const workingCapitalPercent = variables.workingCapital || 14.6;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * 0.015;\n  const professionalFees = purchasePrice * 0.008;\n  const contingency = purchasePrice * 0.025;\n  const techInvestment = variables.techInvestment || 100000;\n\n  // Calculate SBA down payment correctly\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  const totalCashNeeded = sbaDownPayment + workingCapital + dueDiligence + professionalFees + contingency + techInvestment;\n\n  // Debug logging\n  console.log('DEBUG - calculateTotalCashNeeded:', {\n    purchasePrice,\n    sellerFinancingPercent,\n    sellerFinancingAmount,\n    sbaLoanAmount,\n    sbaDownPaymentPercent,\n    sbaDownPayment,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    contingency,\n    techInvestment,\n    totalCashNeeded\n  });\n  return {\n    purchasePrice,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    contingency,\n    techInvestment,\n    sbaDownPayment,\n    totalCashNeeded\n  };\n};\n\n// Allocate funding by priority order (lowest to highest cost) - FOCUSED ON DOWN PAYMENT\nexport const allocateFundingByPriority = (downPaymentNeeded, fundingSources) => {\n  const allocation = {\n    taiwaneseLoan: 0,\n    personalCash: 0,\n    additionalInvestment: 0,\n    sellerFinancing: 0,\n    houseEquity: 0,\n    sbaLoan: 0\n  };\n  let remainingDownPayment = downPaymentNeeded;\n\n  // Priority 1: Taiwanese Loan (cheapest - 2.8%) - $300,000 available\n  if (fundingSources.taiwaneseLoan.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.taiwaneseLoan.amount);\n    allocation.taiwaneseLoan = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 2: Personal Cash (8% opportunity cost) - $50,000 available\n  if (fundingSources.personalCash.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.personalCash.amount);\n    allocation.personalCash = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 3: Additional Investment (15% expected return) - $50,000 available\n  if (fundingSources.additionalInvestment.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.additionalInvestment.amount);\n    allocation.additionalInvestment = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 4: Seller Financing (8%) - $0 available (disabled)\n  if (fundingSources.sellerFinancing.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.sellerFinancing.amount);\n    allocation.sellerFinancing = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 5: Home Equity Loan (8% but personal asset at risk) - $98,273 available\n  if (fundingSources.houseEquity.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.houseEquity.amount);\n    allocation.houseEquity = used;\n    remainingDownPayment -= used;\n  }\n\n  // Priority 6: SBA Loan (11.5% - highest cost, use as last resort) - $0 available (disabled)\n  if (remainingDownPayment > 0) {\n    allocation.sbaLoan = remainingDownPayment; // Whatever is left\n  }\n  return {\n    allocation,\n    downPaymentGap: remainingDownPayment < 0 ? 0 : remainingDownPayment,\n    totalAllocated: downPaymentNeeded - Math.max(0, remainingDownPayment),\n    downPaymentNeeded: downPaymentNeeded,\n    remainingDownPayment: Math.max(0, remainingDownPayment)\n  };\n};\n\n// Determine purchase price financing structure\nexport const calculatePurchasePriceFinancing = (purchasePrice, fundingAllocation, variables) => {\n  console.log('DEBUG - Purchase Price Financing Input:', {\n    purchasePrice,\n    fundingAllocation,\n    allocation: fundingAllocation.allocation\n  });\n\n  // Seller financing reduces the amount that needs bank financing\n  const sellerFinancingAmount = fundingAllocation.allocation.sellerFinancing || 0;\n  const amountNeedingBankFinancing = purchasePrice - sellerFinancingAmount;\n\n  // SBA loan covers remaining purchase price\n  const sbaLoanAmount = Math.max(0, amountNeedingBankFinancing);\n  const sbaDownPaymentPercent = Math.max(variables.sbaDownPayment || 10, 10);\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  const sbaLoanPrincipal = sbaLoanAmount - sbaDownPayment;\n  const result = {\n    sellerFinancingAmount,\n    sbaLoanAmount,\n    sbaDownPayment,\n    sbaLoanPrincipal,\n    totalDownPaymentCovered: sbaDownPayment // This comes from cash allocation\n  };\n  console.log('DEBUG - Purchase Price Financing Result:', result);\n  return result;\n};\n\n// Calculate business debt service with priority allocation\nexport const calculateBusinessDebtService = purchaseFinancing => {\n  console.log('DEBUG - Business Debt Service Input:', {\n    purchaseFinancing,\n    sbaLoanPrincipal: purchaseFinancing.sbaLoanPrincipal,\n    sellerFinancingAmount: purchaseFinancing.sellerFinancingAmount\n  });\n\n  // Only SBA loan and seller financing create debt service for the business\n  const sbaAnnualPayment = calculateSBAPayment(purchaseFinancing.sbaLoanPrincipal, 0.115, 10);\n  const sellerAnnualPayment = calculateSellerPayment(purchaseFinancing.sellerFinancingAmount, 0.08, 5);\n  const result = {\n    sbaAnnualPayment,\n    sellerAnnualPayment,\n    totalBusinessDebtService: sbaAnnualPayment + sellerAnnualPayment\n  };\n  console.log('DEBUG - Business Debt Service Result:', result);\n  return result;\n};\n\n// Calculate personal debt service with priority allocation\nexport const calculatePersonalDebtService = fundingAllocation => {\n  console.log('DEBUG - Personal Debt Service Input:', {\n    fundingAllocation,\n    allocation: fundingAllocation.allocation,\n    houseEquity: fundingAllocation.allocation.houseEquity,\n    taiwaneseLoan: fundingAllocation.allocation.taiwaneseLoan\n  });\n\n  // Only personal loans create personal debt service\n  const houseEquityPayment = fundingAllocation.allocation.houseEquity > 0 ? calculateSBAPayment(fundingAllocation.allocation.houseEquity, 0.08, 15) : 0;\n  const taiwanesePayment = fundingAllocation.allocation.taiwaneseLoan > 0 ? calculateSBAPayment(fundingAllocation.allocation.taiwaneseLoan, 0.028, 10) : 0;\n  const result = {\n    houseEquityPayment,\n    taiwanesePayment,\n    totalPersonalDebtService: houseEquityPayment + taiwanesePayment\n  };\n  console.log('DEBUG - Personal Debt Service Result:', result);\n  return result;\n};\n\n// Calculate WACC with priority-based allocation - ALL FUNDING SOURCES\nexport const calculatePriorityBasedWACC = (fundingAllocation, purchasePrice) => {\n  // WACC should include ALL funding sources used for the business acquisition\n  // Each source has its own after-tax cost of capital\n\n  let totalFunding = 0;\n  let weightedCost = 0;\n\n  // After-tax cost rates for each funding source\n  const afterTaxCostRates = {\n    taiwaneseLoan: 0.028 * 0.75,\n    // 2.8% × 0.75 = 2.1% after-tax (if business deductible)\n    personalCash: 0.08 * 0.75,\n    // 8% × 0.75 = 6% after-tax (opportunity cost with tax benefit)\n    additionalInvestment: 0.15,\n    // 15% equity cost (no tax benefit)\n    sellerFinancing: 0.08 * 0.75,\n    // 8% × 0.75 = 6% after-tax\n    houseEquity: 0.08,\n    // 8% (personal debt, no business tax benefit)\n    sbaLoan: 0.115 * 0.75 // 11.5% × 0.75 = 8.6% after-tax\n  };\n\n  // Calculate weighted average cost of capital across all funding sources\n  Object.entries(fundingAllocation.allocation).forEach(([source, amount]) => {\n    if (amount > 0) {\n      totalFunding += amount;\n      weightedCost += amount * afterTaxCostRates[source];\n    }\n  });\n  return totalFunding > 0 ? weightedCost / totalFunding * 100 : 0;\n};\n\n// Calculate ownership with priority-based allocation\nexport const calculatePriorityBasedOwnership = fundingAllocation => {\n  // Risk-adjusted personal contributions based on ACTUAL allocated amounts\n  const personalCashRisk = fundingAllocation.allocation.personalCash * 1.0;\n  const taiwaneseLoanRisk = fundingAllocation.allocation.taiwaneseLoan * 0.8; // Personal guarantee\n  const houseEquityRisk = fundingAllocation.allocation.houseEquity * 1.2; // Personal asset risk\n\n  const totalPersonalRisk = personalCashRisk + taiwaneseLoanRisk + houseEquityRisk;\n  const investorContribution = fundingAllocation.allocation.additionalInvestment;\n  const totalEquity = totalPersonalRisk + investorContribution;\n  const finalOwnership = totalEquity > 0 ? totalPersonalRisk / totalEquity : 1; // Removed control premium\n\n  console.log('DEBUG - Ownership Calculation:', {\n    allocatedAmounts: fundingAllocation.allocation,\n    personalCashRisk,\n    taiwaneseLoanRisk,\n    houseEquityRisk,\n    totalPersonalRisk,\n    investorContribution,\n    totalEquity,\n    finalOwnership: finalOwnership * 100\n  });\n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      houseEquityRisk,\n      investorContribution\n    }\n  };\n};\n\n// Calculate personal cost of capital (for personal funding sources)\nexport const calculatePersonalCostOfCapital = fundingAllocation => {\n  let totalPersonalFunding = 0;\n  let weightedPersonalCost = 0;\n\n  // Only consider personal funding sources: Taiwanese Loan, Personal Cash, Home Equity\n  const personalCostRates = {\n    taiwaneseLoan: 0.028,\n    // 2.8% - personal loan rate\n    personalCash: 0.08,\n    // 8% opportunity cost\n    houseEquity: 0.08 // 8% home equity rate\n    // Excluded: additionalInvestment, sellerFinancing, sbaLoan (not personal funding)\n  };\n\n  // Only calculate for personal funding sources\n  const personalSources = ['taiwaneseLoan', 'personalCash', 'houseEquity'];\n  console.log('DEBUG - Personal Cost Calculation:', {\n    fundingAllocation: fundingAllocation.allocation,\n    personalSources\n  });\n  personalSources.forEach(source => {\n    const amount = fundingAllocation.allocation[source] || 0;\n    console.log(`DEBUG - ${source}:`, {\n      amount,\n      rate: personalCostRates[source]\n    });\n    if (amount > 0) {\n      totalPersonalFunding += amount;\n      weightedPersonalCost += amount * personalCostRates[source];\n    }\n  });\n  const result = totalPersonalFunding > 0 ? weightedPersonalCost / totalPersonalFunding * 100 : 0;\n  console.log('DEBUG - Personal Cost Result:', {\n    totalPersonalFunding,\n    weightedPersonalCost,\n    result\n  });\n  return result;\n};\n\n// Main scenario calculation with priority-based funding\nexport const calculateScenariosWithPriority = (targetRevenues, variables, fundingSources) => {\n  return targetRevenues.map(revenue => {\n    // Step 1: Calculate business metrics\n    const netMargin = variables.netProfitMargin || 25;\n    const valuationMultiple = variables.valuationMultiple || 4;\n    const ebitda = revenue * (netMargin / 100);\n    const purchasePrice = ebitda * valuationMultiple;\n    const businessMetrics = {\n      targetRevenue: revenue,\n      ebitda: ebitda,\n      purchasePrice: purchasePrice\n    };\n\n    // Step 2: Calculate down payment needed (same logic as Scenario Comparison)\n    const downPaymentCalculation = calculateDownPaymentNeeded(businessMetrics, variables);\n\n    // Step 3: Allocate funding by priority based on down payment needed\n    const fundingAllocation = allocateFundingByPriority(downPaymentCalculation.downPaymentNeeded, fundingSources);\n\n    // Step 4: Calculate purchase price financing\n    const purchaseFinancing = calculatePurchasePriceFinancing(businessMetrics.purchasePrice, fundingAllocation, variables);\n\n    // Step 5: Calculate debt service\n    const businessDebtService = calculateBusinessDebtService(purchaseFinancing);\n    const personalDebtService = calculatePersonalDebtService(fundingAllocation);\n\n    // Step 6: Calculate ownership, WACC, and personal cost of capital\n    const ownership = calculatePriorityBasedOwnership(fundingAllocation);\n    const wacc = calculatePriorityBasedWACC(fundingAllocation, businessMetrics.purchasePrice);\n    const personalCostOfCapital = calculatePersonalCostOfCapital(fundingAllocation);\n\n    // Step 7: Calculate cash flows\n    const businessCashFlow = businessMetrics.ebitda - businessDebtService.totalBusinessDebtService - (variables.managementSalary || 100000) - (variables.techInvestment || 100000) / 3;\n    const ownerDistribution = businessCashFlow * ownership.yourOwnership;\n    const personalNetCashFlow = ownerDistribution - personalDebtService.totalPersonalDebtService;\n    return {\n      ...businessMetrics,\n      ...downPaymentCalculation,\n      fundingAllocation,\n      purchaseFinancing,\n      businessDebtService,\n      personalDebtService,\n      ownership,\n      wacc,\n      personalCostOfCapital,\n      businessCashFlow,\n      ownerDistribution,\n      personalNetCashFlow,\n      personalROI: personalNetCashFlow / (fundingAllocation.allocation.personalCash + fundingAllocation.allocation.taiwaneseLoan + fundingAllocation.allocation.houseEquity) * 100\n    };\n  });\n};\n\n// Calculate down payment needed using the same logic as Scenario Comparison\nexport const calculateDownPaymentNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n\n  // Calculate SBA down payment\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n\n  // Calculate working capital and fees (same as Scenario Comparison)\n  const workingCapitalPercent = variables.workingCapital || 7.9;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const fees = purchasePrice * 0.025; // 2.5% total fees (due diligence + professional fees)\n\n  // Down Payment Needed = SBA Down Payment + Working Capital + Fees\n  const downPaymentNeeded = sbaDownPayment + workingCapital + fees;\n  return {\n    sbaDownPayment,\n    workingCapital,\n    fees,\n    downPaymentNeeded\n  };\n};","map":{"version":3,"names":["calculateSBAPayment","principal","rate","years","monthlyRate","payments","Math","pow","calculateSellerPayment","calculateExpectedValue","scenarios","probabilities","bestCase","mostLikely","worstCase","normalizeProbabilities","best","likely","worst","total","factor","round","validateSBADownPayment","value","max","validateDebtCoverage","ebitda","debtService","generateBellCurve","mean","min","stdDev","points","x","y","exp","push","calculateTotalCashRequired","params","purchasePrice","sbaDownPaymentPercent","workingCapitalPercent","targetRevenue","techInvestment","sellerFinancingPercent","dueDiligencePercent","professionalFeesPercent","contingencyPercent","sellerFinancingAmount","sbaLoanAmount","sbaDownPayment","workingCapital","dueDiligence","professionalFees","contingency","downPayment","calculateAnnualCashToPocket","netProfitMarginPercent","managementSalary","sbaPayment","sellerPayment","techInvestmentAmortized","netCashFlow","calculateDSCR","annualEBITDA","totalAnnualDebtService","calculateCashOnCashReturn","annualCashToPocket","totalCashInvested","calculateIRR","initialInvestment","cashFlows","tolerance","maxIterations","guess","i","npv","derivative","j","length","discountFactor","newGuess","abs","calculateMOIC","fiveYearProjections","totalCashReturned","reduce","sum","year","cashFlow","businessValueAtExit","calculatePaybackPeriod","cumulativeCashFlow","calculateEnhancedRiskScore","dscr","cashOnCash","score","calculateFinancingStructure","sellerFinancing","calculateFiveYearProjections","revenueGrowthRatePercent","sbaInterestRate","sellerInterestRate","projections","currentRevenue","revenue","calculateBusinessTargetingMetrics","availableCash","maxSafePurchasePrice","minRequiredEBITDA","targetRevenueRange","recommendedMultipleRange","calculateRiskScore","riskScore","totalDebtService","debtCoverageRatio","workingCapitalRatio","calculateBusinessWACC","sbaLoan","totalBusinessDebt","amount","businessEquity","totalBusinessCapital","debtWeight","equityWeight","sbaAfterTaxCost","sellerAfterTaxCost","afterTaxDebtCost","equityCost","calculateBusinessEVA","businessEBITDA","businessCapitalInvested","businessWACC","taxRate","nopat","capitalCharge","calculateBusinessCashFlow","scenario","loanStructure","businessDebtService","annualPayment","businessFreeCashFlow","techInvestmentAnnual","businessDSCR","businessRevenue","businessROA","calculatePersonalCashFlow","businessCashFlow","personalLoans","ownershipData","fundingSources","ownerDistribution","yourOwnership","personalDebtService","houseEquity","taiwaneseLoan","personalNetCashFlow","personalCashInvested","personalCash","enabled","personalROI","calculatePersonalProjections","businessProjections","map","index","businessFCF","yourFCF","DSCR","cumulative","calculateRiskAdjustedOwnership","managementValue","personalCashRisk","taiwaneseLoanRisk","homeEquityRisk","sweatEquityValue","personalRiskAdjusted","investorContribution","additionalInvestment","totalRiskAdjustedEquity","baseOwnership","controlPremium","finalOwnership","investorOwnership","breakdown","calculateOwnershipCashFlows","totalBusinessCashFlow","investorAmount","personalCashAmount","investorPreferredReturn","yourPreferredReturn","totalPreferredReturns","remainingCashFlow","yourRemainingShare","investorRemainingShare","yourTotalCashFlow","investorTotalCashFlow","yourCashInvested","yourROI","investorROI","preferredReturns","yours","investor","remainingCashFlowSplit","validateOwnership","businessMetrics","warnings","expectedInvestorReturn","totalCashFlow","verifyCalculations","testScenario","netProfitMargin","valuationMultiple","businessEVA","expectedRanges","ownership","formatCurrency","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatPercentage","toFixed","calculateTotalCashNeeded","variables","totalCashNeeded","console","log","allocateFundingByPriority","downPaymentNeeded","allocation","remainingDownPayment","used","downPaymentGap","totalAllocated","calculatePurchasePriceFinancing","fundingAllocation","amountNeedingBankFinancing","sbaLoanPrincipal","result","totalDownPaymentCovered","calculateBusinessDebtService","purchaseFinancing","sbaAnnualPayment","sellerAnnualPayment","totalBusinessDebtService","calculatePersonalDebtService","houseEquityPayment","taiwanesePayment","totalPersonalDebtService","calculatePriorityBasedWACC","totalFunding","weightedCost","afterTaxCostRates","Object","entries","forEach","source","calculatePriorityBasedOwnership","houseEquityRisk","totalPersonalRisk","totalEquity","allocatedAmounts","calculatePersonalCostOfCapital","totalPersonalFunding","weightedPersonalCost","personalCostRates","personalSources","calculateScenariosWithPriority","targetRevenues","netMargin","downPaymentCalculation","calculateDownPaymentNeeded","wacc","personalCostOfCapital","fees"],"sources":["/Users/juihanlin/Desktop/Biz Acquisition Calculator/src/utils/calculations.js"],"sourcesContent":["// SBA loan payment calculation\nexport const calculateSBAPayment = (principal, rate = 0.115, years = 10) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return (principal * monthlyRate * Math.pow(1 + monthlyRate, payments)) / \n         (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Seller note payment calculation  \nexport const calculateSellerPayment = (principal, rate = 0.08, years = 5) => {\n  const monthlyRate = rate / 12;\n  const payments = years * 12;\n  return (principal * monthlyRate * Math.pow(1 + monthlyRate, payments)) / \n         (Math.pow(1 + monthlyRate, payments) - 1) * 12;\n};\n\n// Expected value calculation\nexport const calculateExpectedValue = (scenarios, probabilities) => {\n  return (scenarios.bestCase * probabilities.bestCase / 100) +\n         (scenarios.mostLikely * probabilities.mostLikely / 100) +\n         (scenarios.worstCase * probabilities.worstCase / 100);\n};\n\n// Auto-normalize probabilities\nexport const normalizeProbabilities = (best, likely, worst) => {\n  const total = best + likely + worst;\n  if (total !== 100) {\n    const factor = 100 / total;\n    return {\n      best: Math.round(best * factor),\n      likely: Math.round(likely * factor),\n      worst: Math.round(worst * factor)\n    };\n  }\n  return { best, likely, worst };\n};\n\n// SBA minimum constraint\nexport const validateSBADownPayment = (value) => Math.max(value, 10);\n\n// Debt service coverage validation\nexport const validateDebtCoverage = (ebitda, debtService) => debtService / ebitda <= 0.8;\n\n// Generate bell curve data\nexport const generateBellCurve = (mean, min, max) => {\n  const stdDev = (max - min) / 6;\n  const points = [];\n  for (let x = min; x <= max; x += (max - min) / 100) {\n    const y = Math.exp(-0.5 * Math.pow((x - mean) / stdDev, 2));\n    points.push({ x, y });\n  }\n  return points;\n};\n\n// Calculate total cash required\nexport const calculateTotalCashRequired = (params) => {\n  const {\n    purchasePrice,\n    sbaDownPaymentPercent,\n    workingCapitalPercent,\n    targetRevenue,\n    techInvestment,\n    sellerFinancingPercent = 20, // Default seller financing percentage\n    dueDiligencePercent = 1.5,\n    professionalFeesPercent = 0.8,\n    contingencyPercent = 2.5\n  } = params;\n\n  // Calculate financing structure correctly\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  // Note: Total financing may exceed purchase price if both SBA and seller financing are used\n  // This is typical in SBA deals where seller financing is additional to SBA loan\n  \n  const workingCapital = targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * (dueDiligencePercent / 100);\n  const professionalFees = purchasePrice * (professionalFeesPercent / 100);\n  const contingency = purchasePrice * (contingencyPercent / 100);\n\n  return {\n    downPayment: sbaDownPayment,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    techInvestment,\n    contingency,\n    total: sbaDownPayment + workingCapital + dueDiligence + professionalFees + techInvestment + contingency\n  };\n};\n\n// Calculate annual cash to pocket\nexport const calculateAnnualCashToPocket = (params) => {\n  const {\n    targetRevenue,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment\n  } = params;\n\n  const ebitda = targetRevenue * (netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(sellerFinancingAmount);\n  const techInvestmentAmortized = techInvestment / 3; // Amortized over 3 years\n\n  return {\n    ebitda,\n    sbaPayment,\n    sellerPayment,\n    managementSalary,\n    techInvestmentAmortized,\n    netCashFlow: ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized\n  };\n};\n\n// Calculate Debt Service Coverage Ratio (DSCR)\nexport const calculateDSCR = (annualEBITDA, totalAnnualDebtService) => {\n  return annualEBITDA / totalAnnualDebtService;\n};\n\n// Calculate Cash-on-Cash Return\nexport const calculateCashOnCashReturn = (annualCashToPocket, totalCashInvested) => {\n  return (annualCashToPocket / totalCashInvested) * 100;\n};\n\n// Calculate IRR using Newton-Raphson method\nexport const calculateIRR = (initialInvestment, cashFlows) => {\n  const tolerance = 0.0001;\n  const maxIterations = 100;\n  let guess = 0.1; // Start with 10%\n\n  for (let i = 0; i < maxIterations; i++) {\n    let npv = -initialInvestment;\n    let derivative = 0;\n\n    for (let j = 0; j < cashFlows.length; j++) {\n      const discountFactor = Math.pow(1 + guess, j + 1);\n      npv += cashFlows[j] / discountFactor;\n      derivative -= (j + 1) * cashFlows[j] / (discountFactor * (1 + guess));\n    }\n\n    const newGuess = guess - npv / derivative;\n    \n    if (Math.abs(newGuess - guess) < tolerance) {\n      return newGuess * 100; // Return as percentage\n    }\n    \n    guess = newGuess;\n  }\n  \n  return null; // No convergence\n};\n\n// Calculate Multiple on Invested Capital (MOIC)\nexport const calculateMOIC = (totalCashInvested, fiveYearProjections) => {\n  const totalCashReturned = fiveYearProjections.reduce((sum, year) => sum + year.cashFlow, 0);\n  const businessValueAtExit = fiveYearProjections[4].ebitda * 4.2; // Assume same multiple\n  return (totalCashReturned + businessValueAtExit) / totalCashInvested;\n};\n\n// Calculate Payback Period\nexport const calculatePaybackPeriod = (totalCashInvested, fiveYearProjections) => {\n  let cumulativeCashFlow = 0;\n  for (let i = 0; i < fiveYearProjections.length; i++) {\n    cumulativeCashFlow += fiveYearProjections[i].cashFlow;\n    if (cumulativeCashFlow >= totalCashInvested) {\n      return i + 1 + ((totalCashInvested - (cumulativeCashFlow - fiveYearProjections[i].cashFlow)) / fiveYearProjections[i].cashFlow);\n    }\n  }\n  return '>5 years';\n};\n\n// Enhanced Risk Score Calculation\nexport const calculateEnhancedRiskScore = (dscr, cashOnCash, sellerFinancingPercent) => {\n  let score = 5; // Base score\n  \n  // DSCR scoring\n  if (dscr >= 1.5) score += 2;\n  else if (dscr >= 1.25) score += 1;\n  else score -= 2;\n  \n  // Cash-on-Cash scoring\n  if (cashOnCash >= 20) score += 2;\n  else if (cashOnCash >= 15) score += 1;\n  else if (cashOnCash < 10) score -= 1;\n  \n  // Seller financing scoring\n  if (sellerFinancingPercent >= 20) score += 1; // Seller has skin in game\n  \n  return Math.max(1, Math.min(10, score));\n};\n\n// Calculate financing structure\nexport const calculateFinancingStructure = (params) => {\n  const {\n    purchasePrice,\n    sellerFinancingPercent,\n    sbaDownPaymentPercent\n  } = params;\n\n  const sellerFinancing = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancing;\n  const downPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n\n  return {\n    purchasePrice,\n    sellerFinancing,\n    sbaLoanAmount,\n    downPayment\n  };\n};\n\n// Calculate 5-year projections for advanced metrics\nexport const calculateFiveYearProjections = (params) => {\n  const {\n    targetRevenue,\n    revenueGrowthRatePercent,\n    netProfitMarginPercent,\n    sbaLoanAmount,\n    sellerFinancingAmount,\n    managementSalary,\n    techInvestment,\n    sbaInterestRate = 11.5,\n    sellerInterestRate = 8\n  } = params;\n\n  const projections = [];\n  let currentRevenue = targetRevenue;\n\n  for (let year = 1; year <= 5; year++) {\n    const ebitda = currentRevenue * (netProfitMarginPercent / 100);\n    const sbaPayment = calculateSBAPayment(sbaLoanAmount, sbaInterestRate / 100, 10);\n    const sellerPayment = calculateSellerPayment(sellerFinancingAmount, sellerInterestRate / 100, 5);\n    const techInvestmentAmortized = year <= 3 ? techInvestment / 3 : 0;\n\n    const netCashFlow = ebitda - sbaPayment - sellerPayment - managementSalary - techInvestmentAmortized;\n\n    projections.push({\n      year,\n      revenue: currentRevenue,\n      ebitda,\n      cashFlow: netCashFlow\n    });\n\n    currentRevenue *= (1 + revenueGrowthRatePercent / 100);\n  }\n\n  return projections;\n};\n\n// Calculate business targeting metrics\nexport const calculateBusinessTargetingMetrics = (availableCash, targetRevenue) => {\n  return {\n    maxSafePurchasePrice: availableCash * 4, // Assuming 25% total cash requirement\n    minRequiredEBITDA: (availableCash * 4 * 0.12) / 1.25, // 12% debt service / 1.25x coverage\n    targetRevenueRange: {\n      min: targetRevenue * 0.8,\n      max: targetRevenue * 1.2\n    },\n    recommendedMultipleRange: {\n      min: 3.5,\n      max: 5.0\n    }\n  };\n};\n\n// Calculate risk score (1-10)\nexport const calculateRiskScore = (params) => {\n  let riskScore = 5; // Base score\n\n  // Debt service coverage ratio\n  const ebitda = params.targetRevenue * (params.netProfitMarginPercent / 100);\n  const sbaPayment = calculateSBAPayment(params.sbaLoanAmount);\n  const sellerPayment = calculateSellerPayment(params.sellerFinancingAmount);\n  const totalDebtService = sbaPayment + sellerPayment;\n  const debtCoverageRatio = ebitda / totalDebtService;\n\n  if (debtCoverageRatio < 1.25) riskScore += 3;\n  else if (debtCoverageRatio < 1.5) riskScore += 1;\n  else if (debtCoverageRatio > 2.0) riskScore -= 1;\n\n  // Working capital ratio\n  const workingCapitalRatio = (params.workingCapitalPercent / 100) / (params.netProfitMarginPercent / 100);\n  if (workingCapitalRatio > 0.8) riskScore += 2;\n  else if (workingCapitalRatio < 0.3) riskScore -= 1;\n\n  // SBA down payment\n  if (params.sbaDownPaymentPercent < 12) riskScore += 1;\n  else if (params.sbaDownPaymentPercent > 15) riskScore -= 1;\n\n  return Math.max(1, Math.min(10, riskScore));\n};\n\n// Calculate business-only WACC (excluding personal loans)\nexport const calculateBusinessWACC = (sbaLoan, sellerFinancing, purchasePrice) => {\n  const totalBusinessDebt = sbaLoan.amount + sellerFinancing.amount;\n  const businessEquity = purchasePrice - totalBusinessDebt;\n  const totalBusinessCapital = purchasePrice;\n  \n  if (totalBusinessCapital <= 0) return 0;\n  \n  const debtWeight = totalBusinessDebt / totalBusinessCapital;\n  const equityWeight = businessEquity / totalBusinessCapital;\n  \n  // Different tax treatment for different debt types\n  const sbaAfterTaxCost = 0.115 * 0.75; // 25% tax benefit for business-deductible SBA\n  const sellerAfterTaxCost = 0.08 * 0.9; // 10% tax benefit for seller financing (less deductible)\n  const afterTaxDebtCost = totalBusinessDebt > 0 ? \n    ((sbaLoan.amount * sbaAfterTaxCost + sellerFinancing.amount * sellerAfterTaxCost) / totalBusinessDebt) : 0;\n  const equityCost = 0.15; // Business equity cost\n  \n  return (debtWeight * afterTaxDebtCost) + (equityWeight * equityCost);\n};\n\n// Calculate business-level EVA (excluding personal loans)\nexport const calculateBusinessEVA = (businessEBITDA, businessCapitalInvested, businessWACC) => {\n  const taxRate = 0.25;\n  const nopat = businessEBITDA * (1 - taxRate); // Net Operating Profit After Tax\n  const capitalCharge = businessCapitalInvested * businessWACC;\n  return nopat - capitalCharge;\n};\n\n// Calculate business cash flow (company level only)\nexport const calculateBusinessCashFlow = (scenario, loanStructure, businessCapitalInvested) => {\n  const businessDebtService = \n    loanStructure.sbaLoan.annualPayment + \n    loanStructure.sellerFinancing.annualPayment;\n  \n  const businessFreeCashFlow = \n    scenario.ebitda - \n    businessDebtService - \n    scenario.managementSalary - \n    scenario.techInvestmentAnnual;\n  \n  const businessDSCR = businessDebtService > 0 ? scenario.ebitda / businessDebtService : 0;\n  \n  return {\n    businessRevenue: scenario.targetRevenue,\n    businessEBITDA: scenario.ebitda,\n    businessDebtService: businessDebtService,\n    businessFreeCashFlow: businessFreeCashFlow,\n    businessDSCR: businessDSCR,\n    businessROA: businessCapitalInvested > 0 ? (businessFreeCashFlow / businessCapitalInvested) * 100 : 0\n  };\n};\n\n// Calculate personal cash flow (owner level only)\nexport const calculatePersonalCashFlow = (businessCashFlow, personalLoans, ownershipData, fundingSources) => {\n  const ownerDistribution = businessCashFlow.businessFreeCashFlow * ownershipData.yourOwnership;\n  \n  const personalDebtService = \n    personalLoans.houseEquity.annualPayment + \n    personalLoans.taiwaneseLoan.annualPayment;\n  \n  const personalNetCashFlow = ownerDistribution - personalDebtService;\n  \n  const personalCashInvested = \n    (fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0) + \n    (fundingSources.houseEquity.enabled ? fundingSources.houseEquity.amount : 0) + \n    (fundingSources.taiwaneseLoan.enabled ? fundingSources.taiwaneseLoan.amount : 0);\n  \n  const personalROI = personalCashInvested > 0 ? \n    (personalNetCashFlow / personalCashInvested) * 100 : 0;\n  \n  return {\n    ownerDistribution: ownerDistribution,\n    personalDebtService: personalDebtService,\n    personalNetCashFlow: personalNetCashFlow,\n    personalCashInvested: personalCashInvested,\n    personalROI: personalROI\n  };\n};\n\n// Calculate personal projections\nexport const calculatePersonalProjections = (businessProjections, personalLoans, ownershipData) => {\n  return businessProjections.map((year, index) => {\n    const businessFCF = year.businessFreeCashFlow;\n    const ownerDistribution = businessFCF * ownershipData.yourOwnership;\n    const personalDebtService = personalLoans.total;\n    const yourFCF = ownerDistribution - personalDebtService;\n    \n    return {\n      year: index + 1,\n      businessFCF: businessFCF,\n      ownerDistribution: ownerDistribution,\n      yourFCF: yourFCF,\n      DSCR: year.businessDSCR,\n      cumulative: index === 0 ? yourFCF : (index > 0 ? businessProjections[index - 1].cumulative : 0) + yourFCF\n    };\n  });\n};\n\n// Calculate risk-adjusted ownership with fair methodology\nexport const calculateRiskAdjustedOwnership = (fundingSources, managementValue = 150000) => {\n  // Calculate risk-weighted contributions\n  const personalCashRisk = fundingSources.personalCash.enabled ? fundingSources.personalCash.amount : 0;\n  \n  // Taiwanese loan: Personal guarantee = 80% risk weight\n  const taiwaneseLoanRisk = fundingSources.taiwaneseLoan.enabled ? \n    fundingSources.taiwaneseLoan.amount * 0.8 : 0;\n    \n  // Home equity: Personal asset at risk = 120% risk weight (higher risk premium)\n  const homeEquityRisk = fundingSources.houseEquity.enabled ? \n    fundingSources.houseEquity.amount * 1.2 : 0;\n    \n  // SBA loan: Personal guarantee but asset-backed = 30% risk weight\n  // const sbaRisk = 0; // SBA loan is debt, not equity contribution\n  \n  // Management/operational value (sweat equity)\n  const sweatEquityValue = managementValue;\n  \n  // Total personal risk-adjusted contribution\n  const personalRiskAdjusted = personalCashRisk + taiwaneseLoanRisk + homeEquityRisk + sweatEquityValue;\n  \n  // Outside investor contribution (100% risk weight)\n  const investorContribution = fundingSources.additionalInvestment.enabled ? \n    fundingSources.additionalInvestment.amount : 0;\n  \n  // Total risk-adjusted equity\n  const totalRiskAdjustedEquity = personalRiskAdjusted + investorContribution;\n  \n  // Base ownership calculation\n  const baseOwnership = totalRiskAdjustedEquity > 0 ? \n    personalRiskAdjusted / totalRiskAdjustedEquity : 1;\n  \n  // Dynamic control premium based on investor amount\n  const controlPremium = investorContribution > 0 ? \n    Math.min(0.05, investorContribution / 1000000) : 0; // Max 5%, scales with investment size\n  \n  // Final ownership (capped at 95% to be fair to investors)\n  const finalOwnership = Math.min(0.95, baseOwnership + controlPremium);\n  \n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      homeEquityRisk,\n      sweatEquityValue,\n      investorContribution,\n      controlPremium: controlPremium * 100\n    }\n  };\n};\n\n// Calculate ownership cash flows with preferred return structure\nexport const calculateOwnershipCashFlows = (totalBusinessCashFlow, ownershipData, fundingSources) => {\n  const investorAmount = fundingSources.additionalInvestment.enabled ? \n    fundingSources.additionalInvestment.amount : 0;\n  const personalCashAmount = fundingSources.personalCash.enabled ? \n    fundingSources.personalCash.amount : 0;\n  \n  // Investor preferred return (8% on their investment)\n  const investorPreferredReturn = investorAmount * 0.08;\n  \n  // Your preferred return (6% on personal cash)\n  const yourPreferredReturn = personalCashAmount * 0.06;\n  \n  // Total preferred returns\n  const totalPreferredReturns = investorPreferredReturn + yourPreferredReturn;\n  \n  // Remaining cash flow after preferred returns\n  const remainingCashFlow = Math.max(0, totalBusinessCashFlow - totalPreferredReturns);\n  \n  // Split remaining cash flow based on ownership percentages\n  const yourRemainingShare = remainingCashFlow * ownershipData.yourOwnership;\n  const investorRemainingShare = remainingCashFlow * ownershipData.investorOwnership;\n  \n  // Total distributions\n  const yourTotalCashFlow = yourPreferredReturn + yourRemainingShare;\n  const investorTotalCashFlow = investorPreferredReturn + investorRemainingShare;\n  \n  // Calculate ROI on actual cash invested (not risk-adjusted amounts)\n  const yourCashInvested = personalCashAmount;\n  const yourROI = yourCashInvested > 0 ? (yourTotalCashFlow / yourCashInvested) * 100 : 0;\n  \n  const investorROI = investorAmount > 0 ? (investorTotalCashFlow / investorAmount) * 100 : 0;\n  \n  return {\n    yourTotalCashFlow,\n    investorTotalCashFlow,\n    yourROI,\n    investorROI,\n    preferredReturns: {\n      yours: yourPreferredReturn,\n      investor: investorPreferredReturn\n    },\n    remainingCashFlowSplit: {\n      yours: yourRemainingShare,\n      investor: investorRemainingShare\n    }\n  };\n};\n\n// Validate ownership for reasonableness\nexport const validateOwnership = (ownershipData, fundingSources, businessMetrics) => {\n  const warnings = [];\n  \n  // Check if investor is getting fair deal\n  if (ownershipData.investorOwnership < 0.05 && fundingSources.additionalInvestment.amount > 50000) {\n    warnings.push(\"⚠️ Investor ownership very low - may not be attractive\");\n  }\n  \n  // Check if you're giving up too much\n  if (ownershipData.yourOwnership < 0.6 && fundingSources.personalCash.amount > fundingSources.additionalInvestment.amount) {\n    warnings.push(\"⚠️ Your ownership low despite majority funding\");\n  }\n  \n  // Check for reasonable investor return (simplified calculation)\n  const investorAmount = fundingSources.additionalInvestment.enabled ? fundingSources.additionalInvestment.amount : 0;\n  const expectedInvestorReturn = investorAmount > 0 ? (businessMetrics.totalCashFlow * ownershipData.investorOwnership / investorAmount) * 100 : 0;\n  if (expectedInvestorReturn < 15 && investorAmount > 0) {\n    warnings.push(\"⚠️ Investor expected return below market (15%+)\");\n  }\n  \n  return warnings;\n};\n\n// Verification function to test calculations with known values\nexport const verifyCalculations = (testScenario) => {\n  const {\n    targetRevenue = 2500000,\n    netProfitMargin = 25,\n    valuationMultiple = 4,\n    sbaLoanAmount = 1500000,\n    sellerFinancingAmount = 500000,\n    personalCash = 550000,\n    additionalInvestment = 100000\n  } = testScenario;\n\n  // Test business calculations\n  const ebitda = targetRevenue * (netProfitMargin / 100);\n  const purchasePrice = ebitda * valuationMultiple;\n  const businessCapitalInvested = purchasePrice + (targetRevenue * 0.1) + (purchasePrice * 0.015) + (purchasePrice * 0.008);\n  \n  // Test WACC\n  const businessWACC = calculateBusinessWACC(\n    { amount: sbaLoanAmount, rate: 0.115 },\n    { amount: sellerFinancingAmount, rate: 0.08 },\n    purchasePrice\n  );\n  \n  // Test EVA\n  const businessEVA = calculateBusinessEVA(ebitda, businessCapitalInvested, businessWACC);\n  \n  // Test ownership\n  const fundingSources = {\n    personalCash: { enabled: true, amount: personalCash },\n    taiwaneseLoan: { enabled: true, amount: 725000 },\n    houseEquity: { enabled: false, amount: 200000 },\n    additionalInvestment: { enabled: true, amount: additionalInvestment }\n  };\n  \n  const ownershipData = calculateRiskAdjustedOwnership(fundingSources);\n  \n  return {\n    testScenario: {\n      targetRevenue,\n      ebitda,\n      purchasePrice,\n      businessCapitalInvested,\n      businessWACC: businessWACC * 100,\n      businessEVA,\n      ownershipData\n    },\n    expectedRanges: {\n      businessWACC: { min: 7, max: 12 },\n      businessEVA: { min: 0, max: 200000 },\n      ownership: { min: 0.6, max: 0.95 }\n    }\n  };\n};\n\n// Format currency\nexport const formatCurrency = (amount) => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(amount);\n};\n\n// Format percentage\nexport const formatPercentage = (value) => {\n  return `${value.toFixed(1)}%`;\n}; \n\n// FUNDING PRIORITY ALLOCATION FUNCTIONS\n// Calculate total cash needed for acquisition\nexport const calculateTotalCashNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n  const workingCapitalPercent = variables.workingCapital || 14.6;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const dueDiligence = purchasePrice * 0.015;\n  const professionalFees = purchasePrice * 0.008;\n  const contingency = purchasePrice * 0.025;\n  const techInvestment = variables.techInvestment || 100000;\n  \n  // Calculate SBA down payment correctly\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  const totalCashNeeded = sbaDownPayment + workingCapital + dueDiligence + professionalFees + contingency + techInvestment;\n  \n  // Debug logging\n  console.log('DEBUG - calculateTotalCashNeeded:', {\n    purchasePrice,\n    sellerFinancingPercent,\n    sellerFinancingAmount,\n    sbaLoanAmount,\n    sbaDownPaymentPercent,\n    sbaDownPayment,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    contingency,\n    techInvestment,\n    totalCashNeeded\n  });\n  \n  return {\n    purchasePrice,\n    workingCapital,\n    dueDiligence,\n    professionalFees,\n    contingency,\n    techInvestment,\n    sbaDownPayment,\n    totalCashNeeded\n  };\n};\n\n// Allocate funding by priority order (lowest to highest cost) - FOCUSED ON DOWN PAYMENT\nexport const allocateFundingByPriority = (downPaymentNeeded, fundingSources) => {\n  const allocation = {\n    taiwaneseLoan: 0,\n    personalCash: 0,\n    additionalInvestment: 0,\n    sellerFinancing: 0,\n    houseEquity: 0,\n    sbaLoan: 0\n  };\n  \n  let remainingDownPayment = downPaymentNeeded;\n  \n  // Priority 1: Taiwanese Loan (cheapest - 2.8%) - $300,000 available\n  if (fundingSources.taiwaneseLoan.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.taiwaneseLoan.amount);\n    allocation.taiwaneseLoan = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 2: Personal Cash (8% opportunity cost) - $50,000 available\n  if (fundingSources.personalCash.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.personalCash.amount);\n    allocation.personalCash = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 3: Additional Investment (15% expected return) - $50,000 available\n  if (fundingSources.additionalInvestment.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.additionalInvestment.amount);\n    allocation.additionalInvestment = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 4: Seller Financing (8%) - $0 available (disabled)\n  if (fundingSources.sellerFinancing.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.sellerFinancing.amount);\n    allocation.sellerFinancing = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 5: Home Equity Loan (8% but personal asset at risk) - $98,273 available\n  if (fundingSources.houseEquity.enabled && remainingDownPayment > 0) {\n    const used = Math.min(remainingDownPayment, fundingSources.houseEquity.amount);\n    allocation.houseEquity = used;\n    remainingDownPayment -= used;\n  }\n  \n  // Priority 6: SBA Loan (11.5% - highest cost, use as last resort) - $0 available (disabled)\n  if (remainingDownPayment > 0) {\n    allocation.sbaLoan = remainingDownPayment; // Whatever is left\n  }\n  \n  return {\n    allocation,\n    downPaymentGap: remainingDownPayment < 0 ? 0 : remainingDownPayment,\n    totalAllocated: downPaymentNeeded - Math.max(0, remainingDownPayment),\n    downPaymentNeeded: downPaymentNeeded,\n    remainingDownPayment: Math.max(0, remainingDownPayment)\n  };\n};\n\n// Determine purchase price financing structure\nexport const calculatePurchasePriceFinancing = (purchasePrice, fundingAllocation, variables) => {\n  console.log('DEBUG - Purchase Price Financing Input:', {\n    purchasePrice,\n    fundingAllocation,\n    allocation: fundingAllocation.allocation\n  });\n  \n  // Seller financing reduces the amount that needs bank financing\n  const sellerFinancingAmount = fundingAllocation.allocation.sellerFinancing || 0;\n  const amountNeedingBankFinancing = purchasePrice - sellerFinancingAmount;\n  \n  // SBA loan covers remaining purchase price\n  const sbaLoanAmount = Math.max(0, amountNeedingBankFinancing);\n  const sbaDownPaymentPercent = Math.max(variables.sbaDownPayment || 10, 10);\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  const sbaLoanPrincipal = sbaLoanAmount - sbaDownPayment;\n  \n  const result = {\n    sellerFinancingAmount,\n    sbaLoanAmount,\n    sbaDownPayment,\n    sbaLoanPrincipal,\n    totalDownPaymentCovered: sbaDownPayment // This comes from cash allocation\n  };\n  \n  console.log('DEBUG - Purchase Price Financing Result:', result);\n  \n  return result;\n};\n\n// Calculate business debt service with priority allocation\nexport const calculateBusinessDebtService = (purchaseFinancing) => {\n  console.log('DEBUG - Business Debt Service Input:', {\n    purchaseFinancing,\n    sbaLoanPrincipal: purchaseFinancing.sbaLoanPrincipal,\n    sellerFinancingAmount: purchaseFinancing.sellerFinancingAmount\n  });\n  \n  // Only SBA loan and seller financing create debt service for the business\n  const sbaAnnualPayment = calculateSBAPayment(\n    purchaseFinancing.sbaLoanPrincipal, \n    0.115, \n    10\n  );\n  \n  const sellerAnnualPayment = calculateSellerPayment(\n    purchaseFinancing.sellerFinancingAmount, \n    0.08, \n    5\n  );\n  \n  const result = {\n    sbaAnnualPayment,\n    sellerAnnualPayment,\n    totalBusinessDebtService: sbaAnnualPayment + sellerAnnualPayment\n  };\n  \n  console.log('DEBUG - Business Debt Service Result:', result);\n  \n  return result;\n};\n\n// Calculate personal debt service with priority allocation\nexport const calculatePersonalDebtService = (fundingAllocation) => {\n  console.log('DEBUG - Personal Debt Service Input:', {\n    fundingAllocation,\n    allocation: fundingAllocation.allocation,\n    houseEquity: fundingAllocation.allocation.houseEquity,\n    taiwaneseLoan: fundingAllocation.allocation.taiwaneseLoan\n  });\n  \n  // Only personal loans create personal debt service\n  const houseEquityPayment = fundingAllocation.allocation.houseEquity > 0 ? \n    calculateSBAPayment(fundingAllocation.allocation.houseEquity, 0.08, 15) : 0;\n    \n  const taiwanesePayment = fundingAllocation.allocation.taiwaneseLoan > 0 ? \n    calculateSBAPayment(fundingAllocation.allocation.taiwaneseLoan, 0.028, 10) : 0;\n  \n  const result = {\n    houseEquityPayment,\n    taiwanesePayment,\n    totalPersonalDebtService: houseEquityPayment + taiwanesePayment\n  };\n  \n  console.log('DEBUG - Personal Debt Service Result:', result);\n  \n  return result;\n};\n\n// Calculate WACC with priority-based allocation - ALL FUNDING SOURCES\nexport const calculatePriorityBasedWACC = (fundingAllocation, purchasePrice) => {\n  // WACC should include ALL funding sources used for the business acquisition\n  // Each source has its own after-tax cost of capital\n  \n  let totalFunding = 0;\n  let weightedCost = 0;\n  \n  // After-tax cost rates for each funding source\n  const afterTaxCostRates = {\n    taiwaneseLoan: 0.028 * 0.75, // 2.8% × 0.75 = 2.1% after-tax (if business deductible)\n    personalCash: 0.08 * 0.75, // 8% × 0.75 = 6% after-tax (opportunity cost with tax benefit)\n    additionalInvestment: 0.15, // 15% equity cost (no tax benefit)\n    sellerFinancing: 0.08 * 0.75, // 8% × 0.75 = 6% after-tax\n    houseEquity: 0.08, // 8% (personal debt, no business tax benefit)\n    sbaLoan: 0.115 * 0.75 // 11.5% × 0.75 = 8.6% after-tax\n  };\n  \n  // Calculate weighted average cost of capital across all funding sources\n  Object.entries(fundingAllocation.allocation).forEach(([source, amount]) => {\n    if (amount > 0) {\n      totalFunding += amount;\n      weightedCost += amount * afterTaxCostRates[source];\n    }\n  });\n  \n  return totalFunding > 0 ? (weightedCost / totalFunding) * 100 : 0;\n};\n\n// Calculate ownership with priority-based allocation\nexport const calculatePriorityBasedOwnership = (fundingAllocation) => {\n  // Risk-adjusted personal contributions based on ACTUAL allocated amounts\n  const personalCashRisk = fundingAllocation.allocation.personalCash * 1.0;\n  const taiwaneseLoanRisk = fundingAllocation.allocation.taiwaneseLoan * 0.8; // Personal guarantee\n  const houseEquityRisk = fundingAllocation.allocation.houseEquity * 1.2; // Personal asset risk\n  \n  const totalPersonalRisk = personalCashRisk + taiwaneseLoanRisk + houseEquityRisk;\n  const investorContribution = fundingAllocation.allocation.additionalInvestment;\n  const totalEquity = totalPersonalRisk + investorContribution;\n  \n  const finalOwnership = totalEquity > 0 ? totalPersonalRisk / totalEquity : 1; // Removed control premium\n  \n  console.log('DEBUG - Ownership Calculation:', {\n    allocatedAmounts: fundingAllocation.allocation,\n    personalCashRisk,\n    taiwaneseLoanRisk,\n    houseEquityRisk,\n    totalPersonalRisk,\n    investorContribution,\n    totalEquity,\n    finalOwnership: finalOwnership * 100\n  });\n  \n  return {\n    yourOwnership: finalOwnership,\n    investorOwnership: 1 - finalOwnership,\n    breakdown: {\n      personalCashRisk,\n      taiwaneseLoanRisk,\n      houseEquityRisk,\n      investorContribution\n    }\n  };\n};\n\n// Calculate personal cost of capital (for personal funding sources)\nexport const calculatePersonalCostOfCapital = (fundingAllocation) => {\n  let totalPersonalFunding = 0;\n  let weightedPersonalCost = 0;\n  \n  // Only consider personal funding sources: Taiwanese Loan, Personal Cash, Home Equity\n  const personalCostRates = {\n    taiwaneseLoan: 0.028, // 2.8% - personal loan rate\n    personalCash: 0.08, // 8% opportunity cost\n    houseEquity: 0.08, // 8% home equity rate\n    // Excluded: additionalInvestment, sellerFinancing, sbaLoan (not personal funding)\n  };\n  \n  // Only calculate for personal funding sources\n  const personalSources = ['taiwaneseLoan', 'personalCash', 'houseEquity'];\n  \n  console.log('DEBUG - Personal Cost Calculation:', {\n    fundingAllocation: fundingAllocation.allocation,\n    personalSources\n  });\n  \n  personalSources.forEach(source => {\n    const amount = fundingAllocation.allocation[source] || 0;\n    console.log(`DEBUG - ${source}:`, { amount, rate: personalCostRates[source] });\n    if (amount > 0) {\n      totalPersonalFunding += amount;\n      weightedPersonalCost += amount * personalCostRates[source];\n    }\n  });\n  \n  const result = totalPersonalFunding > 0 ? (weightedPersonalCost / totalPersonalFunding) * 100 : 0;\n  console.log('DEBUG - Personal Cost Result:', { totalPersonalFunding, weightedPersonalCost, result });\n  \n  return result;\n};\n\n// Main scenario calculation with priority-based funding\nexport const calculateScenariosWithPriority = (targetRevenues, variables, fundingSources) => {\n  return targetRevenues.map(revenue => {\n    // Step 1: Calculate business metrics\n    const netMargin = variables.netProfitMargin || 25;\n    const valuationMultiple = variables.valuationMultiple || 4;\n    const ebitda = revenue * (netMargin / 100);\n    const purchasePrice = ebitda * valuationMultiple;\n    \n    const businessMetrics = {\n      targetRevenue: revenue,\n      ebitda: ebitda,\n      purchasePrice: purchasePrice\n    };\n    \n    // Step 2: Calculate down payment needed (same logic as Scenario Comparison)\n    const downPaymentCalculation = calculateDownPaymentNeeded(businessMetrics, variables);\n    \n    // Step 3: Allocate funding by priority based on down payment needed\n    const fundingAllocation = allocateFundingByPriority(\n      downPaymentCalculation.downPaymentNeeded, \n      fundingSources\n    );\n    \n    // Step 4: Calculate purchase price financing\n    const purchaseFinancing = calculatePurchasePriceFinancing(\n      businessMetrics.purchasePrice, \n      fundingAllocation,\n      variables\n    );\n    \n    // Step 5: Calculate debt service\n    const businessDebtService = calculateBusinessDebtService(purchaseFinancing);\n    const personalDebtService = calculatePersonalDebtService(fundingAllocation);\n    \n    // Step 6: Calculate ownership, WACC, and personal cost of capital\n    const ownership = calculatePriorityBasedOwnership(fundingAllocation);\n    const wacc = calculatePriorityBasedWACC(fundingAllocation, businessMetrics.purchasePrice);\n    const personalCostOfCapital = calculatePersonalCostOfCapital(fundingAllocation);\n    \n    // Step 7: Calculate cash flows\n    const businessCashFlow = businessMetrics.ebitda - \n      businessDebtService.totalBusinessDebtService - \n      (variables.managementSalary || 100000) - \n      (variables.techInvestment || 100000) / 3;\n    \n    const ownerDistribution = businessCashFlow * ownership.yourOwnership;\n    const personalNetCashFlow = ownerDistribution - personalDebtService.totalPersonalDebtService;\n    \n    return {\n      ...businessMetrics,\n      ...downPaymentCalculation,\n      fundingAllocation,\n      purchaseFinancing,\n      businessDebtService,\n      personalDebtService,\n      ownership,\n      wacc,\n      personalCostOfCapital,\n      businessCashFlow,\n      ownerDistribution,\n      personalNetCashFlow,\n      personalROI: (personalNetCashFlow / (fundingAllocation.allocation.personalCash + fundingAllocation.allocation.taiwaneseLoan + fundingAllocation.allocation.houseEquity)) * 100\n    };\n  });\n}; \n\n// Calculate down payment needed using the same logic as Scenario Comparison\nexport const calculateDownPaymentNeeded = (scenario, variables) => {\n  const purchasePrice = scenario.purchasePrice;\n  \n  // Calculate SBA down payment\n  const sellerFinancingPercent = variables.sellerFinancing || 20;\n  const sellerFinancingAmount = purchasePrice * (sellerFinancingPercent / 100);\n  const sbaLoanAmount = purchasePrice - sellerFinancingAmount;\n  const sbaDownPaymentPercent = variables.sbaDownPayment || 12;\n  const sbaDownPayment = sbaLoanAmount * (sbaDownPaymentPercent / 100);\n  \n  // Calculate working capital and fees (same as Scenario Comparison)\n  const workingCapitalPercent = variables.workingCapital || 7.9;\n  const workingCapital = scenario.targetRevenue * (workingCapitalPercent / 100);\n  const fees = purchasePrice * 0.025; // 2.5% total fees (due diligence + professional fees)\n  \n  // Down Payment Needed = SBA Down Payment + Working Capital + Fees\n  const downPaymentNeeded = sbaDownPayment + workingCapital + fees;\n  \n  return {\n    sbaDownPayment,\n    workingCapital,\n    fees,\n    downPaymentNeeded\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}